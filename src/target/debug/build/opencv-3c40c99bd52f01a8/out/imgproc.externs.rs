extern "C" {
#[doc(hidden)] pub fn cv_imgproc_cv_Canny_InputArray_image_OutputArray_edges_double_threshold1_double_threshold2_int_apertureSize_bool_L2gradient(image: *mut c_void, edges: *mut c_void, threshold1: f64, threshold2: f64, apertureSize: i32, L2gradient: bool) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_imgproc_cv_GaussianBlur_InputArray_src_OutputArray_dst_Size_ksize_double_sigmaX_double_sigmaY_int_borderType(src: *mut c_void, dst: *mut c_void, ksize: ::core::Size, sigmaX: f64, sigmaY: f64, borderType: i32) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_imgproc_cv_HoughCircles_InputArray_image_OutputArray_circles_int_method_double_dp_double_minDist_double_param1_double_param2_int_minRadius_int_maxRadius(image: *mut c_void, circles: *mut c_void, method: i32, dp: f64, minDist: f64, param1: f64, param2: f64, minRadius: i32, maxRadius: i32) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_imgproc_cv_HoughLinesP_InputArray_image_OutputArray_lines_double_rho_double_theta_int_threshold_double_minLineLength_double_maxLineGap(image: *mut c_void, lines: *mut c_void, rho: f64, theta: f64, threshold: i32, minLineLength: f64, maxLineGap: f64) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_imgproc_cv_HoughLines_InputArray_image_OutputArray_lines_double_rho_double_theta_int_threshold_double_srn_double_stn(image: *mut c_void, lines: *mut c_void, rho: f64, theta: f64, threshold: i32, srn: f64, stn: f64) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_imgproc_cv_HuMoments_Moments_m_OutputArray_hu(m: ::imgproc::Moments, hu: *mut c_void) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_imgproc_cv_Laplacian_InputArray_src_OutputArray_dst_int_ddepth_int_ksize_double_scale_double_delta_int_borderType(src: *mut c_void, dst: *mut c_void, ddepth: i32, ksize: i32, scale: f64, delta: f64, borderType: i32) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_imgproc_cv_PSNR_InputArray_src1_InputArray_src2(src1: *mut c_void, src2: *mut c_void) -> cv_return_value_double;
#[doc(hidden)] pub fn cv_imgproc_cv_Scharr_InputArray_src_OutputArray_dst_int_ddepth_int_dx_int_dy_double_scale_double_delta_int_borderType(src: *mut c_void, dst: *mut c_void, ddepth: i32, dx: i32, dy: i32, scale: f64, delta: f64, borderType: i32) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_imgproc_cv_Sobel_InputArray_src_OutputArray_dst_int_ddepth_int_dx_int_dy_int_ksize_double_scale_double_delta_int_borderType(src: *mut c_void, dst: *mut c_void, ddepth: i32, dx: i32, dy: i32, ksize: i32, scale: f64, delta: f64, borderType: i32) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_imgproc_cv_adaptiveBilateralFilter_InputArray_src_OutputArray_dst_Size_ksize_double_sigmaSpace_double_maxSigmaColor_Point_anchor_int_borderType(src: *mut c_void, dst: *mut c_void, ksize: ::core::Size, sigmaSpace: f64, maxSigmaColor: f64, anchor: ::core::Point, borderType: i32) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_imgproc_cv_adaptiveThreshold_InputArray_src_OutputArray_dst_double_maxValue_int_adaptiveMethod_int_thresholdType_int_blockSize_double_C(src: *mut c_void, dst: *mut c_void, maxValue: f64, adaptiveMethod: i32, thresholdType: i32, blockSize: i32, C: f64) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_imgproc_cv_approxPolyDP_InputArray_curve_OutputArray_approxCurve_double_epsilon_bool_closed(curve: *mut c_void, approxCurve: *mut c_void, epsilon: f64, closed: bool) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_imgproc_cv_arcLength_InputArray_curve_bool_closed(curve: *mut c_void, closed: bool) -> cv_return_value_double;
#[doc(hidden)] pub fn cv_imgproc_cv_bilateralFilter_InputArray_src_OutputArray_dst_int_d_double_sigmaColor_double_sigmaSpace_int_borderType(src: *mut c_void, dst: *mut c_void, d: i32, sigmaColor: f64, sigmaSpace: f64, borderType: i32) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_imgproc_cv_blur_InputArray_src_OutputArray_dst_Size_ksize_Point_anchor_int_borderType(src: *mut c_void, dst: *mut c_void, ksize: ::core::Size, anchor: ::core::Point, borderType: i32) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_imgproc_cv_borderInterpolate_int_p_int_len_int_borderType(p: i32, len: i32, borderType: i32) -> cv_return_value_int;
#[doc(hidden)] pub fn cv_imgproc_cv_boundingRect_InputArray_points(points: *mut c_void) -> cv_return_value_c_Rect;
#[doc(hidden)] pub fn cv_imgproc_cv_boxFilter_InputArray_src_OutputArray_dst_int_ddepth_Size_ksize_Point_anchor_bool_normalize_int_borderType(src: *mut c_void, dst: *mut c_void, ddepth: i32, ksize: ::core::Size, anchor: ::core::Point, normalize: bool, borderType: i32) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_imgproc_cv_compareHist_InputArray_H1_InputArray_H2_int_method(H1: *mut c_void, H2: *mut c_void, method: i32) -> cv_return_value_double;
#[doc(hidden)] pub fn cv_imgproc_cv_contourArea_InputArray_contour_bool_oriented(contour: *mut c_void, oriented: bool) -> cv_return_value_double;
#[doc(hidden)] pub fn cv_imgproc_cv_convertMaps_InputArray_map1_InputArray_map2_OutputArray_dstmap1_OutputArray_dstmap2_int_dstmap1type_bool_nninterpolation(map1: *mut c_void, map2: *mut c_void, dstmap1: *mut c_void, dstmap2: *mut c_void, dstmap1type: i32, nninterpolation: bool) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_imgproc_cv_convexHull_InputArray_points_OutputArray_hull_bool_clockwise_bool_returnPoints(points: *mut c_void, hull: *mut c_void, clockwise: bool, returnPoints: bool) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_imgproc_cv_convexityDefects_InputArray_contour_InputArray_convexhull_OutputArray_convexityDefects(contour: *mut c_void, convexhull: *mut c_void, convexityDefects: *mut c_void) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_imgproc_cv_copyMakeBorder_InputArray_src_OutputArray_dst_int_top_int_bottom_int_left_int_right_int_borderType_Scalar_value(src: *mut c_void, dst: *mut c_void, top: i32, bottom: i32, left: i32, right: i32, borderType: i32, value: ::core::Scalar) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_imgproc_cv_cornerEigenValsAndVecs_InputArray_src_OutputArray_dst_int_blockSize_int_ksize_int_borderType(src: *mut c_void, dst: *mut c_void, blockSize: i32, ksize: i32, borderType: i32) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_imgproc_cv_cornerHarris_InputArray_src_OutputArray_dst_int_blockSize_int_ksize_double_k_int_borderType(src: *mut c_void, dst: *mut c_void, blockSize: i32, ksize: i32, k: f64, borderType: i32) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_imgproc_cv_cornerMinEigenVal_InputArray_src_OutputArray_dst_int_blockSize_int_ksize_int_borderType(src: *mut c_void, dst: *mut c_void, blockSize: i32, ksize: i32, borderType: i32) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_imgproc_cv_createBoxFilter_int_srcType_int_dstType_Size_ksize_Point_anchor_bool_normalize_int_borderType(srcType: i32, dstType: i32, ksize: ::core::Size, anchor: ::core::Point, normalize: bool, borderType: i32) -> cv_return_value_void_X;
#[doc(hidden)] pub fn cv_imgproc_cv_createDerivFilter_int_srcType_int_dstType_int_dx_int_dy_int_ksize_int_borderType(srcType: i32, dstType: i32, dx: i32, dy: i32, ksize: i32, borderType: i32) -> cv_return_value_void_X;
#[doc(hidden)] pub fn cv_imgproc_cv_createGaussianFilter_int_type_Size_ksize_double_sigma1_double_sigma2_int_borderType(_type: i32, ksize: ::core::Size, sigma1: f64, sigma2: f64, borderType: i32) -> cv_return_value_void_X;
#[doc(hidden)] pub fn cv_imgproc_cv_createHanningWindow_OutputArray_dst_Size_winSize_int_type(dst: *mut c_void, winSize: ::core::Size, _type: i32) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_imgproc_cv_createLinearFilter_int_srcType_int_dstType_InputArray_kernel_Point__anchor_double_delta_int_rowBorderType_int_columnBorderType_Scalar_borderValue(srcType: i32, dstType: i32, kernel: *mut c_void, _anchor: ::core::Point, delta: f64, rowBorderType: i32, columnBorderType: i32, borderValue: ::core::Scalar) -> cv_return_value_void_X;
#[doc(hidden)] pub fn cv_imgproc_cv_createMorphologyFilter_int_op_int_type_InputArray_kernel_Point_anchor_int_rowBorderType_int_columnBorderType_Scalar_borderValue(op: i32, _type: i32, kernel: *mut c_void, anchor: ::core::Point, rowBorderType: i32, columnBorderType: i32, borderValue: ::core::Scalar) -> cv_return_value_void_X;
#[doc(hidden)] pub fn cv_imgproc_cv_createSeparableLinearFilter_int_srcType_int_dstType_InputArray_rowKernel_InputArray_columnKernel_Point_anchor_double_delta_int_rowBorderType_int_columnBorderType_Scalar_borderValue(srcType: i32, dstType: i32, rowKernel: *mut c_void, columnKernel: *mut c_void, anchor: ::core::Point, delta: f64, rowBorderType: i32, columnBorderType: i32, borderValue: ::core::Scalar) -> cv_return_value_void_X;
#[doc(hidden)] pub fn cv_imgproc_cv_cvtColor_InputArray_src_OutputArray_dst_int_code_int_dstCn(src: *mut c_void, dst: *mut c_void, code: i32, dstCn: i32) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_imgproc_cv_dilate_InputArray_src_OutputArray_dst_InputArray_kernel_Point_anchor_int_iterations_int_borderType_Scalar_borderValue(src: *mut c_void, dst: *mut c_void, kernel: *mut c_void, anchor: ::core::Point, iterations: i32, borderType: i32, borderValue: ::core::Scalar) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_imgproc_cv_distanceTransform_InputArray_src_OutputArray_dst_OutputArray_labels_int_distanceType_int_maskSize_int_labelType(src: *mut c_void, dst: *mut c_void, labels: *mut c_void, distanceType: i32, maskSize: i32, labelType: i32) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_imgproc_cv_distanceTransform_InputArray_src_OutputArray_dst_int_distanceType_int_maskSize(src: *mut c_void, dst: *mut c_void, distanceType: i32, maskSize: i32) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_imgproc_cv_equalizeHist_InputArray_src_OutputArray_dst(src: *mut c_void, dst: *mut c_void) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_imgproc_cv_erode_InputArray_src_OutputArray_dst_InputArray_kernel_Point_anchor_int_iterations_int_borderType_Scalar_borderValue(src: *mut c_void, dst: *mut c_void, kernel: *mut c_void, anchor: ::core::Point, iterations: i32, borderType: i32, borderValue: ::core::Scalar) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_imgproc_cv_filter2D_InputArray_src_OutputArray_dst_int_ddepth_InputArray_kernel_Point_anchor_double_delta_int_borderType(src: *mut c_void, dst: *mut c_void, ddepth: i32, kernel: *mut c_void, anchor: ::core::Point, delta: f64, borderType: i32) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_imgproc_cv_fitLine_InputArray_points_OutputArray_line_int_distType_double_param_double_reps_double_aeps(points: *mut c_void, line: *mut c_void, distType: i32, param: f64, reps: f64, aeps: f64) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_imgproc_cv_getAffineTransform_InputArray_src_InputArray_dst(src: *mut c_void, dst: *mut c_void) -> cv_return_value_void_X;
#[doc(hidden)] pub fn cv_imgproc_cv_getDefaultNewCameraMatrix_InputArray_cameraMatrix_Size_imgsize_bool_centerPrincipalPoint(cameraMatrix: *mut c_void, imgsize: ::core::Size, centerPrincipalPoint: bool) -> cv_return_value_void_X;
#[doc(hidden)] pub fn cv_imgproc_cv_getDerivKernels_OutputArray_kx_OutputArray_ky_int_dx_int_dy_int_ksize_bool_normalize_int_ktype(kx: *mut c_void, ky: *mut c_void, dx: i32, dy: i32, ksize: i32, normalize: bool, ktype: i32) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_imgproc_cv_getGaborKernel_Size_ksize_double_sigma_double_theta_double_lambd_double_gamma_double_psi_int_ktype(ksize: ::core::Size, sigma: f64, theta: f64, lambd: f64, gamma: f64, psi: f64, ktype: i32) -> cv_return_value_void_X;
#[doc(hidden)] pub fn cv_imgproc_cv_getGaussianKernel_int_ksize_double_sigma_int_ktype(ksize: i32, sigma: f64, ktype: i32) -> cv_return_value_void_X;
#[doc(hidden)] pub fn cv_imgproc_cv_getKernelType_InputArray_kernel_Point_anchor(kernel: *mut c_void, anchor: ::core::Point) -> cv_return_value_int;
#[doc(hidden)] pub fn cv_imgproc_cv_getPerspectiveTransform_InputArray_src_InputArray_dst(src: *mut c_void, dst: *mut c_void) -> cv_return_value_void_X;
#[doc(hidden)] pub fn cv_imgproc_cv_getRectSubPix_InputArray_image_Size_patchSize_Point2f_center_OutputArray_patch_int_patchType(image: *mut c_void, patchSize: ::core::Size, center: ::core::Point2f, patch: *mut c_void, patchType: i32) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_imgproc_cv_getRotationMatrix2D_Point2f_center_double_angle_double_scale(center: ::core::Point2f, angle: f64, scale: f64) -> cv_return_value_void_X;
#[doc(hidden)] pub fn cv_imgproc_cv_getStructuringElement_int_shape_Size_ksize_Point_anchor(shape: i32, ksize: ::core::Size, anchor: ::core::Point) -> cv_return_value_void_X;
#[doc(hidden)] pub fn cv_imgproc_cv_goodFeaturesToTrack_InputArray_image_OutputArray_corners_int_maxCorners_double_qualityLevel_double_minDistance_InputArray_mask_int_blockSize_bool_useHarrisDetector_double_k(image: *mut c_void, corners: *mut c_void, maxCorners: i32, qualityLevel: f64, minDistance: f64, mask: *mut c_void, blockSize: i32, useHarrisDetector: bool, k: f64) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_imgproc_cv_initUndistortRectifyMap_InputArray_cameraMatrix_InputArray_distCoeffs_InputArray_R_InputArray_newCameraMatrix_Size_size_int_m1type_OutputArray_map1_OutputArray_map2(cameraMatrix: *mut c_void, distCoeffs: *mut c_void, R: *mut c_void, newCameraMatrix: *mut c_void, size: ::core::Size, m1type: i32, map1: *mut c_void, map2: *mut c_void) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_imgproc_cv_initWideAngleProjMap_InputArray_cameraMatrix_InputArray_distCoeffs_Size_imageSize_int_destImageWidth_int_m1type_OutputArray_map1_OutputArray_map2_int_projType_double_alpha(cameraMatrix: *mut c_void, distCoeffs: *mut c_void, imageSize: ::core::Size, destImageWidth: i32, m1type: i32, map1: *mut c_void, map2: *mut c_void, projType: i32, alpha: f64) -> cv_return_value_float;
#[doc(hidden)] pub fn cv_imgproc_cv_integral_InputArray_src_OutputArray_sum_OutputArray_sqsum_OutputArray_tilted_int_sdepth(src: *mut c_void, sum: *mut c_void, sqsum: *mut c_void, tilted: *mut c_void, sdepth: i32) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_imgproc_cv_integral_InputArray_src_OutputArray_sum_OutputArray_sqsum_int_sdepth(src: *mut c_void, sum: *mut c_void, sqsum: *mut c_void, sdepth: i32) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_imgproc_cv_integral_InputArray_src_OutputArray_sum_int_sdepth(src: *mut c_void, sum: *mut c_void, sdepth: i32) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_imgproc_cv_intersectConvexConvex_InputArray__p1_InputArray__p2_OutputArray__p12_bool_handleNested(_p1: *mut c_void, _p2: *mut c_void, _p12: *mut c_void, handleNested: bool) -> cv_return_value_float;
#[doc(hidden)] pub fn cv_imgproc_cv_invertAffineTransform_InputArray_M_OutputArray_iM(M: *mut c_void, iM: *mut c_void) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_imgproc_cv_isContourConvex_InputArray_contour(contour: *mut c_void) -> cv_return_value_char;
#[doc(hidden)] pub fn cv_imgproc_cv_matchShapes_InputArray_contour1_InputArray_contour2_int_method_double_parameter(contour1: *mut c_void, contour2: *mut c_void, method: i32, parameter: f64) -> cv_return_value_double;
#[doc(hidden)] pub fn cv_imgproc_cv_matchTemplate_InputArray_image_InputArray_templ_OutputArray_result_int_method(image: *mut c_void, templ: *mut c_void, result: *mut c_void, method: i32) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_imgproc_cv_medianBlur_InputArray_src_OutputArray_dst_int_ksize(src: *mut c_void, dst: *mut c_void, ksize: i32) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_imgproc_cv_minEnclosingCircle_InputArray_points_Point2f_center_float_radius(points: *mut c_void, center: ::core::Point2f, radius: f32) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_imgproc_cv_moments_InputArray_array_bool_binaryImage(array: *mut c_void, binaryImage: bool) -> cv_return_value_c_Moments;
#[doc(hidden)] pub fn cv_imgproc_cv_morphologyDefaultBorderValue() -> cv_return_value_c_Scalar;
#[doc(hidden)] pub fn cv_imgproc_cv_morphologyEx_InputArray_src_OutputArray_dst_int_op_InputArray_kernel_Point_anchor_int_iterations_int_borderType_Scalar_borderValue(src: *mut c_void, dst: *mut c_void, op: i32, kernel: *mut c_void, anchor: ::core::Point, iterations: i32, borderType: i32, borderValue: ::core::Scalar) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_imgproc_cv_phaseCorrelate_InputArray_src1_InputArray_src2_InputArray_window(src1: *mut c_void, src2: *mut c_void, window: *mut c_void) -> cv_return_value_c_Point2d;
#[doc(hidden)] pub fn cv_imgproc_cv_pointPolygonTest_InputArray_contour_Point2f_pt_bool_measureDist(contour: *mut c_void, pt: ::core::Point2f, measureDist: bool) -> cv_return_value_double;
#[doc(hidden)] pub fn cv_imgproc_cv_preCornerDetect_InputArray_src_OutputArray_dst_int_ksize_int_borderType(src: *mut c_void, dst: *mut c_void, ksize: i32, borderType: i32) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_imgproc_cv_pyrDown_InputArray_src_OutputArray_dst_Size_dstsize_int_borderType(src: *mut c_void, dst: *mut c_void, dstsize: ::core::Size, borderType: i32) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_imgproc_cv_pyrUp_InputArray_src_OutputArray_dst_Size_dstsize_int_borderType(src: *mut c_void, dst: *mut c_void, dstsize: ::core::Size, borderType: i32) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_imgproc_cv_remap_InputArray_src_OutputArray_dst_InputArray_map1_InputArray_map2_int_interpolation_int_borderMode_Scalar_borderValue(src: *mut c_void, dst: *mut c_void, map1: *mut c_void, map2: *mut c_void, interpolation: i32, borderMode: i32, borderValue: ::core::Scalar) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_imgproc_cv_resize_InputArray_src_OutputArray_dst_Size_dsize_double_fx_double_fy_int_interpolation(src: *mut c_void, dst: *mut c_void, dsize: ::core::Size, fx: f64, fy: f64, interpolation: i32) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_imgproc_cv_sepFilter2D_InputArray_src_OutputArray_dst_int_ddepth_InputArray_kernelX_InputArray_kernelY_Point_anchor_double_delta_int_borderType(src: *mut c_void, dst: *mut c_void, ddepth: i32, kernelX: *mut c_void, kernelY: *mut c_void, anchor: ::core::Point, delta: f64, borderType: i32) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_imgproc_cv_threshold_InputArray_src_OutputArray_dst_double_thresh_double_maxval_int_type(src: *mut c_void, dst: *mut c_void, thresh: f64, maxval: f64, _type: i32) -> cv_return_value_double;
#[doc(hidden)] pub fn cv_imgproc_cv_undistortPoints_InputArray_src_OutputArray_dst_InputArray_cameraMatrix_InputArray_distCoeffs_InputArray_R_InputArray_P(src: *mut c_void, dst: *mut c_void, cameraMatrix: *mut c_void, distCoeffs: *mut c_void, R: *mut c_void, P: *mut c_void) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_imgproc_cv_undistort_InputArray_src_OutputArray_dst_InputArray_cameraMatrix_InputArray_distCoeffs_InputArray_newCameraMatrix(src: *mut c_void, dst: *mut c_void, cameraMatrix: *mut c_void, distCoeffs: *mut c_void, newCameraMatrix: *mut c_void) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_imgproc_cv_warpAffine_InputArray_src_OutputArray_dst_InputArray_M_Size_dsize_int_flags_int_borderMode_Scalar_borderValue(src: *mut c_void, dst: *mut c_void, M: *mut c_void, dsize: ::core::Size, flags: i32, borderMode: i32, borderValue: ::core::Scalar) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_imgproc_cv_warpPerspective_InputArray_src_OutputArray_dst_InputArray_M_Size_dsize_int_flags_int_borderMode_Scalar_borderValue(src: *mut c_void, dst: *mut c_void, M: *mut c_void, dsize: ::core::Size, flags: i32, borderMode: i32, borderValue: ::core::Scalar) -> cv_return_value_void;
pub fn cv_delete_FilterEngine(ptr : *mut c_void);
#[doc(hidden)] pub fn cv_imgproc_cv_FilterEngine_FilterEngine() -> cv_return_value_void_X;
#[doc(hidden)] pub fn cv_imgproc_cv_FilterEngine_start_Size_wholeSize_Rect_roi_int_maxBufRows(instance: *mut c_void, wholeSize: ::core::Size, roi: ::core::Rect, maxBufRows: i32) -> cv_return_value_int;
#[doc(hidden)] pub fn cv_imgproc_cv_FilterEngine_start_Mat_src_Rect_srcRoi_bool_isolated_int_maxBufRows(instance: *mut c_void, src: *mut c_void, srcRoi: ::core::Rect, isolated: bool, maxBufRows: i32) -> cv_return_value_int;
#[doc(hidden)] pub fn cv_imgproc_cv_FilterEngine_apply_Mat_src_Mat_dst_Rect_srcRoi_Point_dstOfs_bool_isolated(instance: *mut c_void, src: *mut c_void, dst: *mut c_void, srcRoi: ::core::Rect, dstOfs: ::core::Point, isolated: bool) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_imgproc_cv_FilterEngine_isSeparable(instance: *const c_void) -> cv_return_value_char;
#[doc(hidden)] pub fn cv_imgproc_cv_FilterEngine_remainingInputRows(instance: *const c_void) -> cv_return_value_int;
#[doc(hidden)] pub fn cv_imgproc_cv_FilterEngine_remainingOutputRows(instance: *const c_void) -> cv_return_value_int;
#[doc(hidden)] pub fn cv_imgproc_cv_GeneralizedHough_create_int_method(instance: *mut c_void, method: i32) -> cv_return_value_void_X;
#[doc(hidden)] pub fn cv_imgproc_cv_GeneralizedHough_setTemplate_InputArray_edges_InputArray_dx_InputArray_dy_Point_templCenter(instance: *mut c_void, edges: *mut c_void, dx: *mut c_void, dy: *mut c_void, templCenter: ::core::Point) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_imgproc_cv_GeneralizedHough_detect_InputArray_image_OutputArray_positions_OutputArray_votes_int_cannyThreshold(instance: *mut c_void, image: *mut c_void, positions: *mut c_void, votes: *mut c_void, cannyThreshold: i32) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_imgproc_cv_GeneralizedHough_detect_InputArray_edges_InputArray_dx_InputArray_dy_OutputArray_positions_OutputArray_votes(instance: *mut c_void, edges: *mut c_void, dx: *mut c_void, dy: *mut c_void, positions: *mut c_void, votes: *mut c_void) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_imgproc_cv_GeneralizedHough_release(instance: *mut c_void) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_imgproc_cv_Moments_Moments() -> cv_return_value_c_Moments;
#[doc(hidden)] pub fn cv_imgproc_cv_Moments_Moments_double_m00_double_m10_double_m01_double_m20_double_m11_double_m02_double_m30_double_m21_double_m12_double_m03(m00: f64, m10: f64, m01: f64, m20: f64, m11: f64, m02: f64, m30: f64, m21: f64, m12: f64, m03: f64) -> cv_return_value_c_Moments;
pub fn cv_delete_Subdiv2D(ptr : *mut c_void);
#[doc(hidden)] pub fn cv_imgproc_cv_Subdiv2D_Subdiv2D() -> cv_return_value_void_X;
#[doc(hidden)] pub fn cv_imgproc_cv_Subdiv2D_Subdiv2D_Rect_rect(rect: ::core::Rect) -> cv_return_value_void_X;
#[doc(hidden)] pub fn cv_imgproc_cv_Subdiv2D_initDelaunay_Rect_rect(instance: *mut c_void, rect: ::core::Rect) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_imgproc_cv_Subdiv2D_insert_Point2f_pt(instance: *mut c_void, pt: ::core::Point2f) -> cv_return_value_int;
#[doc(hidden)] pub fn cv_imgproc_cv_Subdiv2D_insert_VectorOfPoint2f_ptvec(instance: *mut c_void, ptvec: *mut c_void) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_imgproc_cv_Subdiv2D_locate_Point2f_pt_int_edge_int_vertex(instance: *mut c_void, pt: ::core::Point2f, edge: i32, vertex: i32) -> cv_return_value_int;
#[doc(hidden)] pub fn cv_imgproc_cv_Subdiv2D_getEdgeList_VectorOfVec4f_edgeList(instance: *const c_void, edgeList: *mut c_void) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_imgproc_cv_Subdiv2D_getTriangleList_VectorOfVec6f_triangleList(instance: *const c_void, triangleList: *mut c_void) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_imgproc_cv_Subdiv2D_getVoronoiFacetList_VectorOfint_idx_VectorOfVectorOfPoint2f_facetList_VectorOfPoint2f_facetCenters(instance: *mut c_void, idx: *mut c_void, facetList: *mut c_void, facetCenters: *mut c_void) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_imgproc_cv_Subdiv2D_getEdge_int_edge_int_nextEdgeType(instance: *const c_void, edge: i32, nextEdgeType: i32) -> cv_return_value_int;
#[doc(hidden)] pub fn cv_imgproc_cv_Subdiv2D_nextEdge_int_edge(instance: *const c_void, edge: i32) -> cv_return_value_int;
#[doc(hidden)] pub fn cv_imgproc_cv_Subdiv2D_rotateEdge_int_edge_int_rotate(instance: *const c_void, edge: i32, rotate: i32) -> cv_return_value_int;
#[doc(hidden)] pub fn cv_imgproc_cv_Subdiv2D_symEdge_int_edge(instance: *const c_void, edge: i32) -> cv_return_value_int;
}
