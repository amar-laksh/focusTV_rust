extern "C" {
#[doc(hidden)] pub fn cv_highgui_CV_FOURCC_char_c1_char_c2_char_c3_char_c4(c1: i8, c2: i8, c3: i8, c4: i8) -> cv_return_value_int;
#[doc(hidden)] pub fn cv_highgui_cvDestroyAllWindows() -> cv_return_value_void;
#[doc(hidden)] pub fn cv_highgui_cvStartWindowThread() -> cv_return_value_int;
#[doc(hidden)] pub fn cv_highgui_cvStopLoop() -> cv_return_value_void;
#[doc(hidden)] pub fn cv_highgui_cvWaitKey_int_delay(delay: i32) -> cv_return_value_int;
#[doc(hidden)] pub fn cv_highgui_cv_destroyAllWindows() -> cv_return_value_void;
#[doc(hidden)] pub fn cv_highgui_cv_destroyWindow_String_winname(winname: *const c_char) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_highgui_cv_displayOverlay_String_winname_String_text_int_delayms(winname: *const c_char, text: *const c_char, delayms: i32) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_highgui_cv_displayStatusBar_String_winname_String_text_int_delayms(winname: *const c_char, text: *const c_char, delayms: i32) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_highgui_cv_getTrackbarPos_String_trackbarname_String_winname(trackbarname: *const c_char, winname: *const c_char) -> cv_return_value_int;
#[doc(hidden)] pub fn cv_highgui_cv_getWindowProperty_String_winname_int_prop_id(winname: *const c_char, prop_id: i32) -> cv_return_value_double;
#[doc(hidden)] pub fn cv_highgui_cv_imencode_String_ext_InputArray_img_VectorOfuchar_buf_VectorOfint_params(ext: *const c_char, img: *mut c_void, buf: *mut c_void, params: *mut c_void) -> cv_return_value_char;
#[doc(hidden)] pub fn cv_highgui_cv_imread_String_filename_int_flags(filename: *const c_char, flags: i32) -> cv_return_value_void_X;
#[doc(hidden)] pub fn cv_highgui_cv_imshow_String_winname_InputArray_mat(winname: *const c_char, mat: *mut c_void) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_highgui_cv_imwrite_String_filename_InputArray_img_VectorOfint_params(filename: *const c_char, img: *mut c_void, params: *mut c_void) -> cv_return_value_char;
#[doc(hidden)] pub fn cv_highgui_cv_loadWindowParameters_String_windowName(windowName: *const c_char) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_highgui_cv_moveWindow_String_winname_int_x_int_y(winname: *const c_char, x: i32, y: i32) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_highgui_cv_namedWindow_String_winname_int_flags(winname: *const c_char, flags: i32) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_highgui_cv_resizeWindow_String_winname_int_width_int_height(winname: *const c_char, width: i32, height: i32) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_highgui_cv_saveWindowParameters_String_windowName(windowName: *const c_char) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_highgui_cv_setOpenGlContext_String_winname(winname: *const c_char) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_highgui_cv_setTrackbarPos_String_trackbarname_String_winname_int_pos(trackbarname: *const c_char, winname: *const c_char, pos: i32) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_highgui_cv_setWindowProperty_String_winname_int_prop_id_double_prop_value(winname: *const c_char, prop_id: i32, prop_value: f64) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_highgui_cv_startWindowThread() -> cv_return_value_int;
#[doc(hidden)] pub fn cv_highgui_cv_stopLoop() -> cv_return_value_void;
#[doc(hidden)] pub fn cv_highgui_cv_updateWindow_String_winname(winname: *const c_char) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_highgui_cv_waitKey_int_delay(delay: i32) -> cv_return_value_int;
pub fn cv_delete_VideoCapture(ptr : *mut c_void);
#[doc(hidden)] pub fn cv_highgui_cv_VideoCapture_VideoCapture() -> cv_return_value_void_X;
#[doc(hidden)] pub fn cv_highgui_cv_VideoCapture_VideoCapture_String_filename(filename: *const c_char) -> cv_return_value_void_X;
#[doc(hidden)] pub fn cv_highgui_cv_VideoCapture_VideoCapture_int_device(device: i32) -> cv_return_value_void_X;
#[doc(hidden)] pub fn cv_highgui_cv_VideoCapture_open_String_filename(instance: *mut c_void, filename: *const c_char) -> cv_return_value_char;
#[doc(hidden)] pub fn cv_highgui_cv_VideoCapture_open_int_device(instance: *mut c_void, device: i32) -> cv_return_value_char;
#[doc(hidden)] pub fn cv_highgui_cv_VideoCapture_isOpened(instance: *const c_void) -> cv_return_value_char;
#[doc(hidden)] pub fn cv_highgui_cv_VideoCapture_release(instance: *mut c_void) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_highgui_cv_VideoCapture_grab(instance: *mut c_void) -> cv_return_value_char;
#[doc(hidden)] pub fn cv_highgui_cv_VideoCapture_retrieve_Mat_image_int_channel(instance: *mut c_void, image: *mut c_void, channel: i32) -> cv_return_value_char;
#[doc(hidden)] pub fn cv_highgui_cv_VideoCapture_read_Mat_image(instance: *mut c_void, image: *mut c_void) -> cv_return_value_char;
#[doc(hidden)] pub fn cv_highgui_cv_VideoCapture_set_int_propId_double_value(instance: *mut c_void, propId: i32, value: f64) -> cv_return_value_char;
#[doc(hidden)] pub fn cv_highgui_cv_VideoCapture_get_int_propId(instance: *mut c_void, propId: i32) -> cv_return_value_double;
pub fn cv_delete_VideoWriter(ptr : *mut c_void);
#[doc(hidden)] pub fn cv_highgui_cv_VideoWriter_VideoWriter() -> cv_return_value_void_X;
#[doc(hidden)] pub fn cv_highgui_cv_VideoWriter_VideoWriter_String_filename_int_fourcc_double_fps_Size_frameSize_bool_isColor(filename: *const c_char, fourcc: i32, fps: f64, frameSize: ::core::Size, isColor: bool) -> cv_return_value_void_X;
#[doc(hidden)] pub fn cv_highgui_cv_VideoWriter_open_String_filename_int_fourcc_double_fps_Size_frameSize_bool_isColor(instance: *mut c_void, filename: *const c_char, fourcc: i32, fps: f64, frameSize: ::core::Size, isColor: bool) -> cv_return_value_char;
#[doc(hidden)] pub fn cv_highgui_cv_VideoWriter_isOpened(instance: *const c_void) -> cv_return_value_char;
#[doc(hidden)] pub fn cv_highgui_cv_VideoWriter_release(instance: *mut c_void) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_highgui_cv_VideoWriter_write_Mat_image(instance: *mut c_void, image: *mut c_void) -> cv_return_value_void;
}
