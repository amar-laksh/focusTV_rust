extern "C" {
#[doc(hidden)] pub fn cv_calib3d_cvRANSACUpdateNumIters_double_p_double_err_prob_int_model_points_int_max_iters(p: f64, err_prob: f64, model_points: i32, max_iters: i32) -> cv_return_value_int;
#[doc(hidden)] pub fn cv_calib3d_cv_RQDecomp3x3_InputArray_src_OutputArray_mtxR_OutputArray_mtxQ_OutputArray_Qx_OutputArray_Qy_OutputArray_Qz(src: *mut c_void, mtxR: *mut c_void, mtxQ: *mut c_void, Qx: *mut c_void, Qy: *mut c_void, Qz: *mut c_void) -> cv_return_value_c_Vec3d;
#[doc(hidden)] pub fn cv_calib3d_cv_Rodrigues_InputArray_src_OutputArray_dst_OutputArray_jacobian(src: *mut c_void, dst: *mut c_void, jacobian: *mut c_void) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_calib3d_cv_calibrationMatrixValues_InputArray_cameraMatrix_Size_imageSize_double_apertureWidth_double_apertureHeight_double_fovx_double_fovy_double_focalLength_Point2d_principalPoint_double_aspectRatio(cameraMatrix: *mut c_void, imageSize: ::core::Size, apertureWidth: f64, apertureHeight: f64, fovx: f64, fovy: f64, focalLength: f64, principalPoint: ::core::Point2d, aspectRatio: f64) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_calib3d_cv_composeRT_InputArray_rvec1_InputArray_tvec1_InputArray_rvec2_InputArray_tvec2_OutputArray_rvec3_OutputArray_tvec3_OutputArray_dr3dr1_OutputArray_dr3dt1_OutputArray_dr3dr2_OutputArray_dr3dt2_OutputArray_dt3dr1_OutputArray_dt3dt1_OutputArray_dt3dr2_OutputArray_dt3dt2(rvec1: *mut c_void, tvec1: *mut c_void, rvec2: *mut c_void, tvec2: *mut c_void, rvec3: *mut c_void, tvec3: *mut c_void, dr3dr1: *mut c_void, dr3dt1: *mut c_void, dr3dr2: *mut c_void, dr3dt2: *mut c_void, dt3dr1: *mut c_void, dt3dt1: *mut c_void, dt3dr2: *mut c_void, dt3dt2: *mut c_void) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_calib3d_cv_computeCorrespondEpilines_InputArray_points_int_whichImage_InputArray_F_OutputArray_lines(points: *mut c_void, whichImage: i32, F: *mut c_void, lines: *mut c_void) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_calib3d_cv_convertPointsFromHomogeneous_InputArray_src_OutputArray_dst(src: *mut c_void, dst: *mut c_void) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_calib3d_cv_convertPointsHomogeneous_InputArray_src_OutputArray_dst(src: *mut c_void, dst: *mut c_void) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_calib3d_cv_convertPointsToHomogeneous_InputArray_src_OutputArray_dst(src: *mut c_void, dst: *mut c_void) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_calib3d_cv_correctMatches_InputArray_F_InputArray_points1_InputArray_points2_OutputArray_newPoints1_OutputArray_newPoints2(F: *mut c_void, points1: *mut c_void, points2: *mut c_void, newPoints1: *mut c_void, newPoints2: *mut c_void) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_calib3d_cv_decomposeProjectionMatrix_InputArray_projMatrix_OutputArray_cameraMatrix_OutputArray_rotMatrix_OutputArray_transVect_OutputArray_rotMatrixX_OutputArray_rotMatrixY_OutputArray_rotMatrixZ_OutputArray_eulerAngles(projMatrix: *mut c_void, cameraMatrix: *mut c_void, rotMatrix: *mut c_void, transVect: *mut c_void, rotMatrixX: *mut c_void, rotMatrixY: *mut c_void, rotMatrixZ: *mut c_void, eulerAngles: *mut c_void) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_calib3d_cv_estimateAffine3D_InputArray_src_InputArray_dst_OutputArray_out_OutputArray_inliers_double_ransacThreshold_double_confidence(src: *mut c_void, dst: *mut c_void, out: *mut c_void, inliers: *mut c_void, ransacThreshold: f64, confidence: f64) -> cv_return_value_int;
#[doc(hidden)] pub fn cv_calib3d_cv_findChessboardCorners_InputArray_image_Size_patternSize_OutputArray_corners_int_flags(image: *mut c_void, patternSize: ::core::Size, corners: *mut c_void, flags: i32) -> cv_return_value_char;
#[doc(hidden)] pub fn cv_calib3d_cv_findCirclesGridDefault_InputArray_image_Size_patternSize_OutputArray_centers_int_flags(image: *mut c_void, patternSize: ::core::Size, centers: *mut c_void, flags: i32) -> cv_return_value_char;
#[doc(hidden)] pub fn cv_calib3d_cv_findFundamentalMat_InputArray_points1_InputArray_points2_OutputArray_mask_int_method_double_param1_double_param2(points1: *mut c_void, points2: *mut c_void, mask: *mut c_void, method: i32, param1: f64, param2: f64) -> cv_return_value_void_X;
#[doc(hidden)] pub fn cv_calib3d_cv_findHomography_InputArray_srcPoints_InputArray_dstPoints_OutputArray_mask_int_method_double_ransacReprojThreshold(srcPoints: *mut c_void, dstPoints: *mut c_void, mask: *mut c_void, method: i32, ransacReprojThreshold: f64) -> cv_return_value_void_X;
#[doc(hidden)] pub fn cv_calib3d_cv_findHomography_InputArray_srcPoints_InputArray_dstPoints_int_method_double_ransacReprojThreshold_OutputArray_mask(srcPoints: *mut c_void, dstPoints: *mut c_void, method: i32, ransacReprojThreshold: f64, mask: *mut c_void) -> cv_return_value_void_X;
#[doc(hidden)] pub fn cv_calib3d_cv_fisheye_distortPoints_InputArray_undistorted_OutputArray_distorted_InputArray_K_InputArray_D_double_alpha(undistorted: *mut c_void, distorted: *mut c_void, K: *mut c_void, D: *mut c_void, alpha: f64) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_calib3d_cv_fisheye_projectPoints_InputArray_objectPoints_OutputArray_imagePoints_InputArray_rvec_InputArray_tvec_InputArray_K_InputArray_D_double_alpha_OutputArray_jacobian(objectPoints: *mut c_void, imagePoints: *mut c_void, rvec: *mut c_void, tvec: *mut c_void, K: *mut c_void, D: *mut c_void, alpha: f64, jacobian: *mut c_void) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_calib3d_cv_fisheye_undistortImage_InputArray_distorted_OutputArray_undistorted_InputArray_K_InputArray_D_InputArray_Knew_Size_new_size(distorted: *mut c_void, undistorted: *mut c_void, K: *mut c_void, D: *mut c_void, Knew: *mut c_void, new_size: ::core::Size) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_calib3d_cv_fisheye_undistortPoints_InputArray_distorted_OutputArray_undistorted_InputArray_K_InputArray_D_InputArray_R_InputArray_P(distorted: *mut c_void, undistorted: *mut c_void, K: *mut c_void, D: *mut c_void, R: *mut c_void, P: *mut c_void) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_calib3d_cv_getValidDisparityROI_Rect_roi1_Rect_roi2_int_minDisparity_int_numberOfDisparities_int_SADWindowSize(roi1: ::core::Rect, roi2: ::core::Rect, minDisparity: i32, numberOfDisparities: i32, SADWindowSize: i32) -> cv_return_value_c_Rect;
#[doc(hidden)] pub fn cv_calib3d_cv_matMulDeriv_InputArray_A_InputArray_B_OutputArray_dABdA_OutputArray_dABdB(A: *mut c_void, B: *mut c_void, dABdA: *mut c_void, dABdB: *mut c_void) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_calib3d_cv_projectPoints_InputArray_objectPoints_InputArray_rvec_InputArray_tvec_InputArray_cameraMatrix_InputArray_distCoeffs_OutputArray_imagePoints_OutputArray_jacobian_double_aspectRatio(objectPoints: *mut c_void, rvec: *mut c_void, tvec: *mut c_void, cameraMatrix: *mut c_void, distCoeffs: *mut c_void, imagePoints: *mut c_void, jacobian: *mut c_void, aspectRatio: f64) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_calib3d_cv_reprojectImageTo3D_InputArray_disparity_OutputArray__3dImage_InputArray_Q_bool_handleMissingValues_int_ddepth(disparity: *mut c_void, _3dImage: *mut c_void, Q: *mut c_void, handleMissingValues: bool, ddepth: i32) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_calib3d_cv_solvePnPRansac_InputArray_objectPoints_InputArray_imagePoints_InputArray_cameraMatrix_InputArray_distCoeffs_OutputArray_rvec_OutputArray_tvec_bool_useExtrinsicGuess_int_iterationsCount_float_reprojectionError_int_minInliersCount_OutputArray_inliers_int_flags(objectPoints: *mut c_void, imagePoints: *mut c_void, cameraMatrix: *mut c_void, distCoeffs: *mut c_void, rvec: *mut c_void, tvec: *mut c_void, useExtrinsicGuess: bool, iterationsCount: i32, reprojectionError: f32, minInliersCount: i32, inliers: *mut c_void, flags: i32) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_calib3d_cv_solvePnP_InputArray_objectPoints_InputArray_imagePoints_InputArray_cameraMatrix_InputArray_distCoeffs_OutputArray_rvec_OutputArray_tvec_bool_useExtrinsicGuess_int_flags(objectPoints: *mut c_void, imagePoints: *mut c_void, cameraMatrix: *mut c_void, distCoeffs: *mut c_void, rvec: *mut c_void, tvec: *mut c_void, useExtrinsicGuess: bool, flags: i32) -> cv_return_value_char;
#[doc(hidden)] pub fn cv_calib3d_cv_stereoRectifyUncalibrated_InputArray_points1_InputArray_points2_InputArray_F_Size_imgSize_OutputArray_H1_OutputArray_H2_double_threshold(points1: *mut c_void, points2: *mut c_void, F: *mut c_void, imgSize: ::core::Size, H1: *mut c_void, H2: *mut c_void, threshold: f64) -> cv_return_value_char;
#[doc(hidden)] pub fn cv_calib3d_cv_triangulatePoints_InputArray_projMatr1_InputArray_projMatr2_InputArray_projPoints1_InputArray_projPoints2_OutputArray_points4D(projMatr1: *mut c_void, projMatr2: *mut c_void, projPoints1: *mut c_void, projPoints2: *mut c_void, points4D: *mut c_void) -> cv_return_value_void;
pub fn cv_delete_StereoBM(ptr : *mut c_void);
#[doc(hidden)] pub fn cv_calib3d_cv_StereoBM_StereoBM() -> cv_return_value_void_X;
#[doc(hidden)] pub fn cv_calib3d_cv_StereoBM_StereoBM_int_preset_int_ndisparities_int_SADWindowSize(preset: i32, ndisparities: i32, SADWindowSize: i32) -> cv_return_value_void_X;
#[doc(hidden)] pub fn cv_calib3d_cv_StereoBM_init_int_preset_int_ndisparities_int_SADWindowSize(instance: *mut c_void, preset: i32, ndisparities: i32, SADWindowSize: i32) -> cv_return_value_void;
pub fn cv_delete_StereoSGBM(ptr : *mut c_void);
#[doc(hidden)] pub fn cv_calib3d_cv_StereoSGBM_StereoSGBM() -> cv_return_value_void_X;
#[doc(hidden)] pub fn cv_calib3d_cv_StereoSGBM_StereoSGBM_int_minDisparity_int_numDisparities_int_SADWindowSize_int_P1_int_P2_int_disp12MaxDiff_int_preFilterCap_int_uniquenessRatio_int_speckleWindowSize_int_speckleRange_bool_fullDP(minDisparity: i32, numDisparities: i32, SADWindowSize: i32, P1: i32, P2: i32, disp12MaxDiff: i32, preFilterCap: i32, uniquenessRatio: i32, speckleWindowSize: i32, speckleRange: i32, fullDP: bool) -> cv_return_value_void_X;
}
