#include <cstdio>
#include "opencv2/opencv_modules.hpp"
#include "opencv2/core/core.hpp"
using namespace cv;
int main(int argc, char**argv) {
    printf("pub const CV_16SC1:i32 = 0x%x;\n", CV_16SC1);
    printf("pub const CV_16SC2:i32 = 0x%x;\n", CV_16SC2);
    printf("pub const CV_16SC3:i32 = 0x%x;\n", CV_16SC3);
    printf("pub const CV_16SC4:i32 = 0x%x;\n", CV_16SC4);
    printf("pub const CV_16UC1:i32 = 0x%x;\n", CV_16UC1);
    printf("pub const CV_16UC2:i32 = 0x%x;\n", CV_16UC2);
    printf("pub const CV_16UC3:i32 = 0x%x;\n", CV_16UC3);
    printf("pub const CV_16UC4:i32 = 0x%x;\n", CV_16UC4);
    printf("pub const CV_32FC1:i32 = 0x%x;\n", CV_32FC1);
    printf("pub const CV_32FC2:i32 = 0x%x;\n", CV_32FC2);
    printf("pub const CV_32FC3:i32 = 0x%x;\n", CV_32FC3);
    printf("pub const CV_32FC4:i32 = 0x%x;\n", CV_32FC4);
    printf("pub const CV_32SC1:i32 = 0x%x;\n", CV_32SC1);
    printf("pub const CV_32SC2:i32 = 0x%x;\n", CV_32SC2);
    printf("pub const CV_32SC3:i32 = 0x%x;\n", CV_32SC3);
    printf("pub const CV_32SC4:i32 = 0x%x;\n", CV_32SC4);
    printf("pub const CV_64FC1:i32 = 0x%x;\n", CV_64FC1);
    printf("pub const CV_64FC2:i32 = 0x%x;\n", CV_64FC2);
    printf("pub const CV_64FC3:i32 = 0x%x;\n", CV_64FC3);
    printf("pub const CV_64FC4:i32 = 0x%x;\n", CV_64FC4);
    printf("pub const CV_8SC1:i32 = 0x%x;\n", CV_8SC1);
    printf("pub const CV_8SC2:i32 = 0x%x;\n", CV_8SC2);
    printf("pub const CV_8SC3:i32 = 0x%x;\n", CV_8SC3);
    printf("pub const CV_8SC4:i32 = 0x%x;\n", CV_8SC4);
    printf("pub const CV_8UC1:i32 = 0x%x;\n", CV_8UC1);
    printf("pub const CV_8UC2:i32 = 0x%x;\n", CV_8UC2);
    printf("pub const CV_8UC3:i32 = 0x%x;\n", CV_8UC3);
    printf("pub const CV_8UC4:i32 = 0x%x;\n", CV_8UC4);
    printf("pub const CV_AUTO_STEP:i32 = 0x%x;\n", CV_AUTO_STEP);
    printf("pub const CV_DEPTH_MAX:i32 = 0x%x;\n", CV_DEPTH_MAX);
    printf("pub const CV_GRAPH:i32 = 0x%x;\n", CV_GRAPH);
    printf("pub const CV_GRAPH_FLAG_ORIENTED:i32 = 0x%x;\n", CV_GRAPH_FLAG_ORIENTED);
    printf("pub const CV_HIST_RANGES_FLAG:i32 = 0x%x;\n", CV_HIST_RANGES_FLAG);
    printf("pub const CV_HIST_TREE:i32 = 0x%x;\n", CV_HIST_TREE);
    printf("pub const CV_HIST_UNIFORM_FLAG:i32 = 0x%x;\n", CV_HIST_UNIFORM_FLAG);
    printf("pub const CV_MAT_CN_MASK:i32 = 0x%x;\n", CV_MAT_CN_MASK);
    printf("pub const CV_MAT_CONT_FLAG:i32 = 0x%x;\n", CV_MAT_CONT_FLAG);
    printf("pub const CV_MAT_DEPTH_MASK:i32 = 0x%x;\n", CV_MAT_DEPTH_MASK);
    printf("pub const CV_MAT_TYPE_MASK:i32 = 0x%x;\n", CV_MAT_TYPE_MASK);
    printf("pub const CV_NODE_FLOAT:i32 = 0x%x;\n", CV_NODE_FLOAT);
    printf("pub const CV_NODE_FLOW:i32 = 0x%x;\n", CV_NODE_FLOW);
    printf("pub const CV_NODE_INTEGER:i32 = 0x%x;\n", CV_NODE_INTEGER);
    printf("pub const CV_NODE_REF:i32 = 0x%x;\n", CV_NODE_REF);
    printf("pub const CV_NODE_STRING:i32 = 0x%x;\n", CV_NODE_STRING);
    printf("pub const CV_ORIENTED_GRAPH:i32 = 0x%x;\n", CV_ORIENTED_GRAPH);
    printf("pub const CV_SEQ_CHAIN:i32 = 0x%x;\n", CV_SEQ_CHAIN);
    printf("pub const CV_SEQ_CHAIN_CONTOUR:i32 = 0x%x;\n", CV_SEQ_CHAIN_CONTOUR);
    printf("pub const CV_SEQ_CONNECTED_COMP:i32 = 0x%x;\n", CV_SEQ_CONNECTED_COMP);
    printf("pub const CV_SEQ_CONTOUR:i32 = 0x%x;\n", CV_SEQ_CONTOUR);
    printf("pub const CV_SEQ_ELTYPE_CODE:i32 = 0x%x;\n", CV_SEQ_ELTYPE_CODE);
    printf("pub const CV_SEQ_ELTYPE_CONNECTED_COMP:i32 = 0x%x;\n", CV_SEQ_ELTYPE_CONNECTED_COMP);
    printf("pub const CV_SEQ_ELTYPE_GRAPH_EDGE:i32 = 0x%x;\n", CV_SEQ_ELTYPE_GRAPH_EDGE);
    printf("pub const CV_SEQ_ELTYPE_GRAPH_VERTEX:i32 = 0x%x;\n", CV_SEQ_ELTYPE_GRAPH_VERTEX);
    printf("pub const CV_SEQ_ELTYPE_INDEX:i32 = 0x%x;\n", CV_SEQ_ELTYPE_INDEX);
    printf("pub const CV_SEQ_ELTYPE_MASK:i32 = 0x%x;\n", CV_SEQ_ELTYPE_MASK);
    printf("pub const CV_SEQ_ELTYPE_POINT:i32 = 0x%x;\n", CV_SEQ_ELTYPE_POINT);
    printf("pub const CV_SEQ_ELTYPE_POINT3D:i32 = 0x%x;\n", CV_SEQ_ELTYPE_POINT3D);
    printf("pub const CV_SEQ_ELTYPE_PPOINT:i32 = 0x%x;\n", CV_SEQ_ELTYPE_PPOINT);
    printf("pub const CV_SEQ_ELTYPE_PTR:i32 = 0x%x;\n", CV_SEQ_ELTYPE_PTR);
    printf("pub const CV_SEQ_ELTYPE_TRIAN_ATR:i32 = 0x%x;\n", CV_SEQ_ELTYPE_TRIAN_ATR);
    printf("pub const CV_SEQ_FLAG_CLOSED:i32 = 0x%x;\n", CV_SEQ_FLAG_CLOSED);
    printf("pub const CV_SEQ_FLAG_CONVEX:i32 = 0x%x;\n", CV_SEQ_FLAG_CONVEX);
    printf("pub const CV_SEQ_FLAG_HOLE:i32 = 0x%x;\n", CV_SEQ_FLAG_HOLE);
    printf("pub const CV_SEQ_FLAG_SHIFT:i32 = 0x%x;\n", CV_SEQ_FLAG_SHIFT);
    printf("pub const CV_SEQ_FLAG_SIMPLE:i32 = 0x%x;\n", CV_SEQ_FLAG_SIMPLE);
    printf("pub const CV_SEQ_INDEX:i32 = 0x%x;\n", CV_SEQ_INDEX);
    printf("pub const CV_SEQ_KIND_BIN_TREE:i32 = 0x%x;\n", CV_SEQ_KIND_BIN_TREE);
    printf("pub const CV_SEQ_KIND_CURVE:i32 = 0x%x;\n", CV_SEQ_KIND_CURVE);
    printf("pub const CV_SEQ_KIND_GENERIC:i32 = 0x%x;\n", CV_SEQ_KIND_GENERIC);
    printf("pub const CV_SEQ_KIND_GRAPH:i32 = 0x%x;\n", CV_SEQ_KIND_GRAPH);
    printf("pub const CV_SEQ_KIND_MASK:i32 = 0x%x;\n", CV_SEQ_KIND_MASK);
    printf("pub const CV_SEQ_KIND_SUBDIV2D:i32 = 0x%x;\n", CV_SEQ_KIND_SUBDIV2D);
    printf("pub const CV_SEQ_POINT3D_SET:i32 = 0x%x;\n", CV_SEQ_POINT3D_SET);
    printf("pub const CV_SEQ_POINT_SET:i32 = 0x%x;\n", CV_SEQ_POINT_SET);
    printf("pub const CV_SEQ_POLYGON:i32 = 0x%x;\n", CV_SEQ_POLYGON);
    printf("pub const CV_SEQ_POLYGON_TREE:i32 = 0x%x;\n", CV_SEQ_POLYGON_TREE);
    printf("pub const CV_SEQ_POLYLINE:i32 = 0x%x;\n", CV_SEQ_POLYLINE);
    printf("pub const CV_SEQ_SIMPLE_POLYGON:i32 = 0x%x;\n", CV_SEQ_SIMPLE_POLYGON);
    printf("pub const CV_SET_ELEM_IDX_MASK:i32 = 0x%x;\n", CV_SET_ELEM_IDX_MASK);
    printf("pub const CV_STORAGE_FORMAT_MASK:i32 = 0x%x;\n", CV_STORAGE_FORMAT_MASK);
    printf("pub const CV_STORAGE_WRITE_BINARY:i32 = 0x%x;\n", CV_STORAGE_WRITE_BINARY);
    printf("pub const CV_STORAGE_WRITE_TEXT:i32 = 0x%x;\n", CV_STORAGE_WRITE_TEXT);
    printf("pub const CV_SUBMAT_FLAG:i32 = 0x%x;\n", CV_SUBMAT_FLAG);
    printf("pub const CV_TERMCRIT_NUMBER:i32 = 0x%x;\n", CV_TERMCRIT_NUMBER);
    printf("pub const DCT_INVERSE:i32 = 0x%x;\n", cv::DCT_INVERSE);
    printf("pub const DCT_ROWS:i32 = 0x%x;\n", cv::DCT_ROWS);
    printf("pub const DEPTH_MASK_16S:i32 = 0x%x;\n", cv::DEPTH_MASK_16S);
    printf("pub const DEPTH_MASK_16U:i32 = 0x%x;\n", cv::DEPTH_MASK_16U);
    printf("pub const DEPTH_MASK_32F:i32 = 0x%x;\n", cv::DEPTH_MASK_32F);
    printf("pub const DEPTH_MASK_32S:i32 = 0x%x;\n", cv::DEPTH_MASK_32S);
    printf("pub const DEPTH_MASK_64F:i32 = 0x%x;\n", cv::DEPTH_MASK_64F);
    printf("pub const DEPTH_MASK_8S:i32 = 0x%x;\n", cv::DEPTH_MASK_8S);
    printf("pub const DEPTH_MASK_8U:i32 = 0x%x;\n", cv::DEPTH_MASK_8U);
    printf("pub const DEPTH_MASK_ALL:i32 = 0x%x;\n", cv::DEPTH_MASK_ALL);
    printf("pub const DEPTH_MASK_ALL_BUT_8S:i32 = 0x%x;\n", cv::DEPTH_MASK_ALL_BUT_8S);
    printf("pub const DEPTH_MASK_FLT:i32 = 0x%x;\n", cv::DEPTH_MASK_FLT);
    printf("pub const FileNode_FLOAT:i32 = 0x%x;\n", cv::FileNode::FLOAT);
    printf("pub const FileNode_STRING:i32 = 0x%x;\n", cv::FileNode::STRING);
    printf("pub const FileStorage_FORMAT_MASK:i32 = 0x%x;\n", cv::FileStorage::FORMAT_MASK);
    printf("pub const FileStorage_FORMAT_XML:i32 = 0x%x;\n", cv::FileStorage::FORMAT_XML);
    printf("pub const FileStorage_FORMAT_YAML:i32 = 0x%x;\n", cv::FileStorage::FORMAT_YAML);
    printf("pub const IPL_ALIGN_DWORD:i32 = 0x%x;\n", IPL_ALIGN_DWORD);
    printf("pub const IPL_ALIGN_QWORD:i32 = 0x%x;\n", IPL_ALIGN_QWORD);
    printf("pub const IPL_DEPTH_16S:i32 = 0x%x;\n", IPL_DEPTH_16S);
    printf("pub const IPL_DEPTH_32S:i32 = 0x%x;\n", IPL_DEPTH_32S);
    printf("pub const IPL_DEPTH_8S:i32 = 0x%x;\n", IPL_DEPTH_8S);
    printf("pub const Mat_CONTINUOUS_FLAG:i32 = 0x%x;\n", cv::Mat::CONTINUOUS_FLAG);
    printf("pub const Mat_SUBMATRIX_FLAG:i32 = 0x%x;\n", cv::Mat::SUBMATRIX_FLAG);
    printf("pub const SparseMat_HASH_SCALE:i32 = 0x%x;\n", cv::SparseMat::HASH_SCALE);
    printf("pub const SparseMat_MAX_DIM:i32 = 0x%x;\n", cv::SparseMat::MAX_DIM);
    printf("pub const TermCriteria_MAX_ITER:i32 = 0x%x;\n", cv::TermCriteria::MAX_ITER);
    printf("pub const _InputArray_EXPR:i32 = 0x%x;\n", cv::_InputArray::EXPR);
    printf("pub const _InputArray_FIXED_SIZE:i32 = 0x%x;\n", cv::_InputArray::FIXED_SIZE);
    printf("pub const _InputArray_FIXED_TYPE:i32 = 0x%x;\n", cv::_InputArray::FIXED_TYPE);
    printf("pub const _InputArray_GPU_MAT:i32 = 0x%x;\n", cv::_InputArray::GPU_MAT);
    printf("pub const _InputArray_KIND_MASK:i32 = 0x%x;\n", cv::_InputArray::KIND_MASK);
    printf("pub const _InputArray_MAT:i32 = 0x%x;\n", cv::_InputArray::MAT);
    printf("pub const _InputArray_MATX:i32 = 0x%x;\n", cv::_InputArray::MATX);
    printf("pub const _InputArray_NONE:i32 = 0x%x;\n", cv::_InputArray::NONE);
    printf("pub const _InputArray_OCL_MAT:i32 = 0x%x;\n", cv::_InputArray::OCL_MAT);
    printf("pub const _InputArray_OPENGL_BUFFER:i32 = 0x%x;\n", cv::_InputArray::OPENGL_BUFFER);
    printf("pub const _InputArray_OPENGL_TEXTURE:i32 = 0x%x;\n", cv::_InputArray::OPENGL_TEXTURE);
    printf("pub const _InputArray_STD_VECTOR:i32 = 0x%x;\n", cv::_InputArray::STD_VECTOR);
    printf("pub const _InputArray_STD_VECTOR_MAT:i32 = 0x%x;\n", cv::_InputArray::STD_VECTOR_MAT);
    printf("pub const _InputArray_STD_VECTOR_VECTOR:i32 = 0x%x;\n", cv::_InputArray::STD_VECTOR_VECTOR);
}
