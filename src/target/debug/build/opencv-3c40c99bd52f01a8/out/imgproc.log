parseName: class cv.Mat with set(['cv']) -> fullname:cv::Mat namespace:cv classpath: classname: name:Mat
register class cv::Mat (['class cv.Mat', '', ['/Ghost'], []])
parseName: class cv.Algorithm with set(['cv']) -> fullname:cv::Algorithm namespace:cv classpath: classname: name:Algorithm
register class cv::Algorithm (['class cv.Algorithm', '', ['/Ghost'], []])


===== Header: /usr/include/opencv2/imgproc/types_c.h =====
Namespaces: set(['', 'cv'])

--- Incoming ---
[u'struct CvConnectedComp', '', [], [], '']
parseName: struct CvConnectedComp with ['', 'cv'] -> fullname:CvConnectedComp namespace: classpath: classname: name:CvConnectedComp
register class CvConnectedComp ([u'struct CvConnectedComp', '', [], [], '']) [ignored]

--- Incoming ---
[u'const CV_BLUR_NO_SCALE', u'0', [], []]
parseName: const CV_BLUR_NO_SCALE with ['', 'cv'] -> fullname:CV_BLUR_NO_SCALE namespace: classpath: classname: name:CV_BLUR_NO_SCALE

--- Incoming ---
[u'const CV_BLUR', u'1', [], []]
parseName: const CV_BLUR with ['', 'cv'] -> fullname:CV_BLUR namespace: classpath: classname: name:CV_BLUR

--- Incoming ---
[u'const CV_GAUSSIAN', u'2', [], []]
parseName: const CV_GAUSSIAN with ['', 'cv'] -> fullname:CV_GAUSSIAN namespace: classpath: classname: name:CV_GAUSSIAN

--- Incoming ---
[u'const CV_MEDIAN', u'3', [], []]
parseName: const CV_MEDIAN with ['', 'cv'] -> fullname:CV_MEDIAN namespace: classpath: classname: name:CV_MEDIAN

--- Incoming ---
[u'const CV_BILATERAL', u'4', [], []]
parseName: const CV_BILATERAL with ['', 'cv'] -> fullname:CV_BILATERAL namespace: classpath: classname: name:CV_BILATERAL

--- Incoming ---
[u'const CV_GAUSSIAN_5x5', u'7', [], []]
parseName: const CV_GAUSSIAN_5x5 with ['', 'cv'] -> fullname:CV_GAUSSIAN_5x5 namespace: classpath: classname: name:CV_GAUSSIAN_5x5

--- Incoming ---
[u'const CV_SCHARR', u'-1', [], []]
parseName: const CV_SCHARR with ['', 'cv'] -> fullname:CV_SCHARR namespace: classpath: classname: name:CV_SCHARR

--- Incoming ---
[u'const CV_MAX_SOBEL_KSIZE', u'7', [], []]
parseName: const CV_MAX_SOBEL_KSIZE with ['', 'cv'] -> fullname:CV_MAX_SOBEL_KSIZE namespace: classpath: classname: name:CV_MAX_SOBEL_KSIZE

--- Incoming ---
[u'const CV_BGR2BGRA', u'0', [], []]
parseName: const CV_BGR2BGRA with ['', 'cv'] -> fullname:CV_BGR2BGRA namespace: classpath: classname: name:CV_BGR2BGRA

--- Incoming ---
[u'const CV_RGB2RGBA', u'CV_BGR2BGRA', [], []]
parseName: const CV_RGB2RGBA with ['', 'cv'] -> fullname:CV_RGB2RGBA namespace: classpath: classname: name:CV_RGB2RGBA

--- Incoming ---
[u'const CV_BGRA2BGR', u'1', [], []]
parseName: const CV_BGRA2BGR with ['', 'cv'] -> fullname:CV_BGRA2BGR namespace: classpath: classname: name:CV_BGRA2BGR

--- Incoming ---
[u'const CV_RGBA2RGB', u'CV_BGRA2BGR', [], []]
parseName: const CV_RGBA2RGB with ['', 'cv'] -> fullname:CV_RGBA2RGB namespace: classpath: classname: name:CV_RGBA2RGB

--- Incoming ---
[u'const CV_BGR2RGBA', u'2', [], []]
parseName: const CV_BGR2RGBA with ['', 'cv'] -> fullname:CV_BGR2RGBA namespace: classpath: classname: name:CV_BGR2RGBA

--- Incoming ---
[u'const CV_RGB2BGRA', u'CV_BGR2RGBA', [], []]
parseName: const CV_RGB2BGRA with ['', 'cv'] -> fullname:CV_RGB2BGRA namespace: classpath: classname: name:CV_RGB2BGRA

--- Incoming ---
[u'const CV_RGBA2BGR', u'3', [], []]
parseName: const CV_RGBA2BGR with ['', 'cv'] -> fullname:CV_RGBA2BGR namespace: classpath: classname: name:CV_RGBA2BGR

--- Incoming ---
[u'const CV_BGRA2RGB', u'CV_RGBA2BGR', [], []]
parseName: const CV_BGRA2RGB with ['', 'cv'] -> fullname:CV_BGRA2RGB namespace: classpath: classname: name:CV_BGRA2RGB

--- Incoming ---
[u'const CV_BGR2RGB', u'4', [], []]
parseName: const CV_BGR2RGB with ['', 'cv'] -> fullname:CV_BGR2RGB namespace: classpath: classname: name:CV_BGR2RGB

--- Incoming ---
[u'const CV_RGB2BGR', u'CV_BGR2RGB', [], []]
parseName: const CV_RGB2BGR with ['', 'cv'] -> fullname:CV_RGB2BGR namespace: classpath: classname: name:CV_RGB2BGR

--- Incoming ---
[u'const CV_BGRA2RGBA', u'5', [], []]
parseName: const CV_BGRA2RGBA with ['', 'cv'] -> fullname:CV_BGRA2RGBA namespace: classpath: classname: name:CV_BGRA2RGBA

--- Incoming ---
[u'const CV_RGBA2BGRA', u'CV_BGRA2RGBA', [], []]
parseName: const CV_RGBA2BGRA with ['', 'cv'] -> fullname:CV_RGBA2BGRA namespace: classpath: classname: name:CV_RGBA2BGRA

--- Incoming ---
[u'const CV_BGR2GRAY', u'6', [], []]
parseName: const CV_BGR2GRAY with ['', 'cv'] -> fullname:CV_BGR2GRAY namespace: classpath: classname: name:CV_BGR2GRAY

--- Incoming ---
[u'const CV_RGB2GRAY', u'7', [], []]
parseName: const CV_RGB2GRAY with ['', 'cv'] -> fullname:CV_RGB2GRAY namespace: classpath: classname: name:CV_RGB2GRAY

--- Incoming ---
[u'const CV_GRAY2BGR', u'8', [], []]
parseName: const CV_GRAY2BGR with ['', 'cv'] -> fullname:CV_GRAY2BGR namespace: classpath: classname: name:CV_GRAY2BGR

--- Incoming ---
[u'const CV_GRAY2RGB', u'CV_GRAY2BGR', [], []]
parseName: const CV_GRAY2RGB with ['', 'cv'] -> fullname:CV_GRAY2RGB namespace: classpath: classname: name:CV_GRAY2RGB

--- Incoming ---
[u'const CV_GRAY2BGRA', u'9', [], []]
parseName: const CV_GRAY2BGRA with ['', 'cv'] -> fullname:CV_GRAY2BGRA namespace: classpath: classname: name:CV_GRAY2BGRA

--- Incoming ---
[u'const CV_GRAY2RGBA', u'CV_GRAY2BGRA', [], []]
parseName: const CV_GRAY2RGBA with ['', 'cv'] -> fullname:CV_GRAY2RGBA namespace: classpath: classname: name:CV_GRAY2RGBA

--- Incoming ---
[u'const CV_BGRA2GRAY', u'10', [], []]
parseName: const CV_BGRA2GRAY with ['', 'cv'] -> fullname:CV_BGRA2GRAY namespace: classpath: classname: name:CV_BGRA2GRAY

--- Incoming ---
[u'const CV_RGBA2GRAY', u'11', [], []]
parseName: const CV_RGBA2GRAY with ['', 'cv'] -> fullname:CV_RGBA2GRAY namespace: classpath: classname: name:CV_RGBA2GRAY

--- Incoming ---
[u'const CV_BGR2BGR565', u'12', [], []]
parseName: const CV_BGR2BGR565 with ['', 'cv'] -> fullname:CV_BGR2BGR565 namespace: classpath: classname: name:CV_BGR2BGR565

--- Incoming ---
[u'const CV_RGB2BGR565', u'13', [], []]
parseName: const CV_RGB2BGR565 with ['', 'cv'] -> fullname:CV_RGB2BGR565 namespace: classpath: classname: name:CV_RGB2BGR565

--- Incoming ---
[u'const CV_BGR5652BGR', u'14', [], []]
parseName: const CV_BGR5652BGR with ['', 'cv'] -> fullname:CV_BGR5652BGR namespace: classpath: classname: name:CV_BGR5652BGR

--- Incoming ---
[u'const CV_BGR5652RGB', u'15', [], []]
parseName: const CV_BGR5652RGB with ['', 'cv'] -> fullname:CV_BGR5652RGB namespace: classpath: classname: name:CV_BGR5652RGB

--- Incoming ---
[u'const CV_BGRA2BGR565', u'16', [], []]
parseName: const CV_BGRA2BGR565 with ['', 'cv'] -> fullname:CV_BGRA2BGR565 namespace: classpath: classname: name:CV_BGRA2BGR565

--- Incoming ---
[u'const CV_RGBA2BGR565', u'17', [], []]
parseName: const CV_RGBA2BGR565 with ['', 'cv'] -> fullname:CV_RGBA2BGR565 namespace: classpath: classname: name:CV_RGBA2BGR565

--- Incoming ---
[u'const CV_BGR5652BGRA', u'18', [], []]
parseName: const CV_BGR5652BGRA with ['', 'cv'] -> fullname:CV_BGR5652BGRA namespace: classpath: classname: name:CV_BGR5652BGRA

--- Incoming ---
[u'const CV_BGR5652RGBA', u'19', [], []]
parseName: const CV_BGR5652RGBA with ['', 'cv'] -> fullname:CV_BGR5652RGBA namespace: classpath: classname: name:CV_BGR5652RGBA

--- Incoming ---
[u'const CV_GRAY2BGR565', u'20', [], []]
parseName: const CV_GRAY2BGR565 with ['', 'cv'] -> fullname:CV_GRAY2BGR565 namespace: classpath: classname: name:CV_GRAY2BGR565

--- Incoming ---
[u'const CV_BGR5652GRAY', u'21', [], []]
parseName: const CV_BGR5652GRAY with ['', 'cv'] -> fullname:CV_BGR5652GRAY namespace: classpath: classname: name:CV_BGR5652GRAY

--- Incoming ---
[u'const CV_BGR2BGR555', u'22', [], []]
parseName: const CV_BGR2BGR555 with ['', 'cv'] -> fullname:CV_BGR2BGR555 namespace: classpath: classname: name:CV_BGR2BGR555

--- Incoming ---
[u'const CV_RGB2BGR555', u'23', [], []]
parseName: const CV_RGB2BGR555 with ['', 'cv'] -> fullname:CV_RGB2BGR555 namespace: classpath: classname: name:CV_RGB2BGR555

--- Incoming ---
[u'const CV_BGR5552BGR', u'24', [], []]
parseName: const CV_BGR5552BGR with ['', 'cv'] -> fullname:CV_BGR5552BGR namespace: classpath: classname: name:CV_BGR5552BGR

--- Incoming ---
[u'const CV_BGR5552RGB', u'25', [], []]
parseName: const CV_BGR5552RGB with ['', 'cv'] -> fullname:CV_BGR5552RGB namespace: classpath: classname: name:CV_BGR5552RGB

--- Incoming ---
[u'const CV_BGRA2BGR555', u'26', [], []]
parseName: const CV_BGRA2BGR555 with ['', 'cv'] -> fullname:CV_BGRA2BGR555 namespace: classpath: classname: name:CV_BGRA2BGR555

--- Incoming ---
[u'const CV_RGBA2BGR555', u'27', [], []]
parseName: const CV_RGBA2BGR555 with ['', 'cv'] -> fullname:CV_RGBA2BGR555 namespace: classpath: classname: name:CV_RGBA2BGR555

--- Incoming ---
[u'const CV_BGR5552BGRA', u'28', [], []]
parseName: const CV_BGR5552BGRA with ['', 'cv'] -> fullname:CV_BGR5552BGRA namespace: classpath: classname: name:CV_BGR5552BGRA

--- Incoming ---
[u'const CV_BGR5552RGBA', u'29', [], []]
parseName: const CV_BGR5552RGBA with ['', 'cv'] -> fullname:CV_BGR5552RGBA namespace: classpath: classname: name:CV_BGR5552RGBA

--- Incoming ---
[u'const CV_GRAY2BGR555', u'30', [], []]
parseName: const CV_GRAY2BGR555 with ['', 'cv'] -> fullname:CV_GRAY2BGR555 namespace: classpath: classname: name:CV_GRAY2BGR555

--- Incoming ---
[u'const CV_BGR5552GRAY', u'31', [], []]
parseName: const CV_BGR5552GRAY with ['', 'cv'] -> fullname:CV_BGR5552GRAY namespace: classpath: classname: name:CV_BGR5552GRAY

--- Incoming ---
[u'const CV_BGR2XYZ', u'32', [], []]
parseName: const CV_BGR2XYZ with ['', 'cv'] -> fullname:CV_BGR2XYZ namespace: classpath: classname: name:CV_BGR2XYZ

--- Incoming ---
[u'const CV_RGB2XYZ', u'33', [], []]
parseName: const CV_RGB2XYZ with ['', 'cv'] -> fullname:CV_RGB2XYZ namespace: classpath: classname: name:CV_RGB2XYZ

--- Incoming ---
[u'const CV_XYZ2BGR', u'34', [], []]
parseName: const CV_XYZ2BGR with ['', 'cv'] -> fullname:CV_XYZ2BGR namespace: classpath: classname: name:CV_XYZ2BGR

--- Incoming ---
[u'const CV_XYZ2RGB', u'35', [], []]
parseName: const CV_XYZ2RGB with ['', 'cv'] -> fullname:CV_XYZ2RGB namespace: classpath: classname: name:CV_XYZ2RGB

--- Incoming ---
[u'const CV_BGR2YCrCb', u'36', [], []]
parseName: const CV_BGR2YCrCb with ['', 'cv'] -> fullname:CV_BGR2YCrCb namespace: classpath: classname: name:CV_BGR2YCrCb

--- Incoming ---
[u'const CV_RGB2YCrCb', u'37', [], []]
parseName: const CV_RGB2YCrCb with ['', 'cv'] -> fullname:CV_RGB2YCrCb namespace: classpath: classname: name:CV_RGB2YCrCb

--- Incoming ---
[u'const CV_YCrCb2BGR', u'38', [], []]
parseName: const CV_YCrCb2BGR with ['', 'cv'] -> fullname:CV_YCrCb2BGR namespace: classpath: classname: name:CV_YCrCb2BGR

--- Incoming ---
[u'const CV_YCrCb2RGB', u'39', [], []]
parseName: const CV_YCrCb2RGB with ['', 'cv'] -> fullname:CV_YCrCb2RGB namespace: classpath: classname: name:CV_YCrCb2RGB

--- Incoming ---
[u'const CV_BGR2HSV', u'40', [], []]
parseName: const CV_BGR2HSV with ['', 'cv'] -> fullname:CV_BGR2HSV namespace: classpath: classname: name:CV_BGR2HSV

--- Incoming ---
[u'const CV_RGB2HSV', u'41', [], []]
parseName: const CV_RGB2HSV with ['', 'cv'] -> fullname:CV_RGB2HSV namespace: classpath: classname: name:CV_RGB2HSV

--- Incoming ---
[u'const CV_BGR2Lab', u'44', [], []]
parseName: const CV_BGR2Lab with ['', 'cv'] -> fullname:CV_BGR2Lab namespace: classpath: classname: name:CV_BGR2Lab

--- Incoming ---
[u'const CV_RGB2Lab', u'45', [], []]
parseName: const CV_RGB2Lab with ['', 'cv'] -> fullname:CV_RGB2Lab namespace: classpath: classname: name:CV_RGB2Lab

--- Incoming ---
[u'const CV_BayerBG2BGR', u'46', [], []]
parseName: const CV_BayerBG2BGR with ['', 'cv'] -> fullname:CV_BayerBG2BGR namespace: classpath: classname: name:CV_BayerBG2BGR

--- Incoming ---
[u'const CV_BayerGB2BGR', u'47', [], []]
parseName: const CV_BayerGB2BGR with ['', 'cv'] -> fullname:CV_BayerGB2BGR namespace: classpath: classname: name:CV_BayerGB2BGR

--- Incoming ---
[u'const CV_BayerRG2BGR', u'48', [], []]
parseName: const CV_BayerRG2BGR with ['', 'cv'] -> fullname:CV_BayerRG2BGR namespace: classpath: classname: name:CV_BayerRG2BGR

--- Incoming ---
[u'const CV_BayerGR2BGR', u'49', [], []]
parseName: const CV_BayerGR2BGR with ['', 'cv'] -> fullname:CV_BayerGR2BGR namespace: classpath: classname: name:CV_BayerGR2BGR

--- Incoming ---
[u'const CV_BayerBG2RGB', u'CV_BayerRG2BGR', [], []]
parseName: const CV_BayerBG2RGB with ['', 'cv'] -> fullname:CV_BayerBG2RGB namespace: classpath: classname: name:CV_BayerBG2RGB

--- Incoming ---
[u'const CV_BayerGB2RGB', u'CV_BayerGR2BGR', [], []]
parseName: const CV_BayerGB2RGB with ['', 'cv'] -> fullname:CV_BayerGB2RGB namespace: classpath: classname: name:CV_BayerGB2RGB

--- Incoming ---
[u'const CV_BayerRG2RGB', u'CV_BayerBG2BGR', [], []]
parseName: const CV_BayerRG2RGB with ['', 'cv'] -> fullname:CV_BayerRG2RGB namespace: classpath: classname: name:CV_BayerRG2RGB

--- Incoming ---
[u'const CV_BayerGR2RGB', u'CV_BayerGB2BGR', [], []]
parseName: const CV_BayerGR2RGB with ['', 'cv'] -> fullname:CV_BayerGR2RGB namespace: classpath: classname: name:CV_BayerGR2RGB

--- Incoming ---
[u'const CV_BGR2Luv', u'50', [], []]
parseName: const CV_BGR2Luv with ['', 'cv'] -> fullname:CV_BGR2Luv namespace: classpath: classname: name:CV_BGR2Luv

--- Incoming ---
[u'const CV_RGB2Luv', u'51', [], []]
parseName: const CV_RGB2Luv with ['', 'cv'] -> fullname:CV_RGB2Luv namespace: classpath: classname: name:CV_RGB2Luv

--- Incoming ---
[u'const CV_BGR2HLS', u'52', [], []]
parseName: const CV_BGR2HLS with ['', 'cv'] -> fullname:CV_BGR2HLS namespace: classpath: classname: name:CV_BGR2HLS

--- Incoming ---
[u'const CV_RGB2HLS', u'53', [], []]
parseName: const CV_RGB2HLS with ['', 'cv'] -> fullname:CV_RGB2HLS namespace: classpath: classname: name:CV_RGB2HLS

--- Incoming ---
[u'const CV_HSV2BGR', u'54', [], []]
parseName: const CV_HSV2BGR with ['', 'cv'] -> fullname:CV_HSV2BGR namespace: classpath: classname: name:CV_HSV2BGR

--- Incoming ---
[u'const CV_HSV2RGB', u'55', [], []]
parseName: const CV_HSV2RGB with ['', 'cv'] -> fullname:CV_HSV2RGB namespace: classpath: classname: name:CV_HSV2RGB

--- Incoming ---
[u'const CV_Lab2BGR', u'56', [], []]
parseName: const CV_Lab2BGR with ['', 'cv'] -> fullname:CV_Lab2BGR namespace: classpath: classname: name:CV_Lab2BGR

--- Incoming ---
[u'const CV_Lab2RGB', u'57', [], []]
parseName: const CV_Lab2RGB with ['', 'cv'] -> fullname:CV_Lab2RGB namespace: classpath: classname: name:CV_Lab2RGB

--- Incoming ---
[u'const CV_Luv2BGR', u'58', [], []]
parseName: const CV_Luv2BGR with ['', 'cv'] -> fullname:CV_Luv2BGR namespace: classpath: classname: name:CV_Luv2BGR

--- Incoming ---
[u'const CV_Luv2RGB', u'59', [], []]
parseName: const CV_Luv2RGB with ['', 'cv'] -> fullname:CV_Luv2RGB namespace: classpath: classname: name:CV_Luv2RGB

--- Incoming ---
[u'const CV_HLS2BGR', u'60', [], []]
parseName: const CV_HLS2BGR with ['', 'cv'] -> fullname:CV_HLS2BGR namespace: classpath: classname: name:CV_HLS2BGR

--- Incoming ---
[u'const CV_HLS2RGB', u'61', [], []]
parseName: const CV_HLS2RGB with ['', 'cv'] -> fullname:CV_HLS2RGB namespace: classpath: classname: name:CV_HLS2RGB

--- Incoming ---
[u'const CV_BayerBG2BGR_VNG', u'62', [], []]
parseName: const CV_BayerBG2BGR_VNG with ['', 'cv'] -> fullname:CV_BayerBG2BGR_VNG namespace: classpath: classname: name:CV_BayerBG2BGR_VNG

--- Incoming ---
[u'const CV_BayerGB2BGR_VNG', u'63', [], []]
parseName: const CV_BayerGB2BGR_VNG with ['', 'cv'] -> fullname:CV_BayerGB2BGR_VNG namespace: classpath: classname: name:CV_BayerGB2BGR_VNG

--- Incoming ---
[u'const CV_BayerRG2BGR_VNG', u'64', [], []]
parseName: const CV_BayerRG2BGR_VNG with ['', 'cv'] -> fullname:CV_BayerRG2BGR_VNG namespace: classpath: classname: name:CV_BayerRG2BGR_VNG

--- Incoming ---
[u'const CV_BayerGR2BGR_VNG', u'65', [], []]
parseName: const CV_BayerGR2BGR_VNG with ['', 'cv'] -> fullname:CV_BayerGR2BGR_VNG namespace: classpath: classname: name:CV_BayerGR2BGR_VNG

--- Incoming ---
[u'const CV_BayerBG2RGB_VNG', u'CV_BayerRG2BGR_VNG', [], []]
parseName: const CV_BayerBG2RGB_VNG with ['', 'cv'] -> fullname:CV_BayerBG2RGB_VNG namespace: classpath: classname: name:CV_BayerBG2RGB_VNG

--- Incoming ---
[u'const CV_BayerGB2RGB_VNG', u'CV_BayerGR2BGR_VNG', [], []]
parseName: const CV_BayerGB2RGB_VNG with ['', 'cv'] -> fullname:CV_BayerGB2RGB_VNG namespace: classpath: classname: name:CV_BayerGB2RGB_VNG

--- Incoming ---
[u'const CV_BayerRG2RGB_VNG', u'CV_BayerBG2BGR_VNG', [], []]
parseName: const CV_BayerRG2RGB_VNG with ['', 'cv'] -> fullname:CV_BayerRG2RGB_VNG namespace: classpath: classname: name:CV_BayerRG2RGB_VNG

--- Incoming ---
[u'const CV_BayerGR2RGB_VNG', u'CV_BayerGB2BGR_VNG', [], []]
parseName: const CV_BayerGR2RGB_VNG with ['', 'cv'] -> fullname:CV_BayerGR2RGB_VNG namespace: classpath: classname: name:CV_BayerGR2RGB_VNG

--- Incoming ---
[u'const CV_BGR2HSV_FULL', u'66', [], []]
parseName: const CV_BGR2HSV_FULL with ['', 'cv'] -> fullname:CV_BGR2HSV_FULL namespace: classpath: classname: name:CV_BGR2HSV_FULL

--- Incoming ---
[u'const CV_RGB2HSV_FULL', u'67', [], []]
parseName: const CV_RGB2HSV_FULL with ['', 'cv'] -> fullname:CV_RGB2HSV_FULL namespace: classpath: classname: name:CV_RGB2HSV_FULL

--- Incoming ---
[u'const CV_BGR2HLS_FULL', u'68', [], []]
parseName: const CV_BGR2HLS_FULL with ['', 'cv'] -> fullname:CV_BGR2HLS_FULL namespace: classpath: classname: name:CV_BGR2HLS_FULL

--- Incoming ---
[u'const CV_RGB2HLS_FULL', u'69', [], []]
parseName: const CV_RGB2HLS_FULL with ['', 'cv'] -> fullname:CV_RGB2HLS_FULL namespace: classpath: classname: name:CV_RGB2HLS_FULL

--- Incoming ---
[u'const CV_HSV2BGR_FULL', u'70', [], []]
parseName: const CV_HSV2BGR_FULL with ['', 'cv'] -> fullname:CV_HSV2BGR_FULL namespace: classpath: classname: name:CV_HSV2BGR_FULL

--- Incoming ---
[u'const CV_HSV2RGB_FULL', u'71', [], []]
parseName: const CV_HSV2RGB_FULL with ['', 'cv'] -> fullname:CV_HSV2RGB_FULL namespace: classpath: classname: name:CV_HSV2RGB_FULL

--- Incoming ---
[u'const CV_HLS2BGR_FULL', u'72', [], []]
parseName: const CV_HLS2BGR_FULL with ['', 'cv'] -> fullname:CV_HLS2BGR_FULL namespace: classpath: classname: name:CV_HLS2BGR_FULL

--- Incoming ---
[u'const CV_HLS2RGB_FULL', u'73', [], []]
parseName: const CV_HLS2RGB_FULL with ['', 'cv'] -> fullname:CV_HLS2RGB_FULL namespace: classpath: classname: name:CV_HLS2RGB_FULL

--- Incoming ---
[u'const CV_LBGR2Lab', u'74', [], []]
parseName: const CV_LBGR2Lab with ['', 'cv'] -> fullname:CV_LBGR2Lab namespace: classpath: classname: name:CV_LBGR2Lab

--- Incoming ---
[u'const CV_LRGB2Lab', u'75', [], []]
parseName: const CV_LRGB2Lab with ['', 'cv'] -> fullname:CV_LRGB2Lab namespace: classpath: classname: name:CV_LRGB2Lab

--- Incoming ---
[u'const CV_LBGR2Luv', u'76', [], []]
parseName: const CV_LBGR2Luv with ['', 'cv'] -> fullname:CV_LBGR2Luv namespace: classpath: classname: name:CV_LBGR2Luv

--- Incoming ---
[u'const CV_LRGB2Luv', u'77', [], []]
parseName: const CV_LRGB2Luv with ['', 'cv'] -> fullname:CV_LRGB2Luv namespace: classpath: classname: name:CV_LRGB2Luv

--- Incoming ---
[u'const CV_Lab2LBGR', u'78', [], []]
parseName: const CV_Lab2LBGR with ['', 'cv'] -> fullname:CV_Lab2LBGR namespace: classpath: classname: name:CV_Lab2LBGR

--- Incoming ---
[u'const CV_Lab2LRGB', u'79', [], []]
parseName: const CV_Lab2LRGB with ['', 'cv'] -> fullname:CV_Lab2LRGB namespace: classpath: classname: name:CV_Lab2LRGB

--- Incoming ---
[u'const CV_Luv2LBGR', u'80', [], []]
parseName: const CV_Luv2LBGR with ['', 'cv'] -> fullname:CV_Luv2LBGR namespace: classpath: classname: name:CV_Luv2LBGR

--- Incoming ---
[u'const CV_Luv2LRGB', u'81', [], []]
parseName: const CV_Luv2LRGB with ['', 'cv'] -> fullname:CV_Luv2LRGB namespace: classpath: classname: name:CV_Luv2LRGB

--- Incoming ---
[u'const CV_BGR2YUV', u'82', [], []]
parseName: const CV_BGR2YUV with ['', 'cv'] -> fullname:CV_BGR2YUV namespace: classpath: classname: name:CV_BGR2YUV

--- Incoming ---
[u'const CV_RGB2YUV', u'83', [], []]
parseName: const CV_RGB2YUV with ['', 'cv'] -> fullname:CV_RGB2YUV namespace: classpath: classname: name:CV_RGB2YUV

--- Incoming ---
[u'const CV_YUV2BGR', u'84', [], []]
parseName: const CV_YUV2BGR with ['', 'cv'] -> fullname:CV_YUV2BGR namespace: classpath: classname: name:CV_YUV2BGR

--- Incoming ---
[u'const CV_YUV2RGB', u'85', [], []]
parseName: const CV_YUV2RGB with ['', 'cv'] -> fullname:CV_YUV2RGB namespace: classpath: classname: name:CV_YUV2RGB

--- Incoming ---
[u'const CV_BayerBG2GRAY', u'86', [], []]
parseName: const CV_BayerBG2GRAY with ['', 'cv'] -> fullname:CV_BayerBG2GRAY namespace: classpath: classname: name:CV_BayerBG2GRAY

--- Incoming ---
[u'const CV_BayerGB2GRAY', u'87', [], []]
parseName: const CV_BayerGB2GRAY with ['', 'cv'] -> fullname:CV_BayerGB2GRAY namespace: classpath: classname: name:CV_BayerGB2GRAY

--- Incoming ---
[u'const CV_BayerRG2GRAY', u'88', [], []]
parseName: const CV_BayerRG2GRAY with ['', 'cv'] -> fullname:CV_BayerRG2GRAY namespace: classpath: classname: name:CV_BayerRG2GRAY

--- Incoming ---
[u'const CV_BayerGR2GRAY', u'89', [], []]
parseName: const CV_BayerGR2GRAY with ['', 'cv'] -> fullname:CV_BayerGR2GRAY namespace: classpath: classname: name:CV_BayerGR2GRAY

--- Incoming ---
[u'const CV_YUV2RGB_NV12', u'90', [], []]
parseName: const CV_YUV2RGB_NV12 with ['', 'cv'] -> fullname:CV_YUV2RGB_NV12 namespace: classpath: classname: name:CV_YUV2RGB_NV12

--- Incoming ---
[u'const CV_YUV2BGR_NV12', u'91', [], []]
parseName: const CV_YUV2BGR_NV12 with ['', 'cv'] -> fullname:CV_YUV2BGR_NV12 namespace: classpath: classname: name:CV_YUV2BGR_NV12

--- Incoming ---
[u'const CV_YUV2RGB_NV21', u'92', [], []]
parseName: const CV_YUV2RGB_NV21 with ['', 'cv'] -> fullname:CV_YUV2RGB_NV21 namespace: classpath: classname: name:CV_YUV2RGB_NV21

--- Incoming ---
[u'const CV_YUV2BGR_NV21', u'93', [], []]
parseName: const CV_YUV2BGR_NV21 with ['', 'cv'] -> fullname:CV_YUV2BGR_NV21 namespace: classpath: classname: name:CV_YUV2BGR_NV21

--- Incoming ---
[u'const CV_YUV420sp2RGB', u'CV_YUV2RGB_NV21', [], []]
parseName: const CV_YUV420sp2RGB with ['', 'cv'] -> fullname:CV_YUV420sp2RGB namespace: classpath: classname: name:CV_YUV420sp2RGB

--- Incoming ---
[u'const CV_YUV420sp2BGR', u'CV_YUV2BGR_NV21', [], []]
parseName: const CV_YUV420sp2BGR with ['', 'cv'] -> fullname:CV_YUV420sp2BGR namespace: classpath: classname: name:CV_YUV420sp2BGR

--- Incoming ---
[u'const CV_YUV2RGBA_NV12', u'94', [], []]
parseName: const CV_YUV2RGBA_NV12 with ['', 'cv'] -> fullname:CV_YUV2RGBA_NV12 namespace: classpath: classname: name:CV_YUV2RGBA_NV12

--- Incoming ---
[u'const CV_YUV2BGRA_NV12', u'95', [], []]
parseName: const CV_YUV2BGRA_NV12 with ['', 'cv'] -> fullname:CV_YUV2BGRA_NV12 namespace: classpath: classname: name:CV_YUV2BGRA_NV12

--- Incoming ---
[u'const CV_YUV2RGBA_NV21', u'96', [], []]
parseName: const CV_YUV2RGBA_NV21 with ['', 'cv'] -> fullname:CV_YUV2RGBA_NV21 namespace: classpath: classname: name:CV_YUV2RGBA_NV21

--- Incoming ---
[u'const CV_YUV2BGRA_NV21', u'97', [], []]
parseName: const CV_YUV2BGRA_NV21 with ['', 'cv'] -> fullname:CV_YUV2BGRA_NV21 namespace: classpath: classname: name:CV_YUV2BGRA_NV21

--- Incoming ---
[u'const CV_YUV420sp2RGBA', u'CV_YUV2RGBA_NV21', [], []]
parseName: const CV_YUV420sp2RGBA with ['', 'cv'] -> fullname:CV_YUV420sp2RGBA namespace: classpath: classname: name:CV_YUV420sp2RGBA

--- Incoming ---
[u'const CV_YUV420sp2BGRA', u'CV_YUV2BGRA_NV21', [], []]
parseName: const CV_YUV420sp2BGRA with ['', 'cv'] -> fullname:CV_YUV420sp2BGRA namespace: classpath: classname: name:CV_YUV420sp2BGRA

--- Incoming ---
[u'const CV_YUV2RGB_YV12', u'98', [], []]
parseName: const CV_YUV2RGB_YV12 with ['', 'cv'] -> fullname:CV_YUV2RGB_YV12 namespace: classpath: classname: name:CV_YUV2RGB_YV12

--- Incoming ---
[u'const CV_YUV2BGR_YV12', u'99', [], []]
parseName: const CV_YUV2BGR_YV12 with ['', 'cv'] -> fullname:CV_YUV2BGR_YV12 namespace: classpath: classname: name:CV_YUV2BGR_YV12

--- Incoming ---
[u'const CV_YUV2RGB_IYUV', u'100', [], []]
parseName: const CV_YUV2RGB_IYUV with ['', 'cv'] -> fullname:CV_YUV2RGB_IYUV namespace: classpath: classname: name:CV_YUV2RGB_IYUV

--- Incoming ---
[u'const CV_YUV2BGR_IYUV', u'101', [], []]
parseName: const CV_YUV2BGR_IYUV with ['', 'cv'] -> fullname:CV_YUV2BGR_IYUV namespace: classpath: classname: name:CV_YUV2BGR_IYUV

--- Incoming ---
[u'const CV_YUV2RGB_I420', u'CV_YUV2RGB_IYUV', [], []]
parseName: const CV_YUV2RGB_I420 with ['', 'cv'] -> fullname:CV_YUV2RGB_I420 namespace: classpath: classname: name:CV_YUV2RGB_I420

--- Incoming ---
[u'const CV_YUV2BGR_I420', u'CV_YUV2BGR_IYUV', [], []]
parseName: const CV_YUV2BGR_I420 with ['', 'cv'] -> fullname:CV_YUV2BGR_I420 namespace: classpath: classname: name:CV_YUV2BGR_I420

--- Incoming ---
[u'const CV_YUV420p2RGB', u'CV_YUV2RGB_YV12', [], []]
parseName: const CV_YUV420p2RGB with ['', 'cv'] -> fullname:CV_YUV420p2RGB namespace: classpath: classname: name:CV_YUV420p2RGB

--- Incoming ---
[u'const CV_YUV420p2BGR', u'CV_YUV2BGR_YV12', [], []]
parseName: const CV_YUV420p2BGR with ['', 'cv'] -> fullname:CV_YUV420p2BGR namespace: classpath: classname: name:CV_YUV420p2BGR

--- Incoming ---
[u'const CV_YUV2RGBA_YV12', u'102', [], []]
parseName: const CV_YUV2RGBA_YV12 with ['', 'cv'] -> fullname:CV_YUV2RGBA_YV12 namespace: classpath: classname: name:CV_YUV2RGBA_YV12

--- Incoming ---
[u'const CV_YUV2BGRA_YV12', u'103', [], []]
parseName: const CV_YUV2BGRA_YV12 with ['', 'cv'] -> fullname:CV_YUV2BGRA_YV12 namespace: classpath: classname: name:CV_YUV2BGRA_YV12

--- Incoming ---
[u'const CV_YUV2RGBA_IYUV', u'104', [], []]
parseName: const CV_YUV2RGBA_IYUV with ['', 'cv'] -> fullname:CV_YUV2RGBA_IYUV namespace: classpath: classname: name:CV_YUV2RGBA_IYUV

--- Incoming ---
[u'const CV_YUV2BGRA_IYUV', u'105', [], []]
parseName: const CV_YUV2BGRA_IYUV with ['', 'cv'] -> fullname:CV_YUV2BGRA_IYUV namespace: classpath: classname: name:CV_YUV2BGRA_IYUV

--- Incoming ---
[u'const CV_YUV2RGBA_I420', u'CV_YUV2RGBA_IYUV', [], []]
parseName: const CV_YUV2RGBA_I420 with ['', 'cv'] -> fullname:CV_YUV2RGBA_I420 namespace: classpath: classname: name:CV_YUV2RGBA_I420

--- Incoming ---
[u'const CV_YUV2BGRA_I420', u'CV_YUV2BGRA_IYUV', [], []]
parseName: const CV_YUV2BGRA_I420 with ['', 'cv'] -> fullname:CV_YUV2BGRA_I420 namespace: classpath: classname: name:CV_YUV2BGRA_I420

--- Incoming ---
[u'const CV_YUV420p2RGBA', u'CV_YUV2RGBA_YV12', [], []]
parseName: const CV_YUV420p2RGBA with ['', 'cv'] -> fullname:CV_YUV420p2RGBA namespace: classpath: classname: name:CV_YUV420p2RGBA

--- Incoming ---
[u'const CV_YUV420p2BGRA', u'CV_YUV2BGRA_YV12', [], []]
parseName: const CV_YUV420p2BGRA with ['', 'cv'] -> fullname:CV_YUV420p2BGRA namespace: classpath: classname: name:CV_YUV420p2BGRA

--- Incoming ---
[u'const CV_YUV2GRAY_420', u'106', [], []]
parseName: const CV_YUV2GRAY_420 with ['', 'cv'] -> fullname:CV_YUV2GRAY_420 namespace: classpath: classname: name:CV_YUV2GRAY_420

--- Incoming ---
[u'const CV_YUV2GRAY_NV21', u'CV_YUV2GRAY_420', [], []]
parseName: const CV_YUV2GRAY_NV21 with ['', 'cv'] -> fullname:CV_YUV2GRAY_NV21 namespace: classpath: classname: name:CV_YUV2GRAY_NV21

--- Incoming ---
[u'const CV_YUV2GRAY_NV12', u'CV_YUV2GRAY_420', [], []]
parseName: const CV_YUV2GRAY_NV12 with ['', 'cv'] -> fullname:CV_YUV2GRAY_NV12 namespace: classpath: classname: name:CV_YUV2GRAY_NV12

--- Incoming ---
[u'const CV_YUV2GRAY_YV12', u'CV_YUV2GRAY_420', [], []]
parseName: const CV_YUV2GRAY_YV12 with ['', 'cv'] -> fullname:CV_YUV2GRAY_YV12 namespace: classpath: classname: name:CV_YUV2GRAY_YV12

--- Incoming ---
[u'const CV_YUV2GRAY_IYUV', u'CV_YUV2GRAY_420', [], []]
parseName: const CV_YUV2GRAY_IYUV with ['', 'cv'] -> fullname:CV_YUV2GRAY_IYUV namespace: classpath: classname: name:CV_YUV2GRAY_IYUV

--- Incoming ---
[u'const CV_YUV2GRAY_I420', u'CV_YUV2GRAY_420', [], []]
parseName: const CV_YUV2GRAY_I420 with ['', 'cv'] -> fullname:CV_YUV2GRAY_I420 namespace: classpath: classname: name:CV_YUV2GRAY_I420

--- Incoming ---
[u'const CV_YUV420sp2GRAY', u'CV_YUV2GRAY_420', [], []]
parseName: const CV_YUV420sp2GRAY with ['', 'cv'] -> fullname:CV_YUV420sp2GRAY namespace: classpath: classname: name:CV_YUV420sp2GRAY

--- Incoming ---
[u'const CV_YUV420p2GRAY', u'CV_YUV2GRAY_420', [], []]
parseName: const CV_YUV420p2GRAY with ['', 'cv'] -> fullname:CV_YUV420p2GRAY namespace: classpath: classname: name:CV_YUV420p2GRAY

--- Incoming ---
[u'const CV_YUV2RGB_UYVY', u'107', [], []]
parseName: const CV_YUV2RGB_UYVY with ['', 'cv'] -> fullname:CV_YUV2RGB_UYVY namespace: classpath: classname: name:CV_YUV2RGB_UYVY

--- Incoming ---
[u'const CV_YUV2BGR_UYVY', u'108', [], []]
parseName: const CV_YUV2BGR_UYVY with ['', 'cv'] -> fullname:CV_YUV2BGR_UYVY namespace: classpath: classname: name:CV_YUV2BGR_UYVY

--- Incoming ---
[u'const CV_YUV2RGB_Y422', u'CV_YUV2RGB_UYVY', [], []]
parseName: const CV_YUV2RGB_Y422 with ['', 'cv'] -> fullname:CV_YUV2RGB_Y422 namespace: classpath: classname: name:CV_YUV2RGB_Y422

--- Incoming ---
[u'const CV_YUV2BGR_Y422', u'CV_YUV2BGR_UYVY', [], []]
parseName: const CV_YUV2BGR_Y422 with ['', 'cv'] -> fullname:CV_YUV2BGR_Y422 namespace: classpath: classname: name:CV_YUV2BGR_Y422

--- Incoming ---
[u'const CV_YUV2RGB_UYNV', u'CV_YUV2RGB_UYVY', [], []]
parseName: const CV_YUV2RGB_UYNV with ['', 'cv'] -> fullname:CV_YUV2RGB_UYNV namespace: classpath: classname: name:CV_YUV2RGB_UYNV

--- Incoming ---
[u'const CV_YUV2BGR_UYNV', u'CV_YUV2BGR_UYVY', [], []]
parseName: const CV_YUV2BGR_UYNV with ['', 'cv'] -> fullname:CV_YUV2BGR_UYNV namespace: classpath: classname: name:CV_YUV2BGR_UYNV

--- Incoming ---
[u'const CV_YUV2RGBA_UYVY', u'111', [], []]
parseName: const CV_YUV2RGBA_UYVY with ['', 'cv'] -> fullname:CV_YUV2RGBA_UYVY namespace: classpath: classname: name:CV_YUV2RGBA_UYVY

--- Incoming ---
[u'const CV_YUV2BGRA_UYVY', u'112', [], []]
parseName: const CV_YUV2BGRA_UYVY with ['', 'cv'] -> fullname:CV_YUV2BGRA_UYVY namespace: classpath: classname: name:CV_YUV2BGRA_UYVY

--- Incoming ---
[u'const CV_YUV2RGBA_Y422', u'CV_YUV2RGBA_UYVY', [], []]
parseName: const CV_YUV2RGBA_Y422 with ['', 'cv'] -> fullname:CV_YUV2RGBA_Y422 namespace: classpath: classname: name:CV_YUV2RGBA_Y422

--- Incoming ---
[u'const CV_YUV2BGRA_Y422', u'CV_YUV2BGRA_UYVY', [], []]
parseName: const CV_YUV2BGRA_Y422 with ['', 'cv'] -> fullname:CV_YUV2BGRA_Y422 namespace: classpath: classname: name:CV_YUV2BGRA_Y422

--- Incoming ---
[u'const CV_YUV2RGBA_UYNV', u'CV_YUV2RGBA_UYVY', [], []]
parseName: const CV_YUV2RGBA_UYNV with ['', 'cv'] -> fullname:CV_YUV2RGBA_UYNV namespace: classpath: classname: name:CV_YUV2RGBA_UYNV

--- Incoming ---
[u'const CV_YUV2BGRA_UYNV', u'CV_YUV2BGRA_UYVY', [], []]
parseName: const CV_YUV2BGRA_UYNV with ['', 'cv'] -> fullname:CV_YUV2BGRA_UYNV namespace: classpath: classname: name:CV_YUV2BGRA_UYNV

--- Incoming ---
[u'const CV_YUV2RGB_YUY2', u'115', [], []]
parseName: const CV_YUV2RGB_YUY2 with ['', 'cv'] -> fullname:CV_YUV2RGB_YUY2 namespace: classpath: classname: name:CV_YUV2RGB_YUY2

--- Incoming ---
[u'const CV_YUV2BGR_YUY2', u'116', [], []]
parseName: const CV_YUV2BGR_YUY2 with ['', 'cv'] -> fullname:CV_YUV2BGR_YUY2 namespace: classpath: classname: name:CV_YUV2BGR_YUY2

--- Incoming ---
[u'const CV_YUV2RGB_YVYU', u'117', [], []]
parseName: const CV_YUV2RGB_YVYU with ['', 'cv'] -> fullname:CV_YUV2RGB_YVYU namespace: classpath: classname: name:CV_YUV2RGB_YVYU

--- Incoming ---
[u'const CV_YUV2BGR_YVYU', u'118', [], []]
parseName: const CV_YUV2BGR_YVYU with ['', 'cv'] -> fullname:CV_YUV2BGR_YVYU namespace: classpath: classname: name:CV_YUV2BGR_YVYU

--- Incoming ---
[u'const CV_YUV2RGB_YUYV', u'CV_YUV2RGB_YUY2', [], []]
parseName: const CV_YUV2RGB_YUYV with ['', 'cv'] -> fullname:CV_YUV2RGB_YUYV namespace: classpath: classname: name:CV_YUV2RGB_YUYV

--- Incoming ---
[u'const CV_YUV2BGR_YUYV', u'CV_YUV2BGR_YUY2', [], []]
parseName: const CV_YUV2BGR_YUYV with ['', 'cv'] -> fullname:CV_YUV2BGR_YUYV namespace: classpath: classname: name:CV_YUV2BGR_YUYV

--- Incoming ---
[u'const CV_YUV2RGB_YUNV', u'CV_YUV2RGB_YUY2', [], []]
parseName: const CV_YUV2RGB_YUNV with ['', 'cv'] -> fullname:CV_YUV2RGB_YUNV namespace: classpath: classname: name:CV_YUV2RGB_YUNV

--- Incoming ---
[u'const CV_YUV2BGR_YUNV', u'CV_YUV2BGR_YUY2', [], []]
parseName: const CV_YUV2BGR_YUNV with ['', 'cv'] -> fullname:CV_YUV2BGR_YUNV namespace: classpath: classname: name:CV_YUV2BGR_YUNV

--- Incoming ---
[u'const CV_YUV2RGBA_YUY2', u'119', [], []]
parseName: const CV_YUV2RGBA_YUY2 with ['', 'cv'] -> fullname:CV_YUV2RGBA_YUY2 namespace: classpath: classname: name:CV_YUV2RGBA_YUY2

--- Incoming ---
[u'const CV_YUV2BGRA_YUY2', u'120', [], []]
parseName: const CV_YUV2BGRA_YUY2 with ['', 'cv'] -> fullname:CV_YUV2BGRA_YUY2 namespace: classpath: classname: name:CV_YUV2BGRA_YUY2

--- Incoming ---
[u'const CV_YUV2RGBA_YVYU', u'121', [], []]
parseName: const CV_YUV2RGBA_YVYU with ['', 'cv'] -> fullname:CV_YUV2RGBA_YVYU namespace: classpath: classname: name:CV_YUV2RGBA_YVYU

--- Incoming ---
[u'const CV_YUV2BGRA_YVYU', u'122', [], []]
parseName: const CV_YUV2BGRA_YVYU with ['', 'cv'] -> fullname:CV_YUV2BGRA_YVYU namespace: classpath: classname: name:CV_YUV2BGRA_YVYU

--- Incoming ---
[u'const CV_YUV2RGBA_YUYV', u'CV_YUV2RGBA_YUY2', [], []]
parseName: const CV_YUV2RGBA_YUYV with ['', 'cv'] -> fullname:CV_YUV2RGBA_YUYV namespace: classpath: classname: name:CV_YUV2RGBA_YUYV

--- Incoming ---
[u'const CV_YUV2BGRA_YUYV', u'CV_YUV2BGRA_YUY2', [], []]
parseName: const CV_YUV2BGRA_YUYV with ['', 'cv'] -> fullname:CV_YUV2BGRA_YUYV namespace: classpath: classname: name:CV_YUV2BGRA_YUYV

--- Incoming ---
[u'const CV_YUV2RGBA_YUNV', u'CV_YUV2RGBA_YUY2', [], []]
parseName: const CV_YUV2RGBA_YUNV with ['', 'cv'] -> fullname:CV_YUV2RGBA_YUNV namespace: classpath: classname: name:CV_YUV2RGBA_YUNV

--- Incoming ---
[u'const CV_YUV2BGRA_YUNV', u'CV_YUV2BGRA_YUY2', [], []]
parseName: const CV_YUV2BGRA_YUNV with ['', 'cv'] -> fullname:CV_YUV2BGRA_YUNV namespace: classpath: classname: name:CV_YUV2BGRA_YUNV

--- Incoming ---
[u'const CV_YUV2GRAY_UYVY', u'123', [], []]
parseName: const CV_YUV2GRAY_UYVY with ['', 'cv'] -> fullname:CV_YUV2GRAY_UYVY namespace: classpath: classname: name:CV_YUV2GRAY_UYVY

--- Incoming ---
[u'const CV_YUV2GRAY_YUY2', u'124', [], []]
parseName: const CV_YUV2GRAY_YUY2 with ['', 'cv'] -> fullname:CV_YUV2GRAY_YUY2 namespace: classpath: classname: name:CV_YUV2GRAY_YUY2

--- Incoming ---
[u'const CV_YUV2GRAY_Y422', u'CV_YUV2GRAY_UYVY', [], []]
parseName: const CV_YUV2GRAY_Y422 with ['', 'cv'] -> fullname:CV_YUV2GRAY_Y422 namespace: classpath: classname: name:CV_YUV2GRAY_Y422

--- Incoming ---
[u'const CV_YUV2GRAY_UYNV', u'CV_YUV2GRAY_UYVY', [], []]
parseName: const CV_YUV2GRAY_UYNV with ['', 'cv'] -> fullname:CV_YUV2GRAY_UYNV namespace: classpath: classname: name:CV_YUV2GRAY_UYNV

--- Incoming ---
[u'const CV_YUV2GRAY_YVYU', u'CV_YUV2GRAY_YUY2', [], []]
parseName: const CV_YUV2GRAY_YVYU with ['', 'cv'] -> fullname:CV_YUV2GRAY_YVYU namespace: classpath: classname: name:CV_YUV2GRAY_YVYU

--- Incoming ---
[u'const CV_YUV2GRAY_YUYV', u'CV_YUV2GRAY_YUY2', [], []]
parseName: const CV_YUV2GRAY_YUYV with ['', 'cv'] -> fullname:CV_YUV2GRAY_YUYV namespace: classpath: classname: name:CV_YUV2GRAY_YUYV

--- Incoming ---
[u'const CV_YUV2GRAY_YUNV', u'CV_YUV2GRAY_YUY2', [], []]
parseName: const CV_YUV2GRAY_YUNV with ['', 'cv'] -> fullname:CV_YUV2GRAY_YUNV namespace: classpath: classname: name:CV_YUV2GRAY_YUNV

--- Incoming ---
[u'const CV_RGBA2mRGBA', u'125', [], []]
parseName: const CV_RGBA2mRGBA with ['', 'cv'] -> fullname:CV_RGBA2mRGBA namespace: classpath: classname: name:CV_RGBA2mRGBA

--- Incoming ---
[u'const CV_mRGBA2RGBA', u'126', [], []]
parseName: const CV_mRGBA2RGBA with ['', 'cv'] -> fullname:CV_mRGBA2RGBA namespace: classpath: classname: name:CV_mRGBA2RGBA

--- Incoming ---
[u'const CV_RGB2YUV_I420', u'127', [], []]
parseName: const CV_RGB2YUV_I420 with ['', 'cv'] -> fullname:CV_RGB2YUV_I420 namespace: classpath: classname: name:CV_RGB2YUV_I420

--- Incoming ---
[u'const CV_BGR2YUV_I420', u'128', [], []]
parseName: const CV_BGR2YUV_I420 with ['', 'cv'] -> fullname:CV_BGR2YUV_I420 namespace: classpath: classname: name:CV_BGR2YUV_I420

--- Incoming ---
[u'const CV_RGB2YUV_IYUV', u'CV_RGB2YUV_I420', [], []]
parseName: const CV_RGB2YUV_IYUV with ['', 'cv'] -> fullname:CV_RGB2YUV_IYUV namespace: classpath: classname: name:CV_RGB2YUV_IYUV

--- Incoming ---
[u'const CV_BGR2YUV_IYUV', u'CV_BGR2YUV_I420', [], []]
parseName: const CV_BGR2YUV_IYUV with ['', 'cv'] -> fullname:CV_BGR2YUV_IYUV namespace: classpath: classname: name:CV_BGR2YUV_IYUV

--- Incoming ---
[u'const CV_RGBA2YUV_I420', u'129', [], []]
parseName: const CV_RGBA2YUV_I420 with ['', 'cv'] -> fullname:CV_RGBA2YUV_I420 namespace: classpath: classname: name:CV_RGBA2YUV_I420

--- Incoming ---
[u'const CV_BGRA2YUV_I420', u'130', [], []]
parseName: const CV_BGRA2YUV_I420 with ['', 'cv'] -> fullname:CV_BGRA2YUV_I420 namespace: classpath: classname: name:CV_BGRA2YUV_I420

--- Incoming ---
[u'const CV_RGBA2YUV_IYUV', u'CV_RGBA2YUV_I420', [], []]
parseName: const CV_RGBA2YUV_IYUV with ['', 'cv'] -> fullname:CV_RGBA2YUV_IYUV namespace: classpath: classname: name:CV_RGBA2YUV_IYUV

--- Incoming ---
[u'const CV_BGRA2YUV_IYUV', u'CV_BGRA2YUV_I420', [], []]
parseName: const CV_BGRA2YUV_IYUV with ['', 'cv'] -> fullname:CV_BGRA2YUV_IYUV namespace: classpath: classname: name:CV_BGRA2YUV_IYUV

--- Incoming ---
[u'const CV_RGB2YUV_YV12', u'131', [], []]
parseName: const CV_RGB2YUV_YV12 with ['', 'cv'] -> fullname:CV_RGB2YUV_YV12 namespace: classpath: classname: name:CV_RGB2YUV_YV12

--- Incoming ---
[u'const CV_BGR2YUV_YV12', u'132', [], []]
parseName: const CV_BGR2YUV_YV12 with ['', 'cv'] -> fullname:CV_BGR2YUV_YV12 namespace: classpath: classname: name:CV_BGR2YUV_YV12

--- Incoming ---
[u'const CV_RGBA2YUV_YV12', u'133', [], []]
parseName: const CV_RGBA2YUV_YV12 with ['', 'cv'] -> fullname:CV_RGBA2YUV_YV12 namespace: classpath: classname: name:CV_RGBA2YUV_YV12

--- Incoming ---
[u'const CV_BGRA2YUV_YV12', u'134', [], []]
parseName: const CV_BGRA2YUV_YV12 with ['', 'cv'] -> fullname:CV_BGRA2YUV_YV12 namespace: classpath: classname: name:CV_BGRA2YUV_YV12

--- Incoming ---
[u'const CV_COLORCVT_MAX', u'135', [], []]
parseName: const CV_COLORCVT_MAX with ['', 'cv'] -> fullname:CV_COLORCVT_MAX namespace: classpath: classname: name:CV_COLORCVT_MAX

--- Incoming ---
[u'const CV_INTER_NN', u'0', [], []]
parseName: const CV_INTER_NN with ['', 'cv'] -> fullname:CV_INTER_NN namespace: classpath: classname: name:CV_INTER_NN

--- Incoming ---
[u'const CV_INTER_LINEAR', u'1', [], []]
parseName: const CV_INTER_LINEAR with ['', 'cv'] -> fullname:CV_INTER_LINEAR namespace: classpath: classname: name:CV_INTER_LINEAR

--- Incoming ---
[u'const CV_INTER_CUBIC', u'2', [], []]
parseName: const CV_INTER_CUBIC with ['', 'cv'] -> fullname:CV_INTER_CUBIC namespace: classpath: classname: name:CV_INTER_CUBIC

--- Incoming ---
[u'const CV_INTER_AREA', u'3', [], []]
parseName: const CV_INTER_AREA with ['', 'cv'] -> fullname:CV_INTER_AREA namespace: classpath: classname: name:CV_INTER_AREA

--- Incoming ---
[u'const CV_INTER_LANCZOS4', u'4', [], []]
parseName: const CV_INTER_LANCZOS4 with ['', 'cv'] -> fullname:CV_INTER_LANCZOS4 namespace: classpath: classname: name:CV_INTER_LANCZOS4

--- Incoming ---
[u'const CV_WARP_FILL_OUTLIERS', u'8', [], []]
parseName: const CV_WARP_FILL_OUTLIERS with ['', 'cv'] -> fullname:CV_WARP_FILL_OUTLIERS namespace: classpath: classname: name:CV_WARP_FILL_OUTLIERS

--- Incoming ---
[u'const CV_WARP_INVERSE_MAP', u'16', [], []]
parseName: const CV_WARP_INVERSE_MAP with ['', 'cv'] -> fullname:CV_WARP_INVERSE_MAP namespace: classpath: classname: name:CV_WARP_INVERSE_MAP

--- Incoming ---
[u'const CV_SHAPE_RECT', u'0', [], []]
parseName: const CV_SHAPE_RECT with ['', 'cv'] -> fullname:CV_SHAPE_RECT namespace: classpath: classname: name:CV_SHAPE_RECT

--- Incoming ---
[u'const CV_SHAPE_CROSS', u'1', [], []]
parseName: const CV_SHAPE_CROSS with ['', 'cv'] -> fullname:CV_SHAPE_CROSS namespace: classpath: classname: name:CV_SHAPE_CROSS

--- Incoming ---
[u'const CV_SHAPE_ELLIPSE', u'2', [], []]
parseName: const CV_SHAPE_ELLIPSE with ['', 'cv'] -> fullname:CV_SHAPE_ELLIPSE namespace: classpath: classname: name:CV_SHAPE_ELLIPSE

--- Incoming ---
[u'const CV_SHAPE_CUSTOM', u'100', [], []]
parseName: const CV_SHAPE_CUSTOM with ['', 'cv'] -> fullname:CV_SHAPE_CUSTOM namespace: classpath: classname: name:CV_SHAPE_CUSTOM

--- Incoming ---
[u'const CV_MOP_ERODE', u'0', [], []]
parseName: const CV_MOP_ERODE with ['', 'cv'] -> fullname:CV_MOP_ERODE namespace: classpath: classname: name:CV_MOP_ERODE

--- Incoming ---
[u'const CV_MOP_DILATE', u'1', [], []]
parseName: const CV_MOP_DILATE with ['', 'cv'] -> fullname:CV_MOP_DILATE namespace: classpath: classname: name:CV_MOP_DILATE

--- Incoming ---
[u'const CV_MOP_OPEN', u'2', [], []]
parseName: const CV_MOP_OPEN with ['', 'cv'] -> fullname:CV_MOP_OPEN namespace: classpath: classname: name:CV_MOP_OPEN

--- Incoming ---
[u'const CV_MOP_CLOSE', u'3', [], []]
parseName: const CV_MOP_CLOSE with ['', 'cv'] -> fullname:CV_MOP_CLOSE namespace: classpath: classname: name:CV_MOP_CLOSE

--- Incoming ---
[u'const CV_MOP_GRADIENT', u'4', [], []]
parseName: const CV_MOP_GRADIENT with ['', 'cv'] -> fullname:CV_MOP_GRADIENT namespace: classpath: classname: name:CV_MOP_GRADIENT

--- Incoming ---
[u'const CV_MOP_TOPHAT', u'5', [], []]
parseName: const CV_MOP_TOPHAT with ['', 'cv'] -> fullname:CV_MOP_TOPHAT namespace: classpath: classname: name:CV_MOP_TOPHAT

--- Incoming ---
[u'const CV_MOP_BLACKHAT', u'6', [], []]
parseName: const CV_MOP_BLACKHAT with ['', 'cv'] -> fullname:CV_MOP_BLACKHAT namespace: classpath: classname: name:CV_MOP_BLACKHAT

--- Incoming ---
[u'struct CvMoments', '', [], [], '']
parseName: struct CvMoments with ['', 'cv'] -> fullname:CvMoments namespace: classpath: classname: name:CvMoments
register class CvMoments ([u'struct CvMoments', '', [], [], '']) [ignored]

--- Incoming ---
[u'struct CvHuMoments', '', [], [], '']
parseName: struct CvHuMoments with ['', 'cv'] -> fullname:CvHuMoments namespace: classpath: classname: name:CvHuMoments
register class CvHuMoments ([u'struct CvHuMoments', '', [], [], '']) [ignored]

--- Incoming ---
[u'const CV_TM_SQDIFF', u'0', [], []]
parseName: const CV_TM_SQDIFF with ['', 'cv'] -> fullname:CV_TM_SQDIFF namespace: classpath: classname: name:CV_TM_SQDIFF

--- Incoming ---
[u'const CV_TM_SQDIFF_NORMED', u'1', [], []]
parseName: const CV_TM_SQDIFF_NORMED with ['', 'cv'] -> fullname:CV_TM_SQDIFF_NORMED namespace: classpath: classname: name:CV_TM_SQDIFF_NORMED

--- Incoming ---
[u'const CV_TM_CCORR', u'2', [], []]
parseName: const CV_TM_CCORR with ['', 'cv'] -> fullname:CV_TM_CCORR namespace: classpath: classname: name:CV_TM_CCORR

--- Incoming ---
[u'const CV_TM_CCORR_NORMED', u'3', [], []]
parseName: const CV_TM_CCORR_NORMED with ['', 'cv'] -> fullname:CV_TM_CCORR_NORMED namespace: classpath: classname: name:CV_TM_CCORR_NORMED

--- Incoming ---
[u'const CV_TM_CCOEFF', u'4', [], []]
parseName: const CV_TM_CCOEFF with ['', 'cv'] -> fullname:CV_TM_CCOEFF namespace: classpath: classname: name:CV_TM_CCOEFF

--- Incoming ---
[u'const CV_TM_CCOEFF_NORMED', u'5', [], []]
parseName: const CV_TM_CCOEFF_NORMED with ['', 'cv'] -> fullname:CV_TM_CCOEFF_NORMED namespace: classpath: classname: name:CV_TM_CCOEFF_NORMED

--- Incoming ---
[u'const CV_RETR_EXTERNAL', u'0', [], []]
parseName: const CV_RETR_EXTERNAL with ['', 'cv'] -> fullname:CV_RETR_EXTERNAL namespace: classpath: classname: name:CV_RETR_EXTERNAL

--- Incoming ---
[u'const CV_RETR_LIST', u'1', [], []]
parseName: const CV_RETR_LIST with ['', 'cv'] -> fullname:CV_RETR_LIST namespace: classpath: classname: name:CV_RETR_LIST

--- Incoming ---
[u'const CV_RETR_CCOMP', u'2', [], []]
parseName: const CV_RETR_CCOMP with ['', 'cv'] -> fullname:CV_RETR_CCOMP namespace: classpath: classname: name:CV_RETR_CCOMP

--- Incoming ---
[u'const CV_RETR_TREE', u'3', [], []]
parseName: const CV_RETR_TREE with ['', 'cv'] -> fullname:CV_RETR_TREE namespace: classpath: classname: name:CV_RETR_TREE

--- Incoming ---
[u'const CV_RETR_FLOODFILL', u'4', [], []]
parseName: const CV_RETR_FLOODFILL with ['', 'cv'] -> fullname:CV_RETR_FLOODFILL namespace: classpath: classname: name:CV_RETR_FLOODFILL

--- Incoming ---
[u'const CV_CHAIN_CODE', u'0', [], []]
parseName: const CV_CHAIN_CODE with ['', 'cv'] -> fullname:CV_CHAIN_CODE namespace: classpath: classname: name:CV_CHAIN_CODE

--- Incoming ---
[u'const CV_CHAIN_APPROX_NONE', u'1', [], []]
parseName: const CV_CHAIN_APPROX_NONE with ['', 'cv'] -> fullname:CV_CHAIN_APPROX_NONE namespace: classpath: classname: name:CV_CHAIN_APPROX_NONE

--- Incoming ---
[u'const CV_CHAIN_APPROX_SIMPLE', u'2', [], []]
parseName: const CV_CHAIN_APPROX_SIMPLE with ['', 'cv'] -> fullname:CV_CHAIN_APPROX_SIMPLE namespace: classpath: classname: name:CV_CHAIN_APPROX_SIMPLE

--- Incoming ---
[u'const CV_CHAIN_APPROX_TC89_L1', u'3', [], []]
parseName: const CV_CHAIN_APPROX_TC89_L1 with ['', 'cv'] -> fullname:CV_CHAIN_APPROX_TC89_L1 namespace: classpath: classname: name:CV_CHAIN_APPROX_TC89_L1

--- Incoming ---
[u'const CV_CHAIN_APPROX_TC89_KCOS', u'4', [], []]
parseName: const CV_CHAIN_APPROX_TC89_KCOS with ['', 'cv'] -> fullname:CV_CHAIN_APPROX_TC89_KCOS namespace: classpath: classname: name:CV_CHAIN_APPROX_TC89_KCOS

--- Incoming ---
[u'const CV_LINK_RUNS', u'5', [], []]
parseName: const CV_LINK_RUNS with ['', 'cv'] -> fullname:CV_LINK_RUNS namespace: classpath: classname: name:CV_LINK_RUNS

--- Incoming ---
[u'struct CvChainPtReader', '', [], [], '']
parseName: struct CvChainPtReader with ['', 'cv'] -> fullname:CvChainPtReader namespace: classpath: classname: name:CvChainPtReader
register class CvChainPtReader ([u'struct CvChainPtReader', '', [], [], '']) [ignored]

--- Incoming ---
[u'const CV_SUBDIV2D_VIRTUAL_POINT_FLAG', u'(1 << 30)', [], [], '']
parseName: const CV_SUBDIV2D_VIRTUAL_POINT_FLAG with ['', 'cv'] -> fullname:CV_SUBDIV2D_VIRTUAL_POINT_FLAG namespace: classpath: classname: name:CV_SUBDIV2D_VIRTUAL_POINT_FLAG

--- Incoming ---
[u'struct CvQuadEdge2D', '', [], [], '']
parseName: struct CvQuadEdge2D with ['', 'cv'] -> fullname:CvQuadEdge2D namespace: classpath: classname: name:CvQuadEdge2D
register class CvQuadEdge2D ([u'struct CvQuadEdge2D', '', [], [], '']) [ignored]

--- Incoming ---
[u'struct CvSubdiv2DPoint', '', [], [], '']
parseName: struct CvSubdiv2DPoint with ['', 'cv'] -> fullname:CvSubdiv2DPoint namespace: classpath: classname: name:CvSubdiv2DPoint
register class CvSubdiv2DPoint ([u'struct CvSubdiv2DPoint', '', [], [], '']) [ignored]

--- Incoming ---
[u'struct CvSubdiv2D', '', [], [], '']
parseName: struct CvSubdiv2D with ['', 'cv'] -> fullname:CvSubdiv2D namespace: classpath: classname: name:CvSubdiv2D
register class CvSubdiv2D ([u'struct CvSubdiv2D', '', [], [], '']) [ignored]

--- Incoming ---
[u'const CV_POLY_APPROX_DP', u'0', [], []]
parseName: const CV_POLY_APPROX_DP with ['', 'cv'] -> fullname:CV_POLY_APPROX_DP namespace: classpath: classname: name:CV_POLY_APPROX_DP

--- Incoming ---
[u'const CV_CONTOURS_MATCH_I1', u'1', [], []]
parseName: const CV_CONTOURS_MATCH_I1 with ['', 'cv'] -> fullname:CV_CONTOURS_MATCH_I1 namespace: classpath: classname: name:CV_CONTOURS_MATCH_I1

--- Incoming ---
[u'const CV_CONTOURS_MATCH_I2', u'2', [], []]
parseName: const CV_CONTOURS_MATCH_I2 with ['', 'cv'] -> fullname:CV_CONTOURS_MATCH_I2 namespace: classpath: classname: name:CV_CONTOURS_MATCH_I2

--- Incoming ---
[u'const CV_CONTOURS_MATCH_I3', u'3', [], []]
parseName: const CV_CONTOURS_MATCH_I3 with ['', 'cv'] -> fullname:CV_CONTOURS_MATCH_I3 namespace: classpath: classname: name:CV_CONTOURS_MATCH_I3

--- Incoming ---
[u'const CV_CLOCKWISE', u'1', [], []]
parseName: const CV_CLOCKWISE with ['', 'cv'] -> fullname:CV_CLOCKWISE namespace: classpath: classname: name:CV_CLOCKWISE

--- Incoming ---
[u'const CV_COUNTER_CLOCKWISE', u'2', [], []]
parseName: const CV_COUNTER_CLOCKWISE with ['', 'cv'] -> fullname:CV_COUNTER_CLOCKWISE namespace: classpath: classname: name:CV_COUNTER_CLOCKWISE

--- Incoming ---
[u'struct CvConvexityDefect', '', [], [], '']
parseName: struct CvConvexityDefect with ['', 'cv'] -> fullname:CvConvexityDefect namespace: classpath: classname: name:CvConvexityDefect
register class CvConvexityDefect ([u'struct CvConvexityDefect', '', [], [], '']) [ignored]

--- Incoming ---
[u'const CV_COMP_CORREL', u'0', [], []]
parseName: const CV_COMP_CORREL with ['', 'cv'] -> fullname:CV_COMP_CORREL namespace: classpath: classname: name:CV_COMP_CORREL

--- Incoming ---
[u'const CV_COMP_CHISQR', u'1', [], []]
parseName: const CV_COMP_CHISQR with ['', 'cv'] -> fullname:CV_COMP_CHISQR namespace: classpath: classname: name:CV_COMP_CHISQR

--- Incoming ---
[u'const CV_COMP_INTERSECT', u'2', [], []]
parseName: const CV_COMP_INTERSECT with ['', 'cv'] -> fullname:CV_COMP_INTERSECT namespace: classpath: classname: name:CV_COMP_INTERSECT

--- Incoming ---
[u'const CV_COMP_BHATTACHARYYA', u'3', [], []]
parseName: const CV_COMP_BHATTACHARYYA with ['', 'cv'] -> fullname:CV_COMP_BHATTACHARYYA namespace: classpath: classname: name:CV_COMP_BHATTACHARYYA

--- Incoming ---
[u'const CV_COMP_HELLINGER', u'CV_COMP_BHATTACHARYYA', [], []]
parseName: const CV_COMP_HELLINGER with ['', 'cv'] -> fullname:CV_COMP_HELLINGER namespace: classpath: classname: name:CV_COMP_HELLINGER

--- Incoming ---
[u'const CV_DIST_MASK_3', u'3', [], []]
parseName: const CV_DIST_MASK_3 with ['', 'cv'] -> fullname:CV_DIST_MASK_3 namespace: classpath: classname: name:CV_DIST_MASK_3

--- Incoming ---
[u'const CV_DIST_MASK_5', u'5', [], []]
parseName: const CV_DIST_MASK_5 with ['', 'cv'] -> fullname:CV_DIST_MASK_5 namespace: classpath: classname: name:CV_DIST_MASK_5

--- Incoming ---
[u'const CV_DIST_MASK_PRECISE', u'0', [], []]
parseName: const CV_DIST_MASK_PRECISE with ['', 'cv'] -> fullname:CV_DIST_MASK_PRECISE namespace: classpath: classname: name:CV_DIST_MASK_PRECISE

--- Incoming ---
[u'const CV_DIST_LABEL_CCOMP', u'0', [], []]
parseName: const CV_DIST_LABEL_CCOMP with ['', 'cv'] -> fullname:CV_DIST_LABEL_CCOMP namespace: classpath: classname: name:CV_DIST_LABEL_CCOMP

--- Incoming ---
[u'const CV_DIST_LABEL_PIXEL', u'1', [], []]
parseName: const CV_DIST_LABEL_PIXEL with ['', 'cv'] -> fullname:CV_DIST_LABEL_PIXEL namespace: classpath: classname: name:CV_DIST_LABEL_PIXEL

--- Incoming ---
[u'const CV_DIST_USER', u'-1', [], []]
parseName: const CV_DIST_USER with ['', 'cv'] -> fullname:CV_DIST_USER namespace: classpath: classname: name:CV_DIST_USER

--- Incoming ---
[u'const CV_DIST_L1', u'1', [], []]
parseName: const CV_DIST_L1 with ['', 'cv'] -> fullname:CV_DIST_L1 namespace: classpath: classname: name:CV_DIST_L1

--- Incoming ---
[u'const CV_DIST_L2', u'2', [], []]
parseName: const CV_DIST_L2 with ['', 'cv'] -> fullname:CV_DIST_L2 namespace: classpath: classname: name:CV_DIST_L2

--- Incoming ---
[u'const CV_DIST_C', u'3', [], []]
parseName: const CV_DIST_C with ['', 'cv'] -> fullname:CV_DIST_C namespace: classpath: classname: name:CV_DIST_C

--- Incoming ---
[u'const CV_DIST_L12', u'4', [], []]
parseName: const CV_DIST_L12 with ['', 'cv'] -> fullname:CV_DIST_L12 namespace: classpath: classname: name:CV_DIST_L12

--- Incoming ---
[u'const CV_DIST_FAIR', u'5', [], []]
parseName: const CV_DIST_FAIR with ['', 'cv'] -> fullname:CV_DIST_FAIR namespace: classpath: classname: name:CV_DIST_FAIR

--- Incoming ---
[u'const CV_DIST_WELSCH', u'6', [], []]
parseName: const CV_DIST_WELSCH with ['', 'cv'] -> fullname:CV_DIST_WELSCH namespace: classpath: classname: name:CV_DIST_WELSCH

--- Incoming ---
[u'const CV_DIST_HUBER', u'7', [], []]
parseName: const CV_DIST_HUBER with ['', 'cv'] -> fullname:CV_DIST_HUBER namespace: classpath: classname: name:CV_DIST_HUBER

--- Incoming ---
[u'const CV_THRESH_BINARY', u'0', [], []]
parseName: const CV_THRESH_BINARY with ['', 'cv'] -> fullname:CV_THRESH_BINARY namespace: classpath: classname: name:CV_THRESH_BINARY

--- Incoming ---
[u'const CV_THRESH_BINARY_INV', u'1', [], []]
parseName: const CV_THRESH_BINARY_INV with ['', 'cv'] -> fullname:CV_THRESH_BINARY_INV namespace: classpath: classname: name:CV_THRESH_BINARY_INV

--- Incoming ---
[u'const CV_THRESH_TRUNC', u'2', [], []]
parseName: const CV_THRESH_TRUNC with ['', 'cv'] -> fullname:CV_THRESH_TRUNC namespace: classpath: classname: name:CV_THRESH_TRUNC

--- Incoming ---
[u'const CV_THRESH_TOZERO', u'3', [], []]
parseName: const CV_THRESH_TOZERO with ['', 'cv'] -> fullname:CV_THRESH_TOZERO namespace: classpath: classname: name:CV_THRESH_TOZERO

--- Incoming ---
[u'const CV_THRESH_TOZERO_INV', u'4', [], []]
parseName: const CV_THRESH_TOZERO_INV with ['', 'cv'] -> fullname:CV_THRESH_TOZERO_INV namespace: classpath: classname: name:CV_THRESH_TOZERO_INV

--- Incoming ---
[u'const CV_THRESH_MASK', u'7', [], []]
parseName: const CV_THRESH_MASK with ['', 'cv'] -> fullname:CV_THRESH_MASK namespace: classpath: classname: name:CV_THRESH_MASK

--- Incoming ---
[u'const CV_THRESH_OTSU', u'8', [], []]
parseName: const CV_THRESH_OTSU with ['', 'cv'] -> fullname:CV_THRESH_OTSU namespace: classpath: classname: name:CV_THRESH_OTSU

--- Incoming ---
[u'const CV_ADAPTIVE_THRESH_MEAN_C', u'0', [], []]
parseName: const CV_ADAPTIVE_THRESH_MEAN_C with ['', 'cv'] -> fullname:CV_ADAPTIVE_THRESH_MEAN_C namespace: classpath: classname: name:CV_ADAPTIVE_THRESH_MEAN_C

--- Incoming ---
[u'const CV_ADAPTIVE_THRESH_GAUSSIAN_C', u'1', [], []]
parseName: const CV_ADAPTIVE_THRESH_GAUSSIAN_C with ['', 'cv'] -> fullname:CV_ADAPTIVE_THRESH_GAUSSIAN_C namespace: classpath: classname: name:CV_ADAPTIVE_THRESH_GAUSSIAN_C

--- Incoming ---
[u'const CV_FLOODFILL_FIXED_RANGE', u'(1 << 16)', [], []]
parseName: const CV_FLOODFILL_FIXED_RANGE with ['', 'cv'] -> fullname:CV_FLOODFILL_FIXED_RANGE namespace: classpath: classname: name:CV_FLOODFILL_FIXED_RANGE

--- Incoming ---
[u'const CV_FLOODFILL_MASK_ONLY', u'(1 << 17)', [], []]
parseName: const CV_FLOODFILL_MASK_ONLY with ['', 'cv'] -> fullname:CV_FLOODFILL_MASK_ONLY namespace: classpath: classname: name:CV_FLOODFILL_MASK_ONLY

--- Incoming ---
[u'const CV_CANNY_L2_GRADIENT', u'(1 << 31)', [], []]
parseName: const CV_CANNY_L2_GRADIENT with ['', 'cv'] -> fullname:CV_CANNY_L2_GRADIENT namespace: classpath: classname: name:CV_CANNY_L2_GRADIENT

--- Incoming ---
[u'const CV_HOUGH_STANDARD', u'0', [], []]
parseName: const CV_HOUGH_STANDARD with ['', 'cv'] -> fullname:CV_HOUGH_STANDARD namespace: classpath: classname: name:CV_HOUGH_STANDARD

--- Incoming ---
[u'const CV_HOUGH_PROBABILISTIC', u'1', [], []]
parseName: const CV_HOUGH_PROBABILISTIC with ['', 'cv'] -> fullname:CV_HOUGH_PROBABILISTIC namespace: classpath: classname: name:CV_HOUGH_PROBABILISTIC

--- Incoming ---
[u'const CV_HOUGH_MULTI_SCALE', u'2', [], []]
parseName: const CV_HOUGH_MULTI_SCALE with ['', 'cv'] -> fullname:CV_HOUGH_MULTI_SCALE namespace: classpath: classname: name:CV_HOUGH_MULTI_SCALE

--- Incoming ---
[u'const CV_HOUGH_GRADIENT', u'3', [], []]
parseName: const CV_HOUGH_GRADIENT with ['', 'cv'] -> fullname:CV_HOUGH_GRADIENT namespace: classpath: classname: name:CV_HOUGH_GRADIENT


===== Header: /usr/include/opencv2/imgproc/imgproc_c.h =====
Namespaces: set(['', 'cv'])

--- Incoming ---
[   u'cvAcc',
    u'void',
    ['/NW'],
    [   [u'const CvArr*', u'image', '', []],
        [u'CvArr*', u'sum', '', []],
        [u'const CvArr*', u'mask', u'NULL', []]],
    '']
parseName: cvAcc with ['', 'cv'] -> fullname:cvAcc namespace: classpath: classname: name:cvAcc
Registering an unknown type: CvArr
Registering an unknown type: CvArr
register (function) cvAcc

--- Incoming ---
[   u'cvSquareAcc',
    u'void',
    ['/NW'],
    [   [u'const CvArr*', u'image', '', []],
        [u'CvArr*', u'sqsum', '', []],
        [u'const CvArr*', u'mask', u'NULL', []]],
    '']
parseName: cvSquareAcc with ['', 'cv'] -> fullname:cvSquareAcc namespace: classpath: classname: name:cvSquareAcc
register (function) cvSquareAcc

--- Incoming ---
[   u'cvMultiplyAcc',
    u'void',
    ['/NW'],
    [   [u'const CvArr*', u'image1', '', []],
        [u'const CvArr*', u'image2', '', []],
        [u'CvArr*', u'acc', '', []],
        [u'const CvArr*', u'mask', u'NULL', []]],
    '']
parseName: cvMultiplyAcc with ['', 'cv'] -> fullname:cvMultiplyAcc namespace: classpath: classname: name:cvMultiplyAcc
register (function) cvMultiplyAcc

--- Incoming ---
[   u'cvRunningAvg',
    u'void',
    ['/NW'],
    [   [u'const CvArr*', u'image', '', []],
        [u'CvArr*', u'acc', '', []],
        [u'double', u'alpha', '', []],
        [u'const CvArr*', u'mask', u'NULL', []]],
    '']
parseName: cvRunningAvg with ['', 'cv'] -> fullname:cvRunningAvg namespace: classpath: classname: name:cvRunningAvg
register (function) cvRunningAvg

--- Incoming ---
[   u'cvCopyMakeBorder',
    u'void',
    ['/NW'],
    [   [u'const CvArr*', u'src', '', []],
        [u'CvArr*', u'dst', '', []],
        [u'CvPoint', u'offset', '', []],
        [u'int', u'bordertype', '', []],
        [u'CvScalar', u'value', u'cvScalarAll(0)', []]],
    '']
parseName: cvCopyMakeBorder with ['', 'cv'] -> fullname:cvCopyMakeBorder namespace: classpath: classname: name:cvCopyMakeBorder
Registering an unknown type: CvPoint
Registering an unknown type: CvScalar
register (function) cvCopyMakeBorder

--- Incoming ---
[   u'cvSmooth',
    u'void',
    ['/NW'],
    [   [u'const CvArr*', u'src', '', []],
        [u'CvArr*', u'dst', '', []],
        [u'int', u'smoothtype', u'CV_GAUSSIAN', []],
        [u'int', u'size1', u'3', []],
        [u'int', u'size2', u'0', []],
        [u'double', u'sigma1', u'0', []],
        [u'double', u'sigma2', u'0', []]],
    '']
parseName: cvSmooth with ['', 'cv'] -> fullname:cvSmooth namespace: classpath: classname: name:cvSmooth
register (function) cvSmooth

--- Incoming ---
[   u'cvFilter2D',
    u'void',
    ['/NW'],
    [   [u'const CvArr*', u'src', '', []],
        [u'CvArr*', u'dst', '', []],
        [u'const CvMat*', u'kernel', '', []],
        [u'CvPoint', u'anchor', u'cvPoint(-1,-1)', []]],
    '']
parseName: cvFilter2D with ['', 'cv'] -> fullname:cvFilter2D namespace: classpath: classname: name:cvFilter2D
Registering an unknown type: CvMat
register (function) cvFilter2D

--- Incoming ---
[   u'cvIntegral',
    u'void',
    ['/NW'],
    [   [u'const CvArr*', u'image', '', []],
        [u'CvArr*', u'sum', '', []],
        [u'CvArr*', u'sqsum', u'NULL', []],
        [u'CvArr*', u'tilted_sum', u'NULL', []]],
    '']
parseName: cvIntegral with ['', 'cv'] -> fullname:cvIntegral namespace: classpath: classname: name:cvIntegral
register (function) cvIntegral

--- Incoming ---
[   u'cvPyrDown',
    u'void',
    ['/NW'],
    [   [u'const CvArr*', u'src', '', []],
        [u'CvArr*', u'dst', '', []],
        [u'int', u'filter', u'CV_GAUSSIAN_5x5', []]],
    '']
parseName: cvPyrDown with ['', 'cv'] -> fullname:cvPyrDown namespace: classpath: classname: name:cvPyrDown
register (function) cvPyrDown

--- Incoming ---
[   u'cvPyrUp',
    u'void',
    ['/NW'],
    [   [u'const CvArr*', u'src', '', []],
        [u'CvArr*', u'dst', '', []],
        [u'int', u'filter', u'CV_GAUSSIAN_5x5', []]],
    '']
parseName: cvPyrUp with ['', 'cv'] -> fullname:cvPyrUp namespace: classpath: classname: name:cvPyrUp
register (function) cvPyrUp

--- Incoming ---
[   u'cvCreatePyramid',
    u'CvMat**',
    ['/NW'],
    [   [u'const CvArr*', u'img', '', []],
        [u'int', u'extra_layers', '', []],
        [u'double', u'rate', '', []],
        [u'const CvSize*', u'layer_sizes', u'0', []],
        [u'CvArr*', u'bufarr', u'0', []],
        [u'int', u'calc', u'1', []],
        [u'int', u'filter', u'CV_GAUSSIAN_5x5', []]],
    '']
parseName: cvCreatePyramid with ['', 'cv'] -> fullname:cvCreatePyramid namespace: classpath: classname: name:cvCreatePyramid
Registering an unknown type: CvMat
Registering an unknown type: CvSize
register (function) cvCreatePyramid

--- Incoming ---
[   u'cvReleasePyramid',
    u'void',
    ['/NW'],
    [[u'CvMat***', u'pyramid', '', []], [u'int', u'extra_layers', '', []]],
    '']
parseName: cvReleasePyramid with ['', 'cv'] -> fullname:cvReleasePyramid namespace: classpath: classname: name:cvReleasePyramid
register (function) cvReleasePyramid

--- Incoming ---
[   u'cvPyrMeanShiftFiltering',
    u'void',
    ['/NW'],
    [   [u'const CvArr*', u'src', '', []],
        [u'CvArr*', u'dst', '', []],
        [u'double', u'sp', '', []],
        [u'double', u'sr', '', []],
        [u'int', u'max_level', u'1', []],
        [   u'CvTermCriteria',
            u'termcrit',
            u'cvTermCriteria(CV_TERMCRIT_ITER+CV_TERMCRIT_EPS,5,1)',
            []]],
    '']
parseName: cvPyrMeanShiftFiltering with ['', 'cv'] -> fullname:cvPyrMeanShiftFiltering namespace: classpath: classname: name:cvPyrMeanShiftFiltering
Registering an unknown type: CvTermCriteria
register (function) cvPyrMeanShiftFiltering

--- Incoming ---
[   u'cvWatershed',
    u'void',
    ['/NW'],
    [[u'const CvArr*', u'image', '', []], [u'CvArr*', u'markers', '', []]],
    '']
parseName: cvWatershed with ['', 'cv'] -> fullname:cvWatershed namespace: classpath: classname: name:cvWatershed
register (function) cvWatershed

--- Incoming ---
[   u'cvSobel',
    u'void',
    ['/NW'],
    [   [u'const CvArr*', u'src', '', []],
        [u'CvArr*', u'dst', '', []],
        [u'int', u'xorder', '', []],
        [u'int', u'yorder', '', []],
        [u'int', u'aperture_size', u'3', []]],
    '']
parseName: cvSobel with ['', 'cv'] -> fullname:cvSobel namespace: classpath: classname: name:cvSobel
register (function) cvSobel

--- Incoming ---
[   u'cvLaplace',
    u'void',
    ['/NW'],
    [   [u'const CvArr*', u'src', '', []],
        [u'CvArr*', u'dst', '', []],
        [u'int', u'aperture_size', u'3', []]],
    '']
parseName: cvLaplace with ['', 'cv'] -> fullname:cvLaplace namespace: classpath: classname: name:cvLaplace
register (function) cvLaplace

--- Incoming ---
[   u'cvCvtColor',
    u'void',
    ['/NW'],
    [   [u'const CvArr*', u'src', '', []],
        [u'CvArr*', u'dst', '', []],
        [u'int', u'code', '', []]],
    '']
parseName: cvCvtColor with ['', 'cv'] -> fullname:cvCvtColor namespace: classpath: classname: name:cvCvtColor
register (function) cvCvtColor

--- Incoming ---
[   u'cvResize',
    u'void',
    ['/NW'],
    [   [u'const CvArr*', u'src', '', []],
        [u'CvArr*', u'dst', '', []],
        [u'int', u'interpolation', u'CV_INTER_LINEAR', []]],
    '']
parseName: cvResize with ['', 'cv'] -> fullname:cvResize namespace: classpath: classname: name:cvResize
register (function) cvResize

--- Incoming ---
[   u'cvWarpAffine',
    u'void',
    ['/NW'],
    [   [u'const CvArr*', u'src', '', []],
        [u'CvArr*', u'dst', '', []],
        [u'const CvMat*', u'map_matrix', '', []],
        [u'int', u'flags', u'CV_INTER_LINEAR+CV_WARP_FILL_OUTLIERS', []],
        [u'CvScalar', u'fillval', u'cvScalarAll(0)', []]],
    '']
parseName: cvWarpAffine with ['', 'cv'] -> fullname:cvWarpAffine namespace: classpath: classname: name:cvWarpAffine
register (function) cvWarpAffine

--- Incoming ---
[   u'cvGetAffineTransform',
    u'CvMat*',
    ['/NW'],
    [   [u'const CvPoint2D32f *', u'src', '', []],
        [u'const CvPoint2D32f *', u'dst', '', []],
        [u'CvMat *', u'map_matrix', '', []]],
    '']
parseName: cvGetAffineTransform with ['', 'cv'] -> fullname:cvGetAffineTransform namespace: classpath: classname: name:cvGetAffineTransform
Registering an unknown type: CvPoint2D32f
Registering an unknown type: CvMat
register (function) cvGetAffineTransform

--- Incoming ---
[   u'cv2DRotationMatrix',
    u'CvMat*',
    ['/NW'],
    [   [u'CvPoint2D32f', u'center', '', []],
        [u'double', u'angle', '', []],
        [u'double', u'scale', '', []],
        [u'CvMat*', u'map_matrix', '', []]],
    '']
parseName: cv2DRotationMatrix with ['', 'cv'] -> fullname:cv2DRotationMatrix namespace: classpath: classname: name:cv2DRotationMatrix
Registering an unknown type: CvPoint2D32f
register (function) cv2DRotationMatrix

--- Incoming ---
[   u'cvWarpPerspective',
    u'void',
    ['/NW'],
    [   [u'const CvArr*', u'src', '', []],
        [u'CvArr*', u'dst', '', []],
        [u'const CvMat*', u'map_matrix', '', []],
        [u'int', u'flags', u'CV_INTER_LINEAR+CV_WARP_FILL_OUTLIERS', []],
        [u'CvScalar', u'fillval', u'cvScalarAll(0)', []]],
    '']
parseName: cvWarpPerspective with ['', 'cv'] -> fullname:cvWarpPerspective namespace: classpath: classname: name:cvWarpPerspective
register (function) cvWarpPerspective

--- Incoming ---
[   u'cvGetPerspectiveTransform',
    u'CvMat*',
    ['/NW'],
    [   [u'const CvPoint2D32f*', u'src', '', []],
        [u'const CvPoint2D32f*', u'dst', '', []],
        [u'CvMat*', u'map_matrix', '', []]],
    '']
parseName: cvGetPerspectiveTransform with ['', 'cv'] -> fullname:cvGetPerspectiveTransform namespace: classpath: classname: name:cvGetPerspectiveTransform
Registering an unknown type: CvPoint2D32f
register (function) cvGetPerspectiveTransform

--- Incoming ---
[   u'cvRemap',
    u'void',
    ['/NW'],
    [   [u'const CvArr*', u'src', '', []],
        [u'CvArr*', u'dst', '', []],
        [u'const CvArr*', u'mapx', '', []],
        [u'const CvArr*', u'mapy', '', []],
        [u'int', u'flags', u'CV_INTER_LINEAR+CV_WARP_FILL_OUTLIERS', []],
        [u'CvScalar', u'fillval', u'cvScalarAll(0)', []]],
    '']
parseName: cvRemap with ['', 'cv'] -> fullname:cvRemap namespace: classpath: classname: name:cvRemap
register (function) cvRemap

--- Incoming ---
[   u'cvConvertMaps',
    u'void',
    ['/NW'],
    [   [u'const CvArr*', u'mapx', '', []],
        [u'const CvArr*', u'mapy', '', []],
        [u'CvArr*', u'mapxy', '', []],
        [u'CvArr*', u'mapalpha', '', []]],
    '']
parseName: cvConvertMaps with ['', 'cv'] -> fullname:cvConvertMaps namespace: classpath: classname: name:cvConvertMaps
register (function) cvConvertMaps

--- Incoming ---
[   u'cvLogPolar',
    u'void',
    ['/NW'],
    [   [u'const CvArr*', u'src', '', []],
        [u'CvArr*', u'dst', '', []],
        [u'CvPoint2D32f', u'center', '', []],
        [u'double', u'M', '', []],
        [u'int', u'flags', u'CV_INTER_LINEAR+CV_WARP_FILL_OUTLIERS', []]],
    '']
parseName: cvLogPolar with ['', 'cv'] -> fullname:cvLogPolar namespace: classpath: classname: name:cvLogPolar
register (function) cvLogPolar

--- Incoming ---
[   u'cvLinearPolar',
    u'void',
    ['/NW'],
    [   [u'const CvArr*', u'src', '', []],
        [u'CvArr*', u'dst', '', []],
        [u'CvPoint2D32f', u'center', '', []],
        [u'double', u'maxRadius', '', []],
        [u'int', u'flags', u'CV_INTER_LINEAR+CV_WARP_FILL_OUTLIERS', []]],
    '']
parseName: cvLinearPolar with ['', 'cv'] -> fullname:cvLinearPolar namespace: classpath: classname: name:cvLinearPolar
register (function) cvLinearPolar

--- Incoming ---
[   u'cvUndistort2',
    u'void',
    ['/NW'],
    [   [u'const CvArr*', u'src', '', []],
        [u'CvArr*', u'dst', '', []],
        [u'const CvMat*', u'camera_matrix', '', []],
        [u'const CvMat*', u'distortion_coeffs', '', []],
        [u'const CvMat*', u'new_camera_matrix', u'0', []]],
    '']
parseName: cvUndistort2 with ['', 'cv'] -> fullname:cvUndistort2 namespace: classpath: classname: name:cvUndistort2
register (function) cvUndistort2

--- Incoming ---
[   u'cvInitUndistortMap',
    u'void',
    ['/NW'],
    [   [u'const CvMat*', u'camera_matrix', '', []],
        [u'const CvMat*', u'distortion_coeffs', '', []],
        [u'CvArr*', u'mapx', '', []],
        [u'CvArr*', u'mapy', '', []]],
    '']
parseName: cvInitUndistortMap with ['', 'cv'] -> fullname:cvInitUndistortMap namespace: classpath: classname: name:cvInitUndistortMap
register (function) cvInitUndistortMap

--- Incoming ---
[   u'cvInitUndistortRectifyMap',
    u'void',
    ['/NW'],
    [   [u'const CvMat*', u'camera_matrix', '', []],
        [u'const CvMat*', u'dist_coeffs', '', []],
        [u'const CvMat *', u'R', '', []],
        [u'const CvMat*', u'new_camera_matrix', '', []],
        [u'CvArr*', u'mapx', '', []],
        [u'CvArr*', u'mapy', '', []]],
    '']
parseName: cvInitUndistortRectifyMap with ['', 'cv'] -> fullname:cvInitUndistortRectifyMap namespace: classpath: classname: name:cvInitUndistortRectifyMap
Registering an unknown type: CvMat
register (function) cvInitUndistortRectifyMap

--- Incoming ---
[   u'cvUndistortPoints',
    u'void',
    ['/NW'],
    [   [u'const CvMat*', u'src', '', []],
        [u'CvMat*', u'dst', '', []],
        [u'const CvMat*', u'camera_matrix', '', []],
        [u'const CvMat*', u'dist_coeffs', '', []],
        [u'const CvMat*', u'R', u'0', []],
        [u'const CvMat*', u'P', u'0', []]],
    '']
parseName: cvUndistortPoints with ['', 'cv'] -> fullname:cvUndistortPoints namespace: classpath: classname: name:cvUndistortPoints
register (function) cvUndistortPoints

--- Incoming ---
[   u'cvCreateStructuringElementEx',
    u'IplConvKernel*',
    ['/NW'],
    [   [u'int', u'cols', '', []],
        [u'int', u'rows', '', []],
        [u'int', u'anchor_x', '', []],
        [u'int', u'anchor_y', '', []],
        [u'int', u'shape', '', []],
        [u'int*', u'values', u'NULL', []]],
    '']
parseName: cvCreateStructuringElementEx with ['', 'cv'] -> fullname:cvCreateStructuringElementEx namespace: classpath: classname: name:cvCreateStructuringElementEx
Registering an unknown type: IplConvKernel
register (function) cvCreateStructuringElementEx

--- Incoming ---
[   u'cvReleaseStructuringElement',
    u'void',
    ['/NW'],
    [[u'IplConvKernel**', u'element', '', []]],
    '']
parseName: cvReleaseStructuringElement with ['', 'cv'] -> fullname:cvReleaseStructuringElement namespace: classpath: classname: name:cvReleaseStructuringElement
register (function) cvReleaseStructuringElement

--- Incoming ---
[   u'cvErode',
    u'void',
    ['/NW'],
    [   [u'const CvArr*', u'src', '', []],
        [u'CvArr*', u'dst', '', []],
        [u'IplConvKernel*', u'element', u'NULL', []],
        [u'int', u'iterations', u'1', []]],
    '']
parseName: cvErode with ['', 'cv'] -> fullname:cvErode namespace: classpath: classname: name:cvErode
register (function) cvErode

--- Incoming ---
[   u'cvDilate',
    u'void',
    ['/NW'],
    [   [u'const CvArr*', u'src', '', []],
        [u'CvArr*', u'dst', '', []],
        [u'IplConvKernel*', u'element', u'NULL', []],
        [u'int', u'iterations', u'1', []]],
    '']
parseName: cvDilate with ['', 'cv'] -> fullname:cvDilate namespace: classpath: classname: name:cvDilate
register (function) cvDilate

--- Incoming ---
[   u'cvMorphologyEx',
    u'void',
    ['/NW'],
    [   [u'const CvArr*', u'src', '', []],
        [u'CvArr*', u'dst', '', []],
        [u'CvArr*', u'temp', '', []],
        [u'IplConvKernel*', u'element', '', []],
        [u'int', u'operation', '', []],
        [u'int', u'iterations', u'1', []]],
    '']
parseName: cvMorphologyEx with ['', 'cv'] -> fullname:cvMorphologyEx namespace: classpath: classname: name:cvMorphologyEx
register (function) cvMorphologyEx

--- Incoming ---
[   u'cvMoments',
    u'void',
    ['/NW'],
    [   [u'const CvArr*', u'arr', '', []],
        [u'CvMoments*', u'moments', '', []],
        [u'int', u'binary', u'0', []]],
    '']
parseName: cvMoments with ['', 'cv'] -> fullname:cvMoments namespace: classpath: classname: name:cvMoments
register (function) cvMoments

--- Incoming ---
[   u'cvGetSpatialMoment',
    u'double',
    ['/NW'],
    [   [u'CvMoments*', u'moments', '', []],
        [u'int', u'x_order', '', []],
        [u'int', u'y_order', '', []]],
    '']
parseName: cvGetSpatialMoment with ['', 'cv'] -> fullname:cvGetSpatialMoment namespace: classpath: classname: name:cvGetSpatialMoment
register (function) cvGetSpatialMoment

--- Incoming ---
[   u'cvGetCentralMoment',
    u'double',
    ['/NW'],
    [   [u'CvMoments*', u'moments', '', []],
        [u'int', u'x_order', '', []],
        [u'int', u'y_order', '', []]],
    '']
parseName: cvGetCentralMoment with ['', 'cv'] -> fullname:cvGetCentralMoment namespace: classpath: classname: name:cvGetCentralMoment
register (function) cvGetCentralMoment

--- Incoming ---
[   u'cvGetNormalizedCentralMoment',
    u'double',
    ['/NW'],
    [   [u'CvMoments*', u'moments', '', []],
        [u'int', u'x_order', '', []],
        [u'int', u'y_order', '', []]],
    '']
parseName: cvGetNormalizedCentralMoment with ['', 'cv'] -> fullname:cvGetNormalizedCentralMoment namespace: classpath: classname: name:cvGetNormalizedCentralMoment
register (function) cvGetNormalizedCentralMoment

--- Incoming ---
[   u'cvGetHuMoments',
    u'void',
    ['/NW'],
    [   [u'CvMoments*', u'moments', '', []],
        [u'CvHuMoments*', u'hu_moments', '', []]],
    '']
parseName: cvGetHuMoments with ['', 'cv'] -> fullname:cvGetHuMoments namespace: classpath: classname: name:cvGetHuMoments
register (function) cvGetHuMoments

--- Incoming ---
[   u'cvSampleLine',
    u'int',
    ['/NW'],
    [   [u'const CvArr*', u'image', '', []],
        [u'CvPoint', u'pt1', '', []],
        [u'CvPoint', u'pt2', '', []],
        [u'void*', u'buffer', '', []],
        [u'int', u'connectivity', u'8', []]],
    '']
parseName: cvSampleLine with ['', 'cv'] -> fullname:cvSampleLine namespace: classpath: classname: name:cvSampleLine
register (function) cvSampleLine

--- Incoming ---
[   u'cvGetRectSubPix',
    u'void',
    ['/NW'],
    [   [u'const CvArr*', u'src', '', []],
        [u'CvArr*', u'dst', '', []],
        [u'CvPoint2D32f', u'center', '', []]],
    '']
parseName: cvGetRectSubPix with ['', 'cv'] -> fullname:cvGetRectSubPix namespace: classpath: classname: name:cvGetRectSubPix
register (function) cvGetRectSubPix

--- Incoming ---
[   u'cvGetQuadrangleSubPix',
    u'void',
    ['/NW'],
    [   [u'const CvArr*', u'src', '', []],
        [u'CvArr*', u'dst', '', []],
        [u'const CvMat*', u'map_matrix', '', []]],
    '']
parseName: cvGetQuadrangleSubPix with ['', 'cv'] -> fullname:cvGetQuadrangleSubPix namespace: classpath: classname: name:cvGetQuadrangleSubPix
register (function) cvGetQuadrangleSubPix

--- Incoming ---
[   u'cvMatchTemplate',
    u'void',
    ['/NW'],
    [   [u'const CvArr*', u'image', '', []],
        [u'const CvArr*', u'templ', '', []],
        [u'CvArr*', u'result', '', []],
        [u'int', u'method', '', []]],
    '']
parseName: cvMatchTemplate with ['', 'cv'] -> fullname:cvMatchTemplate namespace: classpath: classname: name:cvMatchTemplate
register (function) cvMatchTemplate

--- Incoming ---
[   u'cvCalcEMD2',
    u'float',
    ['/NW'],
    [   [u'const CvArr*', u'signature1', '', []],
        [u'const CvArr*', u'signature2', '', []],
        [u'int', u'distance_type', '', []],
        [u'CvDistanceFunction', u'distance_func', u'NULL', []],
        [u'const CvArr*', u'cost_matrix', u'NULL', []],
        [u'CvArr*', u'flow', u'NULL', []],
        [u'float*', u'lower_bound', u'NULL', []],
        [u'void*', u'userdata', u'NULL', []]],
    '']
parseName: cvCalcEMD2 with ['', 'cv'] -> fullname:cvCalcEMD2 namespace: classpath: classname: name:cvCalcEMD2
Registering an unknown type: CvDistanceFunction
register (function) cvCalcEMD2

--- Incoming ---
[   u'cvFindContours',
    u'int',
    ['/NW'],
    [   [u'CvArr*', u'image', '', []],
        [u'CvMemStorage*', u'storage', '', []],
        [u'CvSeq**', u'first_contour', '', []],
        [u'int', u'header_size', u'sizeof(CvContour)', []],
        [u'int', u'mode', u'CV_RETR_LIST', []],
        [u'int', u'method', u'CV_CHAIN_APPROX_SIMPLE', []],
        [u'CvPoint', u'offset', u'cvPoint(0,0)', []]],
    '']
parseName: cvFindContours with ['', 'cv'] -> fullname:cvFindContours namespace: classpath: classname: name:cvFindContours
Registering an unknown type: CvMemStorage
Registering an unknown type: CvSeq
register (function) cvFindContours

--- Incoming ---
[   u'cvStartFindContours',
    u'CvContourScanner',
    ['/NW'],
    [   [u'CvArr*', u'image', '', []],
        [u'CvMemStorage*', u'storage', '', []],
        [u'int', u'header_size', u'sizeof(CvContour)', []],
        [u'int', u'mode', u'CV_RETR_LIST', []],
        [u'int', u'method', u'CV_CHAIN_APPROX_SIMPLE', []],
        [u'CvPoint', u'offset', u'cvPoint(0,0)', []]],
    '']
parseName: cvStartFindContours with ['', 'cv'] -> fullname:cvStartFindContours namespace: classpath: classname: name:cvStartFindContours
Registering an unknown type: CvContourScanner
register (function) cvStartFindContours

--- Incoming ---
[   u'cvFindNextContour',
    u'CvSeq*',
    ['/NW'],
    [[u'CvContourScanner', u'scanner', '', []]],
    '']
parseName: cvFindNextContour with ['', 'cv'] -> fullname:cvFindNextContour namespace: classpath: classname: name:cvFindNextContour
register (function) cvFindNextContour

--- Incoming ---
[   u'cvSubstituteContour',
    u'void',
    ['/NW'],
    [   [u'CvContourScanner', u'scanner', '', []],
        [u'CvSeq*', u'new_contour', '', []]],
    '']
parseName: cvSubstituteContour with ['', 'cv'] -> fullname:cvSubstituteContour namespace: classpath: classname: name:cvSubstituteContour
register (function) cvSubstituteContour

--- Incoming ---
[   u'cvEndFindContours',
    u'CvSeq*',
    ['/NW'],
    [[u'CvContourScanner*', u'scanner', '', []]],
    '']
parseName: cvEndFindContours with ['', 'cv'] -> fullname:cvEndFindContours namespace: classpath: classname: name:cvEndFindContours
register (function) cvEndFindContours

--- Incoming ---
[   u'cvApproxChains',
    u'CvSeq*',
    ['/NW'],
    [   [u'CvSeq*', u'src_seq', '', []],
        [u'CvMemStorage*', u'storage', '', []],
        [u'int', u'method', u'CV_CHAIN_APPROX_SIMPLE', []],
        [u'double', u'parameter', u'0', []],
        [u'int', u'minimal_perimeter', u'0', []],
        [u'int', u'recursive', u'0', []]],
    '']
parseName: cvApproxChains with ['', 'cv'] -> fullname:cvApproxChains namespace: classpath: classname: name:cvApproxChains
register (function) cvApproxChains

--- Incoming ---
[   u'cvStartReadChainPoints',
    u'void',
    ['/NW'],
    [   [u'CvChain*', u'chain', '', []],
        [u'CvChainPtReader*', u'reader', '', []]],
    '']
parseName: cvStartReadChainPoints with ['', 'cv'] -> fullname:cvStartReadChainPoints namespace: classpath: classname: name:cvStartReadChainPoints
Registering an unknown type: CvChain
register (function) cvStartReadChainPoints

--- Incoming ---
[   u'cvReadChainPoint',
    u'CvPoint',
    ['/NW'],
    [[u'CvChainPtReader*', u'reader', '', []]],
    '']
parseName: cvReadChainPoint with ['', 'cv'] -> fullname:cvReadChainPoint namespace: classpath: classname: name:cvReadChainPoint
register (function) cvReadChainPoint

--- Incoming ---
[   u'cvApproxPoly',
    u'CvSeq*',
    ['/NW'],
    [   [u'const void*', u'src_seq', '', []],
        [u'int', u'header_size', '', []],
        [u'CvMemStorage*', u'storage', '', []],
        [u'int', u'method', '', []],
        [u'double', u'eps', '', []],
        [u'int', u'recursive', u'0', []]],
    '']
parseName: cvApproxPoly with ['', 'cv'] -> fullname:cvApproxPoly namespace: classpath: classname: name:cvApproxPoly
register (function) cvApproxPoly

--- Incoming ---
[   u'cvArcLength',
    u'double',
    ['/NW'],
    [   [u'const void*', u'curve', '', []],
        [u'CvSlice', u'slice', u'CV_WHOLE_SEQ', []],
        [u'int', u'is_closed', u'-1', []]],
    '']
parseName: cvArcLength with ['', 'cv'] -> fullname:cvArcLength namespace: classpath: classname: name:cvArcLength
Registering an unknown type: CvSlice
register (function) cvArcLength

--- Incoming ---
[   u'cvContourPerimeter',
    u'double',
    ['/NW'],
    [[u'const void*', u'contour', '', []]],
    '']
parseName: cvContourPerimeter with ['', 'cv'] -> fullname:cvContourPerimeter namespace: classpath: classname: name:cvContourPerimeter
register (function) cvContourPerimeter

--- Incoming ---
[   u'cvBoundingRect',
    u'CvRect',
    ['/NW'],
    [[u'CvArr*', u'points', '', []], [u'int', u'update', u'0', []]],
    '']
parseName: cvBoundingRect with ['', 'cv'] -> fullname:cvBoundingRect namespace: classpath: classname: name:cvBoundingRect
Registering an unknown type: CvRect
register (function) cvBoundingRect

--- Incoming ---
[   u'cvContourArea',
    u'double',
    ['/NW'],
    [   [u'const CvArr*', u'contour', '', []],
        [u'CvSlice', u'slice', u'CV_WHOLE_SEQ', []],
        [u'int', u'oriented', u'0', []]],
    '']
parseName: cvContourArea with ['', 'cv'] -> fullname:cvContourArea namespace: classpath: classname: name:cvContourArea
register (function) cvContourArea

--- Incoming ---
[   u'cvMinAreaRect2',
    u'CvBox2D',
    ['/NW'],
    [   [u'const CvArr*', u'points', '', []],
        [u'CvMemStorage*', u'storage', u'NULL', []]],
    '']
parseName: cvMinAreaRect2 with ['', 'cv'] -> fullname:cvMinAreaRect2 namespace: classpath: classname: name:cvMinAreaRect2
Registering an unknown type: CvBox2D
register (function) cvMinAreaRect2

--- Incoming ---
[   u'cvMinEnclosingCircle',
    u'int',
    ['/NW'],
    [   [u'const CvArr*', u'points', '', []],
        [u'CvPoint2D32f*', u'center', '', []],
        [u'float*', u'radius', '', []]],
    '']
parseName: cvMinEnclosingCircle with ['', 'cv'] -> fullname:cvMinEnclosingCircle namespace: classpath: classname: name:cvMinEnclosingCircle
register (function) cvMinEnclosingCircle

--- Incoming ---
[   u'cvMatchShapes',
    u'double',
    ['/NW'],
    [   [u'const void*', u'object1', '', []],
        [u'const void*', u'object2', '', []],
        [u'int', u'method', '', []],
        [u'double', u'parameter', u'0', []]],
    '']
parseName: cvMatchShapes with ['', 'cv'] -> fullname:cvMatchShapes namespace: classpath: classname: name:cvMatchShapes
register (function) cvMatchShapes

--- Incoming ---
[   u'cvConvexHull2',
    u'CvSeq*',
    ['/NW'],
    [   [u'const CvArr*', u'input', '', []],
        [u'void*', u'hull_storage', u'NULL', []],
        [u'int', u'orientation', u'CV_CLOCKWISE', []],
        [u'int', u'return_points', u'0', []]],
    '']
parseName: cvConvexHull2 with ['', 'cv'] -> fullname:cvConvexHull2 namespace: classpath: classname: name:cvConvexHull2
register (function) cvConvexHull2

--- Incoming ---
[   u'cvCheckContourConvexity',
    u'int',
    ['/NW'],
    [[u'const CvArr*', u'contour', '', []]],
    '']
parseName: cvCheckContourConvexity with ['', 'cv'] -> fullname:cvCheckContourConvexity namespace: classpath: classname: name:cvCheckContourConvexity
register (function) cvCheckContourConvexity

--- Incoming ---
[   u'cvConvexityDefects',
    u'CvSeq*',
    ['/NW'],
    [   [u'const CvArr*', u'contour', '', []],
        [u'const CvArr*', u'convexhull', '', []],
        [u'CvMemStorage*', u'storage', u'NULL', []]],
    '']
parseName: cvConvexityDefects with ['', 'cv'] -> fullname:cvConvexityDefects namespace: classpath: classname: name:cvConvexityDefects
register (function) cvConvexityDefects

--- Incoming ---
[   u'cvFitEllipse2',
    u'CvBox2D',
    ['/NW'],
    [[u'const CvArr*', u'points', '', []]],
    '']
parseName: cvFitEllipse2 with ['', 'cv'] -> fullname:cvFitEllipse2 namespace: classpath: classname: name:cvFitEllipse2
register (function) cvFitEllipse2

--- Incoming ---
[   u'cvMaxRect',
    u'CvRect',
    ['/NW'],
    [   [u'const CvRect*', u'rect1', '', []],
        [u'const CvRect*', u'rect2', '', []]],
    '']
parseName: cvMaxRect with ['', 'cv'] -> fullname:cvMaxRect namespace: classpath: classname: name:cvMaxRect
Registering an unknown type: CvRect
register (function) cvMaxRect

--- Incoming ---
[   u'cvBoxPoints',
    u'void',
    ['/NW'],
    [[u'CvBox2D', u'box', '', []], [u'CvPoint2D32f[4]', u'pt', '', []]],
    '']
parseName: cvBoxPoints with ['', 'cv'] -> fullname:cvBoxPoints namespace: classpath: classname: name:cvBoxPoints
Registering an unknown type: CvPoint2D32f[4]
register (function) cvBoxPoints

--- Incoming ---
[   u'cvPointSeqFromMat',
    u'CvSeq*',
    ['/NW'],
    [   [u'int', u'seq_kind', '', []],
        [u'const CvArr*', u'mat', '', []],
        [u'CvContour*', u'contour_header', '', []],
        [u'CvSeqBlock*', u'block', '', []]],
    '']
parseName: cvPointSeqFromMat with ['', 'cv'] -> fullname:cvPointSeqFromMat namespace: classpath: classname: name:cvPointSeqFromMat
Registering an unknown type: CvContour
Registering an unknown type: CvSeqBlock
register (function) cvPointSeqFromMat

--- Incoming ---
[   u'cvPointPolygonTest',
    u'double',
    ['/NW'],
    [   [u'const CvArr*', u'contour', '', []],
        [u'CvPoint2D32f', u'pt', '', []],
        [u'int', u'measure_dist', '', []]],
    '']
parseName: cvPointPolygonTest with ['', 'cv'] -> fullname:cvPointPolygonTest namespace: classpath: classname: name:cvPointPolygonTest
register (function) cvPointPolygonTest

--- Incoming ---
[   u'cvCreateHist',
    u'CvHistogram*',
    ['/NW'],
    [   [u'int', u'dims', '', []],
        [u'int*', u'sizes', '', []],
        [u'int', u'type', '', []],
        [u'float**', u'ranges', u'NULL', []],
        [u'int', u'uniform', u'1', []]],
    '']
parseName: cvCreateHist with ['', 'cv'] -> fullname:cvCreateHist namespace: classpath: classname: name:cvCreateHist
Registering an unknown type: CvHistogram
register (function) cvCreateHist

--- Incoming ---
[   u'cvSetHistBinRanges',
    u'void',
    ['/NW'],
    [   [u'CvHistogram*', u'hist', '', []],
        [u'float**', u'ranges', '', []],
        [u'int', u'uniform', u'1', []]],
    '']
parseName: cvSetHistBinRanges with ['', 'cv'] -> fullname:cvSetHistBinRanges namespace: classpath: classname: name:cvSetHistBinRanges
register (function) cvSetHistBinRanges

--- Incoming ---
[   u'cvMakeHistHeaderForArray',
    u'CvHistogram*',
    ['/NW'],
    [   [u'int', u'dims', '', []],
        [u'int*', u'sizes', '', []],
        [u'CvHistogram*', u'hist', '', []],
        [u'float*', u'data', '', []],
        [u'float**', u'ranges', u'NULL', []],
        [u'int', u'uniform', u'1', []]],
    '']
parseName: cvMakeHistHeaderForArray with ['', 'cv'] -> fullname:cvMakeHistHeaderForArray namespace: classpath: classname: name:cvMakeHistHeaderForArray
register (function) cvMakeHistHeaderForArray

--- Incoming ---
[u'cvReleaseHist', u'void', ['/NW'], [[u'CvHistogram**', u'hist', '', []]], '']
parseName: cvReleaseHist with ['', 'cv'] -> fullname:cvReleaseHist namespace: classpath: classname: name:cvReleaseHist
register (function) cvReleaseHist

--- Incoming ---
[u'cvClearHist', u'void', ['/NW'], [[u'CvHistogram*', u'hist', '', []]], '']
parseName: cvClearHist with ['', 'cv'] -> fullname:cvClearHist namespace: classpath: classname: name:cvClearHist
register (function) cvClearHist

--- Incoming ---
[   u'cvGetMinMaxHistValue',
    u'void',
    ['/NW'],
    [   [u'const CvHistogram*', u'hist', '', []],
        [u'float*', u'min_value', '', []],
        [u'float*', u'max_value', '', []],
        [u'int*', u'min_idx', u'NULL', []],
        [u'int*', u'max_idx', u'NULL', []]],
    '']
parseName: cvGetMinMaxHistValue with ['', 'cv'] -> fullname:cvGetMinMaxHistValue namespace: classpath: classname: name:cvGetMinMaxHistValue
Registering an unknown type: CvHistogram
register (function) cvGetMinMaxHistValue

--- Incoming ---
[   u'cvNormalizeHist',
    u'void',
    ['/NW'],
    [[u'CvHistogram*', u'hist', '', []], [u'double', u'factor', '', []]],
    '']
parseName: cvNormalizeHist with ['', 'cv'] -> fullname:cvNormalizeHist namespace: classpath: classname: name:cvNormalizeHist
register (function) cvNormalizeHist

--- Incoming ---
[   u'cvThreshHist',
    u'void',
    ['/NW'],
    [[u'CvHistogram*', u'hist', '', []], [u'double', u'threshold', '', []]],
    '']
parseName: cvThreshHist with ['', 'cv'] -> fullname:cvThreshHist namespace: classpath: classname: name:cvThreshHist
register (function) cvThreshHist

--- Incoming ---
[   u'cvCompareHist',
    u'double',
    ['/NW'],
    [   [u'const CvHistogram*', u'hist1', '', []],
        [u'const CvHistogram*', u'hist2', '', []],
        [u'int', u'method', '', []]],
    '']
parseName: cvCompareHist with ['', 'cv'] -> fullname:cvCompareHist namespace: classpath: classname: name:cvCompareHist
register (function) cvCompareHist

--- Incoming ---
[   u'cvCopyHist',
    u'void',
    ['/NW'],
    [   [u'const CvHistogram*', u'src', '', []],
        [u'CvHistogram**', u'dst', '', []]],
    '']
parseName: cvCopyHist with ['', 'cv'] -> fullname:cvCopyHist namespace: classpath: classname: name:cvCopyHist
register (function) cvCopyHist

--- Incoming ---
[   u'cvCalcBayesianProb',
    u'void',
    ['/NW'],
    [   [u'CvHistogram**', u'src', '', []],
        [u'int', u'number', '', []],
        [u'CvHistogram**', u'dst', '', []]],
    '']
parseName: cvCalcBayesianProb with ['', 'cv'] -> fullname:cvCalcBayesianProb namespace: classpath: classname: name:cvCalcBayesianProb
register (function) cvCalcBayesianProb

--- Incoming ---
[   u'cvCalcArrHist',
    u'void',
    ['/NW'],
    [   [u'CvArr**', u'arr', '', []],
        [u'CvHistogram*', u'hist', '', []],
        [u'int', u'accumulate', u'0', []],
        [u'const CvArr*', u'mask', u'NULL', []]],
    '']
parseName: cvCalcArrHist with ['', 'cv'] -> fullname:cvCalcArrHist namespace: classpath: classname: name:cvCalcArrHist
register (function) cvCalcArrHist

--- Incoming ---
[   u'cvCalcHist',
    u'void',
    ['/NW'],
    [   [u'IplImage**', u'image', '', []],
        [u'CvHistogram*', u'hist', '', []],
        [u'int', u'accumulate', u'0', []],
        [u'const CvArr*', u'mask', u'NULL', []]],
    '']
parseName: cvCalcHist with ['', 'cv'] -> fullname:cvCalcHist namespace: classpath: classname: name:cvCalcHist
Registering an unknown type: IplImage
register (function) cvCalcHist

--- Incoming ---
[   u'cvCalcArrBackProject',
    u'void',
    ['/NW'],
    [   [u'CvArr**', u'image', '', []],
        [u'CvArr*', u'dst', '', []],
        [u'const CvHistogram*', u'hist', '', []]],
    '']
parseName: cvCalcArrBackProject with ['', 'cv'] -> fullname:cvCalcArrBackProject namespace: classpath: classname: name:cvCalcArrBackProject
register (function) cvCalcArrBackProject

--- Incoming ---
[   u'cvCalcArrBackProjectPatch',
    u'void',
    ['/NW'],
    [   [u'CvArr**', u'image', '', []],
        [u'CvArr*', u'dst', '', []],
        [u'CvSize', u'range', '', []],
        [u'CvHistogram*', u'hist', '', []],
        [u'int', u'method', '', []],
        [u'double', u'factor', '', []]],
    '']
parseName: cvCalcArrBackProjectPatch with ['', 'cv'] -> fullname:cvCalcArrBackProjectPatch namespace: classpath: classname: name:cvCalcArrBackProjectPatch
Registering an unknown type: CvSize
register (function) cvCalcArrBackProjectPatch

--- Incoming ---
[   u'cvCalcProbDensity',
    u'void',
    ['/NW'],
    [   [u'const CvHistogram*', u'hist1', '', []],
        [u'const CvHistogram*', u'hist2', '', []],
        [u'CvHistogram*', u'dst_hist', '', []],
        [u'double', u'scale', u'255', []]],
    '']
parseName: cvCalcProbDensity with ['', 'cv'] -> fullname:cvCalcProbDensity namespace: classpath: classname: name:cvCalcProbDensity
register (function) cvCalcProbDensity

--- Incoming ---
[   u'cvEqualizeHist',
    u'void',
    ['/NW'],
    [[u'const CvArr*', u'src', '', []], [u'CvArr*', u'dst', '', []]],
    '']
parseName: cvEqualizeHist with ['', 'cv'] -> fullname:cvEqualizeHist namespace: classpath: classname: name:cvEqualizeHist
register (function) cvEqualizeHist

--- Incoming ---
[   u'cvDistTransform',
    u'void',
    ['/NW'],
    [   [u'const CvArr*', u'src', '', []],
        [u'CvArr*', u'dst', '', []],
        [u'int', u'distance_type', u'CV_DIST_L2', []],
        [u'int', u'mask_size', u'3', []],
        [u'const float*', u'mask', u'NULL', []],
        [u'CvArr*', u'labels', u'NULL', []],
        [u'int', u'labelType', u'CV_DIST_LABEL_CCOMP', []]],
    '']
parseName: cvDistTransform with ['', 'cv'] -> fullname:cvDistTransform namespace: classpath: classname: name:cvDistTransform
register (function) cvDistTransform

--- Incoming ---
[   u'cvThreshold',
    u'double',
    ['/NW'],
    [   [u'const CvArr*', u'src', '', []],
        [u'CvArr*', u'dst', '', []],
        [u'double', u'threshold', '', []],
        [u'double', u'max_value', '', []],
        [u'int', u'threshold_type', '', []]],
    '']
parseName: cvThreshold with ['', 'cv'] -> fullname:cvThreshold namespace: classpath: classname: name:cvThreshold
register (function) cvThreshold

--- Incoming ---
[   u'cvAdaptiveThreshold',
    u'void',
    ['/NW'],
    [   [u'const CvArr*', u'src', '', []],
        [u'CvArr*', u'dst', '', []],
        [u'double', u'max_value', '', []],
        [u'int', u'adaptive_method', u'CV_ADAPTIVE_THRESH_MEAN_C', []],
        [u'int', u'threshold_type', u'CV_THRESH_BINARY', []],
        [u'int', u'block_size', u'3', []],
        [u'double', u'param1', u'5', []]],
    '']
parseName: cvAdaptiveThreshold with ['', 'cv'] -> fullname:cvAdaptiveThreshold namespace: classpath: classname: name:cvAdaptiveThreshold
register (function) cvAdaptiveThreshold

--- Incoming ---
[   u'cvFloodFill',
    u'void',
    ['/NW'],
    [   [u'CvArr*', u'image', '', []],
        [u'CvPoint', u'seed_point', '', []],
        [u'CvScalar', u'new_val', '', []],
        [u'CvScalar', u'lo_diff', u'cvScalarAll(0)', []],
        [u'CvScalar', u'up_diff', u'cvScalarAll(0)', []],
        [u'CvConnectedComp*', u'comp', u'NULL', []],
        [u'int', u'flags', u'4', []],
        [u'CvArr*', u'mask', u'NULL', []]],
    '']
parseName: cvFloodFill with ['', 'cv'] -> fullname:cvFloodFill namespace: classpath: classname: name:cvFloodFill
register (function) cvFloodFill

--- Incoming ---
[   u'cvCanny',
    u'void',
    ['/NW'],
    [   [u'const CvArr*', u'image', '', []],
        [u'CvArr*', u'edges', '', []],
        [u'double', u'threshold1', '', []],
        [u'double', u'threshold2', '', []],
        [u'int', u'aperture_size', u'3', []]],
    '']
parseName: cvCanny with ['', 'cv'] -> fullname:cvCanny namespace: classpath: classname: name:cvCanny
register (function) cvCanny

--- Incoming ---
[   u'cvPreCornerDetect',
    u'void',
    ['/NW'],
    [   [u'const CvArr*', u'image', '', []],
        [u'CvArr*', u'corners', '', []],
        [u'int', u'aperture_size', u'3', []]],
    '']
parseName: cvPreCornerDetect with ['', 'cv'] -> fullname:cvPreCornerDetect namespace: classpath: classname: name:cvPreCornerDetect
register (function) cvPreCornerDetect

--- Incoming ---
[   u'cvCornerEigenValsAndVecs',
    u'void',
    ['/NW'],
    [   [u'const CvArr*', u'image', '', []],
        [u'CvArr*', u'eigenvv', '', []],
        [u'int', u'block_size', '', []],
        [u'int', u'aperture_size', u'3', []]],
    '']
parseName: cvCornerEigenValsAndVecs with ['', 'cv'] -> fullname:cvCornerEigenValsAndVecs namespace: classpath: classname: name:cvCornerEigenValsAndVecs
register (function) cvCornerEigenValsAndVecs

--- Incoming ---
[   u'cvCornerMinEigenVal',
    u'void',
    ['/NW'],
    [   [u'const CvArr*', u'image', '', []],
        [u'CvArr*', u'eigenval', '', []],
        [u'int', u'block_size', '', []],
        [u'int', u'aperture_size', u'3', []]],
    '']
parseName: cvCornerMinEigenVal with ['', 'cv'] -> fullname:cvCornerMinEigenVal namespace: classpath: classname: name:cvCornerMinEigenVal
register (function) cvCornerMinEigenVal

--- Incoming ---
[   u'cvCornerHarris',
    u'void',
    ['/NW'],
    [   [u'const CvArr*', u'image', '', []],
        [u'CvArr*', u'harris_response', '', []],
        [u'int', u'block_size', '', []],
        [u'int', u'aperture_size', u'3', []],
        [u'double', u'k', u'0.04', []]],
    '']
parseName: cvCornerHarris with ['', 'cv'] -> fullname:cvCornerHarris namespace: classpath: classname: name:cvCornerHarris
register (function) cvCornerHarris

--- Incoming ---
[   u'cvFindCornerSubPix',
    u'void',
    ['/NW'],
    [   [u'const CvArr*', u'image', '', []],
        [u'CvPoint2D32f*', u'corners', '', []],
        [u'int', u'count', '', []],
        [u'CvSize', u'win', '', []],
        [u'CvSize', u'zero_zone', '', []],
        [u'CvTermCriteria', u'criteria', '', []]],
    '']
parseName: cvFindCornerSubPix with ['', 'cv'] -> fullname:cvFindCornerSubPix namespace: classpath: classname: name:cvFindCornerSubPix
register (function) cvFindCornerSubPix

--- Incoming ---
[   u'cvGoodFeaturesToTrack',
    u'void',
    ['/NW'],
    [   [u'const CvArr*', u'image', '', []],
        [u'CvArr*', u'eig_image', '', []],
        [u'CvArr*', u'temp_image', '', []],
        [u'CvPoint2D32f*', u'corners', '', []],
        [u'int*', u'corner_count', '', []],
        [u'double', u'quality_level', '', []],
        [u'double', u'min_distance', '', []],
        [u'const CvArr*', u'mask', u'NULL', []],
        [u'int', u'block_size', u'3', []],
        [u'int', u'use_harris', u'0', []],
        [u'double', u'k', u'0.04', []]],
    '']
parseName: cvGoodFeaturesToTrack with ['', 'cv'] -> fullname:cvGoodFeaturesToTrack namespace: classpath: classname: name:cvGoodFeaturesToTrack
register (function) cvGoodFeaturesToTrack

--- Incoming ---
[   u'cvHoughLines2',
    u'CvSeq*',
    ['/NW'],
    [   [u'CvArr*', u'image', '', []],
        [u'void*', u'line_storage', '', []],
        [u'int', u'method', '', []],
        [u'double', u'rho', '', []],
        [u'double', u'theta', '', []],
        [u'int', u'threshold', '', []],
        [u'double', u'param1', u'0', []],
        [u'double', u'param2', u'0', []]],
    '']
parseName: cvHoughLines2 with ['', 'cv'] -> fullname:cvHoughLines2 namespace: classpath: classname: name:cvHoughLines2
register (function) cvHoughLines2

--- Incoming ---
[   u'cvHoughCircles',
    u'CvSeq*',
    ['/NW'],
    [   [u'CvArr*', u'image', '', []],
        [u'void*', u'circle_storage', '', []],
        [u'int', u'method', '', []],
        [u'double', u'dp', '', []],
        [u'double', u'min_dist', '', []],
        [u'double', u'param1', u'100', []],
        [u'double', u'param2', u'100', []],
        [u'int', u'min_radius', u'0', []],
        [u'int', u'max_radius', u'0', []]],
    '']
parseName: cvHoughCircles with ['', 'cv'] -> fullname:cvHoughCircles namespace: classpath: classname: name:cvHoughCircles
register (function) cvHoughCircles

--- Incoming ---
[   u'cvFitLine',
    u'void',
    ['/NW'],
    [   [u'const CvArr*', u'points', '', []],
        [u'int', u'dist_type', '', []],
        [u'double', u'param', '', []],
        [u'double', u'reps', '', []],
        [u'double', u'aeps', '', []],
        [u'float*', u'line', '', []]],
    '']
parseName: cvFitLine with ['', 'cv'] -> fullname:cvFitLine namespace: classpath: classname: name:cvFitLine
register (function) cvFitLine


===== Header: /usr/include/opencv2/imgproc/imgproc.hpp =====
Namespaces: set(['', 'cv'])

--- Incoming ---
[u'const cv.BORDER_REPLICATE', u'IPL_BORDER_REPLICATE', [], []]
parseName: const cv.BORDER_REPLICATE with ['', 'cv'] -> fullname:cv::BORDER_REPLICATE namespace:cv classpath: classname: name:BORDER_REPLICATE

--- Incoming ---
[u'const cv.BORDER_CONSTANT', u'IPL_BORDER_CONSTANT', [], []]
parseName: const cv.BORDER_CONSTANT with ['', 'cv'] -> fullname:cv::BORDER_CONSTANT namespace:cv classpath: classname: name:BORDER_CONSTANT

--- Incoming ---
[u'const cv.BORDER_REFLECT', u'IPL_BORDER_REFLECT', [], []]
parseName: const cv.BORDER_REFLECT with ['', 'cv'] -> fullname:cv::BORDER_REFLECT namespace:cv classpath: classname: name:BORDER_REFLECT

--- Incoming ---
[u'const cv.BORDER_WRAP', u'IPL_BORDER_WRAP', [], []]
parseName: const cv.BORDER_WRAP with ['', 'cv'] -> fullname:cv::BORDER_WRAP namespace:cv classpath: classname: name:BORDER_WRAP

--- Incoming ---
[u'const cv.BORDER_REFLECT_101', u'IPL_BORDER_REFLECT_101', [], []]
parseName: const cv.BORDER_REFLECT_101 with ['', 'cv'] -> fullname:cv::BORDER_REFLECT_101 namespace:cv classpath: classname: name:BORDER_REFLECT_101

--- Incoming ---
[u'const cv.BORDER_REFLECT101', u'BORDER_REFLECT_101', [], []]
parseName: const cv.BORDER_REFLECT101 with ['', 'cv'] -> fullname:cv::BORDER_REFLECT101 namespace:cv classpath: classname: name:BORDER_REFLECT101

--- Incoming ---
[u'const cv.BORDER_TRANSPARENT', u'IPL_BORDER_TRANSPARENT', [], []]
parseName: const cv.BORDER_TRANSPARENT with ['', 'cv'] -> fullname:cv::BORDER_TRANSPARENT namespace:cv classpath: classname: name:BORDER_TRANSPARENT

--- Incoming ---
[u'const cv.BORDER_DEFAULT', u'BORDER_REFLECT_101', [], []]
parseName: const cv.BORDER_DEFAULT with ['', 'cv'] -> fullname:cv::BORDER_DEFAULT namespace:cv classpath: classname: name:BORDER_DEFAULT

--- Incoming ---
[u'const cv.BORDER_ISOLATED', u'16', [], []]
parseName: const cv.BORDER_ISOLATED with ['', 'cv'] -> fullname:cv::BORDER_ISOLATED namespace:cv classpath: classname: name:BORDER_ISOLATED

--- Incoming ---
[   u'cv.borderInterpolate',
    u'int',
    ['/NW'],
    [   [u'int', u'p', '', []],
        [u'int', u'len', '', []],
        [u'int', u'borderType', '', []]],
    u'1D interpolation function: returns coordinate of the "donor" pixel for the specified location p.\n']
parseName: cv.borderInterpolate with ['', 'cv'] -> fullname:cv::borderInterpolate namespace:cv classpath: classname: name:borderInterpolate
register (function) borderInterpolate

--- Incoming ---
[   u'class cv.BaseRowFilter',
    '',
    [],
    [],
    u'The Base Class for 1D or Row-wise Filters\n\nThis is the base class for linear or non-linear filters that process 1D data.\nIn particular, such filters are used for the "horizontal" filtering parts in separable filters.\n\nSeveral functions in OpenCV return Ptr<BaseRowFilter> for the specific types of filters,\nand those pointers can be used directly or within cv::FilterEngine.\n']
parseName: class cv.BaseRowFilter with ['', 'cv'] -> fullname:cv::BaseRowFilter namespace:cv classpath: classname: name:BaseRowFilter
register class cv::BaseRowFilter ([u'class cv.BaseRowFilter', '', [], [], u'The Base Class for 1D or Row-wise Filters\n\nThis is the base class for linear or non-linear filters that process 1D data.\nIn particular, such filters are used for the "horizontal" filtering parts in separable filters.\n\nSeveral functions in OpenCV return Ptr<BaseRowFilter> for the specific types of filters,\nand those pointers can be used directly or within cv::FilterEngine.\n']) [ignored]

--- Incoming ---
[   u'cv.BaseRowFilter.BaseRowFilter',
    u'',
    ['/NW'],
    [],
    u'the default constructor\n']
parseName: cv.BaseRowFilter.BaseRowFilter with ['', 'cv'] -> fullname:cv::BaseRowFilter::BaseRowFilter namespace:cv classpath:BaseRowFilter classname:BaseRowFilter name:BaseRowFilter
register (constructor) new in cv::BaseRowFilter

--- Incoming ---
[u'cv.BaseRowFilter.~BaseRowFilter', u'', ['/NW'], [], u'the destructor\n']
parseName: cv.BaseRowFilter.~BaseRowFilter with ['', 'cv'] -> fullname:cv::BaseRowFilter::~BaseRowFilter namespace:cv classpath:BaseRowFilter classname:BaseRowFilter name:~BaseRowFilter
ignore destructor (method) ~BaseRowFilter in cv::BaseRowFilter

--- Incoming ---
[   u'cv.BaseRowFilter.operator ()',
    u'void',
    ['/NW', '/A'],
    [   [u'const uchar*', u'src', '', []],
        [u'uchar*', u'dst', '', []],
        [u'int', u'width', '', []],
        [u'int', u'cn', '', []]],
    u'the filtering operator. Must be overridden in the derived classes. The horizontal border interpolation is done outside of the class.\n']
parseName: cv.BaseRowFilter.operator () with ['', 'cv'] -> fullname:cv::BaseRowFilter::operator () namespace:cv classpath:BaseRowFilter classname:BaseRowFilter name:operator ()
ignore (method) operator () in cv::BaseRowFilter

--- Incoming ---
[   u'class cv.BaseColumnFilter',
    '',
    [],
    [],
    u'The Base Class for Column-wise Filters\n\nThis is the base class for linear or non-linear filters that process columns of 2D arrays.\nSuch filters are used for the "vertical" filtering parts in separable filters.\n\nSeveral functions in OpenCV return Ptr<BaseColumnFilter> for the specific types of filters,\nand those pointers can be used directly or within cv::FilterEngine.\n\nUnlike cv::BaseRowFilter, cv::BaseColumnFilter may have some context information,\ni.e. box filter keeps the sliding sum of elements. To reset the state BaseColumnFilter::reset()\nmust be called (e.g. the method is called by cv::FilterEngine)\n']
parseName: class cv.BaseColumnFilter with ['', 'cv'] -> fullname:cv::BaseColumnFilter namespace:cv classpath: classname: name:BaseColumnFilter
register class cv::BaseColumnFilter ([u'class cv.BaseColumnFilter', '', [], [], u'The Base Class for Column-wise Filters\n\nThis is the base class for linear or non-linear filters that process columns of 2D arrays.\nSuch filters are used for the "vertical" filtering parts in separable filters.\n\nSeveral functions in OpenCV return Ptr<BaseColumnFilter> for the specific types of filters,\nand those pointers can be used directly or within cv::FilterEngine.\n\nUnlike cv::BaseRowFilter, cv::BaseColumnFilter may have some context information,\ni.e. box filter keeps the sliding sum of elements. To reset the state BaseColumnFilter::reset()\nmust be called (e.g. the method is called by cv::FilterEngine)\n']) [ignored]

--- Incoming ---
[   u'cv.BaseColumnFilter.BaseColumnFilter',
    u'',
    ['/NW'],
    [],
    u'the default constructor\n']
parseName: cv.BaseColumnFilter.BaseColumnFilter with ['', 'cv'] -> fullname:cv::BaseColumnFilter::BaseColumnFilter namespace:cv classpath:BaseColumnFilter classname:BaseColumnFilter name:BaseColumnFilter
register (constructor) new in cv::BaseColumnFilter

--- Incoming ---
[   u'cv.BaseColumnFilter.~BaseColumnFilter',
    u'',
    ['/NW'],
    [],
    u'the destructor\n']
parseName: cv.BaseColumnFilter.~BaseColumnFilter with ['', 'cv'] -> fullname:cv::BaseColumnFilter::~BaseColumnFilter namespace:cv classpath:BaseColumnFilter classname:BaseColumnFilter name:~BaseColumnFilter
ignore destructor (method) ~BaseColumnFilter in cv::BaseColumnFilter

--- Incoming ---
[   u'cv.BaseColumnFilter.operator ()',
    u'void',
    ['/NW', '/A'],
    [   [u'const uchar**', u'src', '', []],
        [u'uchar*', u'dst', '', []],
        [u'int', u'dststep', '', []],
        [u'int', u'dstcount', '', []],
        [u'int', u'width', '', []]],
    u'the filtering operator. Must be overridden in the derived classes. The vertical border interpolation is done outside of the class.\n']
parseName: cv.BaseColumnFilter.operator () with ['', 'cv'] -> fullname:cv::BaseColumnFilter::operator () namespace:cv classpath:BaseColumnFilter classname:BaseColumnFilter name:operator ()
ignore (method) operator () in cv::BaseColumnFilter

--- Incoming ---
[   u'cv.BaseColumnFilter.reset',
    u'void',
    ['/NW'],
    [],
    u'resets the internal buffers, if any\n']
parseName: cv.BaseColumnFilter.reset with ['', 'cv'] -> fullname:cv::BaseColumnFilter::reset namespace:cv classpath:BaseColumnFilter classname:BaseColumnFilter name:reset
register (method) reset in cv::BaseColumnFilter

--- Incoming ---
[   u'class cv.BaseFilter',
    '',
    [],
    [],
    u'The Base Class for Non-Separable 2D Filters.\n\nThis is the base class for linear or non-linear 2D filters.\n\nSeveral functions in OpenCV return Ptr<BaseFilter> for the specific types of filters,\nand those pointers can be used directly or within cv::FilterEngine.\n\nSimilar to cv::BaseColumnFilter, the class may have some context information,\nthat should be reset using BaseFilter::reset() method before processing the new array.\n']
parseName: class cv.BaseFilter with ['', 'cv'] -> fullname:cv::BaseFilter namespace:cv classpath: classname: name:BaseFilter
register class cv::BaseFilter ([u'class cv.BaseFilter', '', [], [], u'The Base Class for Non-Separable 2D Filters.\n\nThis is the base class for linear or non-linear 2D filters.\n\nSeveral functions in OpenCV return Ptr<BaseFilter> for the specific types of filters,\nand those pointers can be used directly or within cv::FilterEngine.\n\nSimilar to cv::BaseColumnFilter, the class may have some context information,\nthat should be reset using BaseFilter::reset() method before processing the new array.\n']) [ignored]

--- Incoming ---
[u'cv.BaseFilter.BaseFilter', u'', ['/NW'], [], u'the default constructor\n']
parseName: cv.BaseFilter.BaseFilter with ['', 'cv'] -> fullname:cv::BaseFilter::BaseFilter namespace:cv classpath:BaseFilter classname:BaseFilter name:BaseFilter
register (constructor) new in cv::BaseFilter

--- Incoming ---
[u'cv.BaseFilter.~BaseFilter', u'', ['/NW'], [], u'the destructor\n']
parseName: cv.BaseFilter.~BaseFilter with ['', 'cv'] -> fullname:cv::BaseFilter::~BaseFilter namespace:cv classpath:BaseFilter classname:BaseFilter name:~BaseFilter
ignore destructor (method) ~BaseFilter in cv::BaseFilter

--- Incoming ---
[   u'cv.BaseFilter.operator ()',
    u'void',
    ['/NW', '/A'],
    [   [u'const uchar**', u'src', '', []],
        [u'uchar*', u'dst', '', []],
        [u'int', u'dststep', '', []],
        [u'int', u'dstcount', '', []],
        [u'int', u'width', '', []],
        [u'int', u'cn', '', []]],
    u'the filtering operator. The horizontal and the vertical border interpolation is done outside of the class.\n']
parseName: cv.BaseFilter.operator () with ['', 'cv'] -> fullname:cv::BaseFilter::operator () namespace:cv classpath:BaseFilter classname:BaseFilter name:operator ()
ignore (method) operator () in cv::BaseFilter

--- Incoming ---
[   u'cv.BaseFilter.reset',
    u'void',
    ['/NW'],
    [],
    u'resets the internal buffers, if any\n']
parseName: cv.BaseFilter.reset with ['', 'cv'] -> fullname:cv::BaseFilter::reset namespace:cv classpath:BaseFilter classname:BaseFilter name:reset
register (method) reset in cv::BaseFilter

--- Incoming ---
[   u'class cv.FilterEngine',
    '',
    [],
    [],
    u'The Main Class for Image Filtering.\n\nThe class can be used to apply an arbitrary filtering operation to an image.\nIt contains all the necessary intermediate buffers, it computes extrapolated values\nof the "virtual" pixels outside of the image etc.\nPointers to the initialized cv::FilterEngine instances\nare returned by various OpenCV functions, such as cv::createSeparableLinearFilter(),\ncv::createLinearFilter(), cv::createGaussianFilter(), cv::createDerivFilter(),\ncv::createBoxFilter() and cv::createMorphologyFilter().\n\nUsing the class you can process large images by parts and build complex pipelines\nthat include filtering as some of the stages. If all you need is to apply some pre-defined\nfiltering operation, you may use cv::filter2D(), cv::erode(), cv::dilate() etc.\nfunctions that create FilterEngine internally.\n\nHere is the example on how to use the class to implement Laplacian operator, which is the sum of\nsecond-order derivatives. More complex variant for different types is implemented in cv::Laplacian().\n\n\\code\nvoid laplace_f(const Mat& src, Mat& dst)\n{\nCV_Assert( src.type() == CV_32F );\n// make sure the destination array has the proper size and type\ndst.create(src.size(), src.type());\n\n// get the derivative and smooth kernels for d2I/dx2.\n// for d2I/dy2 we could use the same kernels, just swapped\nMat kd, ks;\ngetSobelKernels( kd, ks, 2, 0, ksize, false, ktype );\n\n// let\'s process 10 source rows at once\nint DELTA = std::min(10, src.rows);\nPtr<FilterEngine> Fxx = createSeparableLinearFilter(src.type(),\ndst.type(), kd, ks, Point(-1,-1), 0, borderType, borderType, Scalar() );\nPtr<FilterEngine> Fyy = createSeparableLinearFilter(src.type(),\ndst.type(), ks, kd, Point(-1,-1), 0, borderType, borderType, Scalar() );\n\nint y = Fxx->start(src), dsty = 0, dy = 0;\nFyy->start(src);\nconst uchar* sptr = src.data + y*src.step;\n\n// allocate the buffers for the spatial image derivatives;\n// the buffers need to have more than DELTA rows, because at the\n// last iteration the output may take max(kd.rows-1,ks.rows-1)\n// rows more than the input.\nMat Ixx( DELTA + kd.rows - 1, src.cols, dst.type() );\nMat Iyy( DELTA + kd.rows - 1, src.cols, dst.type() );\n\n// inside the loop we always pass DELTA rows to the filter\n// (note that the "proceed" method takes care of possibe overflow, since\n// it was given the actual image height in the "start" method)\n// on output we can get:\n//  * < DELTA rows (the initial buffer accumulation stage)\n//  * = DELTA rows (settled state in the middle)\n//  * > DELTA rows (then the input image is over, but we generate\n//                  "virtual" rows using the border mode and filter them)\n// this variable number of output rows is dy.\n// dsty is the current output row.\n// sptr is the pointer to the first input row in the portion to process\nfor( ; dsty < dst.rows; sptr += DELTA*src.step, dsty += dy )\n{\nFxx->proceed( sptr, (int)src.step, DELTA, Ixx.data, (int)Ixx.step );\ndy = Fyy->proceed( sptr, (int)src.step, DELTA, d2y.data, (int)Iyy.step );\nif( dy > 0 )\n{\nMat dstripe = dst.rowRange(dsty, dsty + dy);\nadd(Ixx.rowRange(0, dy), Iyy.rowRange(0, dy), dstripe);\n}\n}\n}\n\\endcode\n']
parseName: class cv.FilterEngine with ['', 'cv'] -> fullname:cv::FilterEngine namespace:cv classpath: classname: name:FilterEngine
register class cv::FilterEngine ([u'class cv.FilterEngine', '', [], [], u'The Main Class for Image Filtering.\n\nThe class can be used to apply an arbitrary filtering operation to an image.\nIt contains all the necessary intermediate buffers, it computes extrapolated values\nof the "virtual" pixels outside of the image etc.\nPointers to the initialized cv::FilterEngine instances\nare returned by various OpenCV functions, such as cv::createSeparableLinearFilter(),\ncv::createLinearFilter(), cv::createGaussianFilter(), cv::createDerivFilter(),\ncv::createBoxFilter() and cv::createMorphologyFilter().\n\nUsing the class you can process large images by parts and build complex pipelines\nthat include filtering as some of the stages. If all you need is to apply some pre-defined\nfiltering operation, you may use cv::filter2D(), cv::erode(), cv::dilate() etc.\nfunctions that create FilterEngine internally.\n\nHere is the example on how to use the class to implement Laplacian operator, which is the sum of\nsecond-order derivatives. More complex variant for different types is implemented in cv::Laplacian().\n\n\\code\nvoid laplace_f(const Mat& src, Mat& dst)\n{\nCV_Assert( src.type() == CV_32F );\n// make sure the destination array has the proper size and type\ndst.create(src.size(), src.type());\n\n// get the derivative and smooth kernels for d2I/dx2.\n// for d2I/dy2 we could use the same kernels, just swapped\nMat kd, ks;\ngetSobelKernels( kd, ks, 2, 0, ksize, false, ktype );\n\n// let\'s process 10 source rows at once\nint DELTA = std::min(10, src.rows);\nPtr<FilterEngine> Fxx = createSeparableLinearFilter(src.type(),\ndst.type(), kd, ks, Point(-1,-1), 0, borderType, borderType, Scalar() );\nPtr<FilterEngine> Fyy = createSeparableLinearFilter(src.type(),\ndst.type(), ks, kd, Point(-1,-1), 0, borderType, borderType, Scalar() );\n\nint y = Fxx->start(src), dsty = 0, dy = 0;\nFyy->start(src);\nconst uchar* sptr = src.data + y*src.step;\n\n// allocate the buffers for the spatial image derivatives;\n// the buffers need to have more than DELTA rows, because at the\n// last iteration the output may take max(kd.rows-1,ks.rows-1)\n// rows more than the input.\nMat Ixx( DELTA + kd.rows - 1, src.cols, dst.type() );\nMat Iyy( DELTA + kd.rows - 1, src.cols, dst.type() );\n\n// inside the loop we always pass DELTA rows to the filter\n// (note that the "proceed" method takes care of possibe overflow, since\n// it was given the actual image height in the "start" method)\n// on output we can get:\n//  * < DELTA rows (the initial buffer accumulation stage)\n//  * = DELTA rows (settled state in the middle)\n//  * > DELTA rows (then the input image is over, but we generate\n//                  "virtual" rows using the border mode and filter them)\n// this variable number of output rows is dy.\n// dsty is the current output row.\n// sptr is the pointer to the first input row in the portion to process\nfor( ; dsty < dst.rows; sptr += DELTA*src.step, dsty += dy )\n{\nFxx->proceed( sptr, (int)src.step, DELTA, Ixx.data, (int)Ixx.step );\ndy = Fyy->proceed( sptr, (int)src.step, DELTA, d2y.data, (int)Iyy.step );\nif( dy > 0 )\n{\nMat dstripe = dst.rowRange(dsty, dsty + dy);\nadd(Ixx.rowRange(0, dy), Iyy.rowRange(0, dy), dstripe);\n}\n}\n}\n\\endcode\n'])

--- Incoming ---
[   u'cv.FilterEngine.FilterEngine',
    u'',
    ['/NW'],
    [],
    u'the default constructor\n']
parseName: cv.FilterEngine.FilterEngine with ['', 'cv'] -> fullname:cv::FilterEngine::FilterEngine namespace:cv classpath:FilterEngine classname:FilterEngine name:FilterEngine
register (constructor) new in cv::FilterEngine

--- Incoming ---
[   u'cv.FilterEngine.FilterEngine',
    u'',
    ['/NW'],
    [   [u'const Ptr<BaseFilter>&', u'_filter2D', '', []],
        [u'const Ptr<BaseRowFilter>&', u'_rowFilter', '', []],
        [u'const Ptr<BaseColumnFilter>&', u'_columnFilter', '', []],
        [u'int', u'srcType', '', []],
        [u'int', u'dstType', '', []],
        [u'int', u'bufType', '', []],
        [u'int', u'_rowBorderType', u'BORDER_REPLICATE', []],
        [u'int', u'_columnBorderType', u'-1', []],
        [u'const Scalar&', u'_borderValue', u'Scalar()', []]],
    u'the full constructor. Either _filter2D or both _rowFilter and _columnFilter must be non-empty.\n']
parseName: cv.FilterEngine.FilterEngine with ['', 'cv'] -> fullname:cv::FilterEngine::FilterEngine namespace:cv classpath:FilterEngine classname:FilterEngine name:FilterEngine
register (constructor) new in cv::FilterEngine

--- Incoming ---
[u'cv.FilterEngine.~FilterEngine', u'', ['/NW'], [], u'the destructor\n']
parseName: cv.FilterEngine.~FilterEngine with ['', 'cv'] -> fullname:cv::FilterEngine::~FilterEngine namespace:cv classpath:FilterEngine classname:FilterEngine name:~FilterEngine
ignore destructor (method) ~FilterEngine in cv::FilterEngine

--- Incoming ---
[   u'cv.FilterEngine.init',
    u'void',
    ['/NW'],
    [   [u'const Ptr<BaseFilter>&', u'_filter2D', '', []],
        [u'const Ptr<BaseRowFilter>&', u'_rowFilter', '', []],
        [u'const Ptr<BaseColumnFilter>&', u'_columnFilter', '', []],
        [u'int', u'srcType', '', []],
        [u'int', u'dstType', '', []],
        [u'int', u'bufType', '', []],
        [u'int', u'_rowBorderType', u'BORDER_REPLICATE', []],
        [u'int', u'_columnBorderType', u'-1', []],
        [u'const Scalar&', u'_borderValue', u'Scalar()', []]],
    u'reinitializes the engine. The previously assigned filters are released.\n']
parseName: cv.FilterEngine.init with ['', 'cv'] -> fullname:cv::FilterEngine::init namespace:cv classpath:FilterEngine classname:FilterEngine name:init
register (method) init in cv::FilterEngine

--- Incoming ---
[   u'cv.FilterEngine.start',
    u'int',
    ['/NW'],
    [   [u'Size', u'wholeSize', '', []],
        [u'Rect', u'roi', '', []],
        [u'int', u'maxBufRows', u'-1', []]],
    u'starts filtering of the specified ROI of an image of size wholeSize.\n']
parseName: cv.FilterEngine.start with ['', 'cv'] -> fullname:cv::FilterEngine::start namespace:cv classpath:FilterEngine classname:FilterEngine name:start
register (method) start in cv::FilterEngine

--- Incoming ---
[   u'cv.FilterEngine.start',
    u'int',
    ['/NW'],
    [   [u'const Mat&', u'src', '', []],
        [u'const Rect&', u'srcRoi', u'Rect(0,0,-1,-1)', []],
        [u'bool', u'isolated', u'false', []],
        [u'int', u'maxBufRows', u'-1', []]],
    u'starts filtering of the specified ROI of the specified image.\n']
parseName: cv.FilterEngine.start with ['', 'cv'] -> fullname:cv::FilterEngine::start namespace:cv classpath:FilterEngine classname:FilterEngine name:start
register (method) start in cv::FilterEngine

--- Incoming ---
[   u'cv.FilterEngine.proceed',
    u'int',
    ['/NW'],
    [   [u'const uchar*', u'src', '', []],
        [u'int', u'srcStep', '', []],
        [u'int', u'srcCount', '', []],
        [u'uchar*', u'dst', '', []],
        [u'int', u'dstStep', '', []]],
    u'processes the next srcCount rows of the image.\n']
parseName: cv.FilterEngine.proceed with ['', 'cv'] -> fullname:cv::FilterEngine::proceed namespace:cv classpath:FilterEngine classname:FilterEngine name:proceed
register (method) proceed in cv::FilterEngine

--- Incoming ---
[   u'cv.FilterEngine.apply',
    u'void',
    ['/NW'],
    [   [u'const Mat&', u'src', '', []],
        [u'Mat&', u'dst', '', []],
        [u'const Rect&', u'srcRoi', u'Rect(0,0,-1,-1)', []],
        [u'Point', u'dstOfs', u'Point(0,0)', []],
        [u'bool', u'isolated', u'false', []]],
    u'applies filter to the specified ROI of the image. if srcRoi=(0,0,-1,-1), the whole image is filtered.\n']
parseName: cv.FilterEngine.apply with ['', 'cv'] -> fullname:cv::FilterEngine::apply namespace:cv classpath:FilterEngine classname:FilterEngine name:apply
register (method) apply in cv::FilterEngine

--- Incoming ---
[   u'cv.FilterEngine.isSeparable',
    u'bool',
    ['/NW', '/C'],
    [],
    u'returns true if the filter is separable\n']
parseName: cv.FilterEngine.isSeparable with ['', 'cv'] -> fullname:cv::FilterEngine::isSeparable namespace:cv classpath:FilterEngine classname:FilterEngine name:isSeparable
register (method) isSeparable in cv::FilterEngine

--- Incoming ---
[   u'cv.FilterEngine.remainingInputRows',
    u'int',
    ['/NW', '/C'],
    [],
    u'returns the number\n']
parseName: cv.FilterEngine.remainingInputRows with ['', 'cv'] -> fullname:cv::FilterEngine::remainingInputRows namespace:cv classpath:FilterEngine classname:FilterEngine name:remainingInputRows
register (method) remainingInputRows in cv::FilterEngine

--- Incoming ---
[u'cv.FilterEngine.remainingOutputRows', u'int', ['/NW', '/C'], [], '']
parseName: cv.FilterEngine.remainingOutputRows with ['', 'cv'] -> fullname:cv::FilterEngine::remainingOutputRows namespace:cv classpath:FilterEngine classname:FilterEngine name:remainingOutputRows
register (method) remainingOutputRows in cv::FilterEngine

--- Incoming ---
[u'const cv.KERNEL_GENERAL', u'0', [], []]
parseName: const cv.KERNEL_GENERAL with ['', 'cv'] -> fullname:cv::KERNEL_GENERAL namespace:cv classpath: classname: name:KERNEL_GENERAL

--- Incoming ---
[u'const cv.KERNEL_SYMMETRICAL', u'1', [], []]
parseName: const cv.KERNEL_SYMMETRICAL with ['', 'cv'] -> fullname:cv::KERNEL_SYMMETRICAL namespace:cv classpath: classname: name:KERNEL_SYMMETRICAL

--- Incoming ---
[u'const cv.KERNEL_ASYMMETRICAL', u'2', [], []]
parseName: const cv.KERNEL_ASYMMETRICAL with ['', 'cv'] -> fullname:cv::KERNEL_ASYMMETRICAL namespace:cv classpath: classname: name:KERNEL_ASYMMETRICAL

--- Incoming ---
[u'const cv.KERNEL_SMOOTH', u'4', [], []]
parseName: const cv.KERNEL_SMOOTH with ['', 'cv'] -> fullname:cv::KERNEL_SMOOTH namespace:cv classpath: classname: name:KERNEL_SMOOTH

--- Incoming ---
[u'const cv.KERNEL_INTEGER', u'8', [], []]
parseName: const cv.KERNEL_INTEGER with ['', 'cv'] -> fullname:cv::KERNEL_INTEGER namespace:cv classpath: classname: name:KERNEL_INTEGER

--- Incoming ---
[   u'cv.getKernelType',
    u'int',
    ['/NW'],
    [[u'InputArray', u'kernel', '', []], [u'Point', u'anchor', '', []]],
    u'returns type (one of KERNEL_*) of 1D or 2D kernel specified by its coefficients.\n']
parseName: cv.getKernelType with ['', 'cv'] -> fullname:cv::getKernelType namespace:cv classpath: classname: name:getKernelType
register (function) getKernelType

--- Incoming ---
[   u'cv.getLinearRowFilter',
    u'Ptr<BaseRowFilter>',
    ['/NW'],
    [   [u'int', u'srcType', '', []],
        [u'int', u'bufType', '', []],
        [u'InputArray', u'kernel', '', []],
        [u'int', u'anchor', '', []],
        [u'int', u'symmetryType', '', []]],
    u'returns the primitive row filter with the specified kernel\n']
parseName: cv.getLinearRowFilter with ['', 'cv'] -> fullname:cv::getLinearRowFilter namespace:cv classpath: classname: name:getLinearRowFilter
register (function) getLinearRowFilter

--- Incoming ---
[   u'cv.getLinearColumnFilter',
    u'Ptr<BaseColumnFilter>',
    ['/NW'],
    [   [u'int', u'bufType', '', []],
        [u'int', u'dstType', '', []],
        [u'InputArray', u'kernel', '', []],
        [u'int', u'anchor', '', []],
        [u'int', u'symmetryType', '', []],
        [u'double', u'delta', u'0', []],
        [u'int', u'bits', u'0', []]],
    u'returns the primitive column filter with the specified kernel\n']
parseName: cv.getLinearColumnFilter with ['', 'cv'] -> fullname:cv::getLinearColumnFilter namespace:cv classpath: classname: name:getLinearColumnFilter
register (function) getLinearColumnFilter

--- Incoming ---
[   u'cv.getLinearFilter',
    u'Ptr<BaseFilter>',
    ['/NW'],
    [   [u'int', u'srcType', '', []],
        [u'int', u'dstType', '', []],
        [u'InputArray', u'kernel', '', []],
        [u'Point', u'anchor', u'Point(-1,-1)', []],
        [u'double', u'delta', u'0', []],
        [u'int', u'bits', u'0', []]],
    u'returns 2D filter with the specified kernel\n']
parseName: cv.getLinearFilter with ['', 'cv'] -> fullname:cv::getLinearFilter namespace:cv classpath: classname: name:getLinearFilter
register (function) getLinearFilter

--- Incoming ---
[   u'cv.createSeparableLinearFilter',
    u'Ptr<FilterEngine>',
    ['/NW'],
    [   [u'int', u'srcType', '', []],
        [u'int', u'dstType', '', []],
        [u'InputArray', u'rowKernel', '', []],
        [u'InputArray', u'columnKernel', '', []],
        [u'Point', u'anchor', u'Point(-1,-1)', []],
        [u'double', u'delta', u'0', []],
        [u'int', u'rowBorderType', u'BORDER_DEFAULT', []],
        [u'int', u'columnBorderType', u'-1', []],
        [u'const Scalar&', u'borderValue', u'Scalar()', []]],
    u'returns the separable linear filter engine\n']
parseName: cv.createSeparableLinearFilter with ['', 'cv'] -> fullname:cv::createSeparableLinearFilter namespace:cv classpath: classname: name:createSeparableLinearFilter
register (function) createSeparableLinearFilter

--- Incoming ---
[   u'cv.createLinearFilter',
    u'Ptr<FilterEngine>',
    ['/NW'],
    [   [u'int', u'srcType', '', []],
        [u'int', u'dstType', '', []],
        [u'InputArray', u'kernel', '', []],
        [u'Point', u'_anchor', u'Point(-1,-1)', []],
        [u'double', u'delta', u'0', []],
        [u'int', u'rowBorderType', u'BORDER_DEFAULT', []],
        [u'int', u'columnBorderType', u'-1', []],
        [u'const Scalar&', u'borderValue', u'Scalar()', []]],
    u'returns the non-separable linear filter engine\n']
parseName: cv.createLinearFilter with ['', 'cv'] -> fullname:cv::createLinearFilter namespace:cv classpath: classname: name:createLinearFilter
register (function) createLinearFilter

--- Incoming ---
[   u'cv.getGaussianKernel',
    u'Mat',
    ['/NW'],
    [   [u'int', u'ksize', '', []],
        [u'double', u'sigma', '', []],
        [u'int', u'ktype', u'CV_64F', []]],
    u'returns the Gaussian kernel with the specified parameters\n']
parseName: cv.getGaussianKernel with ['', 'cv'] -> fullname:cv::getGaussianKernel namespace:cv classpath: classname: name:getGaussianKernel
register (function) getGaussianKernel

--- Incoming ---
[   u'cv.createGaussianFilter',
    u'Ptr<FilterEngine>',
    ['/NW'],
    [   [u'int', u'type', '', []],
        [u'Size', u'ksize', '', []],
        [u'double', u'sigma1', '', []],
        [u'double', u'sigma2', u'0', []],
        [u'int', u'borderType', u'BORDER_DEFAULT', []]],
    u'returns the Gaussian filter engine\n']
parseName: cv.createGaussianFilter with ['', 'cv'] -> fullname:cv::createGaussianFilter namespace:cv classpath: classname: name:createGaussianFilter
register (function) createGaussianFilter

--- Incoming ---
[   u'cv.getDerivKernels',
    u'void',
    ['/NW'],
    [   [u'OutputArray', u'kx', '', []],
        [u'OutputArray', u'ky', '', []],
        [u'int', u'dx', '', []],
        [u'int', u'dy', '', []],
        [u'int', u'ksize', '', []],
        [u'bool', u'normalize', u'false', []],
        [u'int', u'ktype', u'CV_32F', []]],
    u'initializes kernels of the generalized Sobel operator\n']
parseName: cv.getDerivKernels with ['', 'cv'] -> fullname:cv::getDerivKernels namespace:cv classpath: classname: name:getDerivKernels
register (function) getDerivKernels

--- Incoming ---
[   u'cv.createDerivFilter',
    u'Ptr<FilterEngine>',
    ['/NW'],
    [   [u'int', u'srcType', '', []],
        [u'int', u'dstType', '', []],
        [u'int', u'dx', '', []],
        [u'int', u'dy', '', []],
        [u'int', u'ksize', '', []],
        [u'int', u'borderType', u'BORDER_DEFAULT', []]],
    u'returns filter engine for the generalized Sobel operator\n']
parseName: cv.createDerivFilter with ['', 'cv'] -> fullname:cv::createDerivFilter namespace:cv classpath: classname: name:createDerivFilter
register (function) createDerivFilter

--- Incoming ---
[   u'cv.getRowSumFilter',
    u'Ptr<BaseRowFilter>',
    ['/NW'],
    [   [u'int', u'srcType', '', []],
        [u'int', u'sumType', '', []],
        [u'int', u'ksize', '', []],
        [u'int', u'anchor', u'-1', []]],
    u'returns horizontal 1D box filter\n']
parseName: cv.getRowSumFilter with ['', 'cv'] -> fullname:cv::getRowSumFilter namespace:cv classpath: classname: name:getRowSumFilter
register (function) getRowSumFilter

--- Incoming ---
[   u'cv.getColumnSumFilter',
    u'Ptr<BaseColumnFilter>',
    ['/NW'],
    [   [u'int', u'sumType', '', []],
        [u'int', u'dstType', '', []],
        [u'int', u'ksize', '', []],
        [u'int', u'anchor', u'-1', []],
        [u'double', u'scale', u'1', []]],
    u'returns vertical 1D box filter\n']
parseName: cv.getColumnSumFilter with ['', 'cv'] -> fullname:cv::getColumnSumFilter namespace:cv classpath: classname: name:getColumnSumFilter
register (function) getColumnSumFilter

--- Incoming ---
[   u'cv.createBoxFilter',
    u'Ptr<FilterEngine>',
    ['/NW'],
    [   [u'int', u'srcType', '', []],
        [u'int', u'dstType', '', []],
        [u'Size', u'ksize', '', []],
        [u'Point', u'anchor', u'Point(-1,-1)', []],
        [u'bool', u'normalize', u'true', []],
        [u'int', u'borderType', u'BORDER_DEFAULT', []]],
    u'returns box filter engine\n']
parseName: cv.createBoxFilter with ['', 'cv'] -> fullname:cv::createBoxFilter namespace:cv classpath: classname: name:createBoxFilter
register (function) createBoxFilter

--- Incoming ---
[   u'cv.getGaborKernel',
    u'Mat',
    ['/NW'],
    [   [u'Size', u'ksize', '', []],
        [u'double', u'sigma', '', []],
        [u'double', u'theta', '', []],
        [u'double', u'lambd', '', []],
        [u'double', u'gamma', '', []],
        [u'double', u'psi', u'CV_PI*0.5', []],
        [u'int', u'ktype', u'CV_64F', []]],
    u'returns the Gabor kernel with the specified parameters\n']
parseName: cv.getGaborKernel with ['', 'cv'] -> fullname:cv::getGaborKernel namespace:cv classpath: classname: name:getGaborKernel
register (function) getGaborKernel

--- Incoming ---
[u'const cv.MORPH_ERODE', u'CV_MOP_ERODE', [], []]
parseName: const cv.MORPH_ERODE with ['', 'cv'] -> fullname:cv::MORPH_ERODE namespace:cv classpath: classname: name:MORPH_ERODE

--- Incoming ---
[u'const cv.MORPH_DILATE', u'CV_MOP_DILATE', [], []]
parseName: const cv.MORPH_DILATE with ['', 'cv'] -> fullname:cv::MORPH_DILATE namespace:cv classpath: classname: name:MORPH_DILATE

--- Incoming ---
[u'const cv.MORPH_OPEN', u'CV_MOP_OPEN', [], []]
parseName: const cv.MORPH_OPEN with ['', 'cv'] -> fullname:cv::MORPH_OPEN namespace:cv classpath: classname: name:MORPH_OPEN

--- Incoming ---
[u'const cv.MORPH_CLOSE', u'CV_MOP_CLOSE', [], []]
parseName: const cv.MORPH_CLOSE with ['', 'cv'] -> fullname:cv::MORPH_CLOSE namespace:cv classpath: classname: name:MORPH_CLOSE

--- Incoming ---
[u'const cv.MORPH_GRADIENT', u'CV_MOP_GRADIENT', [], []]
parseName: const cv.MORPH_GRADIENT with ['', 'cv'] -> fullname:cv::MORPH_GRADIENT namespace:cv classpath: classname: name:MORPH_GRADIENT

--- Incoming ---
[u'const cv.MORPH_TOPHAT', u'CV_MOP_TOPHAT', [], []]
parseName: const cv.MORPH_TOPHAT with ['', 'cv'] -> fullname:cv::MORPH_TOPHAT namespace:cv classpath: classname: name:MORPH_TOPHAT

--- Incoming ---
[u'const cv.MORPH_BLACKHAT', u'CV_MOP_BLACKHAT', [], []]
parseName: const cv.MORPH_BLACKHAT with ['', 'cv'] -> fullname:cv::MORPH_BLACKHAT namespace:cv classpath: classname: name:MORPH_BLACKHAT

--- Incoming ---
[u'const cv.MORPH_HITMISS', u'CV_MOP_BLACKHAT+1', [], []]
parseName: const cv.MORPH_HITMISS with ['', 'cv'] -> fullname:cv::MORPH_HITMISS namespace:cv classpath: classname: name:MORPH_HITMISS

--- Incoming ---
[   u'cv.getMorphologyRowFilter',
    u'Ptr<BaseRowFilter>',
    ['/NW'],
    [   [u'int', u'op', '', []],
        [u'int', u'type', '', []],
        [u'int', u'ksize', '', []],
        [u'int', u'anchor', u'-1', []]],
    u'returns horizontal 1D morphological filter\n']
parseName: cv.getMorphologyRowFilter with ['', 'cv'] -> fullname:cv::getMorphologyRowFilter namespace:cv classpath: classname: name:getMorphologyRowFilter
register (function) getMorphologyRowFilter

--- Incoming ---
[   u'cv.getMorphologyColumnFilter',
    u'Ptr<BaseColumnFilter>',
    ['/NW'],
    [   [u'int', u'op', '', []],
        [u'int', u'type', '', []],
        [u'int', u'ksize', '', []],
        [u'int', u'anchor', u'-1', []]],
    u'returns vertical 1D morphological filter\n']
parseName: cv.getMorphologyColumnFilter with ['', 'cv'] -> fullname:cv::getMorphologyColumnFilter namespace:cv classpath: classname: name:getMorphologyColumnFilter
register (function) getMorphologyColumnFilter

--- Incoming ---
[   u'cv.getMorphologyFilter',
    u'Ptr<BaseFilter>',
    ['/NW'],
    [   [u'int', u'op', '', []],
        [u'int', u'type', '', []],
        [u'InputArray', u'kernel', '', []],
        [u'Point', u'anchor', u'Point(-1,-1)', []]],
    u'returns 2D morphological filter\n']
parseName: cv.getMorphologyFilter with ['', 'cv'] -> fullname:cv::getMorphologyFilter namespace:cv classpath: classname: name:getMorphologyFilter
register (function) getMorphologyFilter

--- Incoming ---
[   u'cv.morphologyDefaultBorderValue',
    u'Scalar',
    ['/NW'],
    [],
    u'returns "magic" border value for erosion and dilation. It is automatically transformed to Scalar::all(-DBL_MAX) for dilation.\n']
parseName: cv.morphologyDefaultBorderValue with ['', 'cv'] -> fullname:cv::morphologyDefaultBorderValue namespace:cv classpath: classname: name:morphologyDefaultBorderValue
register (function) morphologyDefaultBorderValue

--- Incoming ---
[   u'cv.createMorphologyFilter',
    u'Ptr<FilterEngine>',
    ['/NW'],
    [   [u'int', u'op', '', []],
        [u'int', u'type', '', []],
        [u'InputArray', u'kernel', '', []],
        [u'Point', u'anchor', u'Point(-1,-1)', []],
        [u'int', u'rowBorderType', u'BORDER_CONSTANT', []],
        [u'int', u'columnBorderType', u'-1', []],
        [   u'const Scalar&',
            u'borderValue',
            u'morphologyDefaultBorderValue()',
            []]],
    u'returns morphological filter engine. Only MORPH_ERODE and MORPH_DILATE are supported.\n']
parseName: cv.createMorphologyFilter with ['', 'cv'] -> fullname:cv::createMorphologyFilter namespace:cv classpath: classname: name:createMorphologyFilter
register (function) createMorphologyFilter

--- Incoming ---
[u'const cv.MORPH_RECT', u'0', [], []]
parseName: const cv.MORPH_RECT with ['', 'cv'] -> fullname:cv::MORPH_RECT namespace:cv classpath: classname: name:MORPH_RECT

--- Incoming ---
[u'const cv.MORPH_CROSS', u'1', [], []]
parseName: const cv.MORPH_CROSS with ['', 'cv'] -> fullname:cv::MORPH_CROSS namespace:cv classpath: classname: name:MORPH_CROSS

--- Incoming ---
[u'const cv.MORPH_ELLIPSE', u'2', [], []]
parseName: const cv.MORPH_ELLIPSE with ['', 'cv'] -> fullname:cv::MORPH_ELLIPSE namespace:cv classpath: classname: name:MORPH_ELLIPSE

--- Incoming ---
[   u'cv.getStructuringElement',
    u'Mat',
    ['/NW'],
    [   [u'int', u'shape', '', []],
        [u'Size', u'ksize', '', []],
        [u'Point', u'anchor', u'Point(-1,-1)', []]],
    u'returns structuring element of the specified shape and size\n']
parseName: cv.getStructuringElement with ['', 'cv'] -> fullname:cv::getStructuringElement namespace:cv classpath: classname: name:getStructuringElement
register (function) getStructuringElement

--- Incoming ---
[   u'cv.copyMakeBorder',
    u'void',
    ['/NW'],
    [   [u'InputArray', u'src', '', []],
        [u'OutputArray', u'dst', '', []],
        [u'int', u'top', '', []],
        [u'int', u'bottom', '', []],
        [u'int', u'left', '', []],
        [u'int', u'right', '', []],
        [u'int', u'borderType', '', []],
        [u'const Scalar&', u'value', u'Scalar()', []]],
    u'copies 2D array to a larger destination array with extrapolation of the outer part of src using the specified border mode\n']
parseName: cv.copyMakeBorder with ['', 'cv'] -> fullname:cv::copyMakeBorder namespace:cv classpath: classname: name:copyMakeBorder
register (function) copyMakeBorder

--- Incoming ---
[   u'cv.medianBlur',
    u'void',
    ['/NW'],
    [   [u'InputArray', u'src', '', []],
        [u'OutputArray', u'dst', '', []],
        [u'int', u'ksize', '', []]],
    u'smooths the image using median filter.\n']
parseName: cv.medianBlur with ['', 'cv'] -> fullname:cv::medianBlur namespace:cv classpath: classname: name:medianBlur
register (function) medianBlur

--- Incoming ---
[   u'cv.GaussianBlur',
    u'void',
    ['/NW'],
    [   [u'InputArray', u'src', '', []],
        [u'OutputArray', u'dst', '', []],
        [u'Size', u'ksize', '', []],
        [u'double', u'sigmaX', '', []],
        [u'double', u'sigmaY', u'0', []],
        [u'int', u'borderType', u'BORDER_DEFAULT', []]],
    u'smooths the image using Gaussian filter.\n']
parseName: cv.GaussianBlur with ['', 'cv'] -> fullname:cv::GaussianBlur namespace:cv classpath: classname: name:GaussianBlur
register (function) GaussianBlur

--- Incoming ---
[   u'cv.bilateralFilter',
    u'void',
    ['/NW'],
    [   [u'InputArray', u'src', '', []],
        [u'OutputArray', u'dst', '', []],
        [u'int', u'd', '', []],
        [u'double', u'sigmaColor', '', []],
        [u'double', u'sigmaSpace', '', []],
        [u'int', u'borderType', u'BORDER_DEFAULT', []]],
    u'smooths the image using bilateral filter\n']
parseName: cv.bilateralFilter with ['', 'cv'] -> fullname:cv::bilateralFilter namespace:cv classpath: classname: name:bilateralFilter
register (function) bilateralFilter

--- Incoming ---
[   u'cv.adaptiveBilateralFilter',
    u'void',
    ['/NW'],
    [   [u'InputArray', u'src', '', []],
        [u'OutputArray', u'dst', '', []],
        [u'Size', u'ksize', '', []],
        [u'double', u'sigmaSpace', '', []],
        [u'double', u'maxSigmaColor', u'20.0', []],
        [u'Point', u'anchor', u'Point(-1, -1)', []],
        [u'int', u'borderType', u'BORDER_DEFAULT', []]],
    u'smooths the image using adaptive bilateral filter\n']
parseName: cv.adaptiveBilateralFilter with ['', 'cv'] -> fullname:cv::adaptiveBilateralFilter namespace:cv classpath: classname: name:adaptiveBilateralFilter
register (function) adaptiveBilateralFilter

--- Incoming ---
[   u'cv.boxFilter',
    u'void',
    ['/NW'],
    [   [u'InputArray', u'src', '', []],
        [u'OutputArray', u'dst', '', []],
        [u'int', u'ddepth', '', []],
        [u'Size', u'ksize', '', []],
        [u'Point', u'anchor', u'Point(-1,-1)', []],
        [u'bool', u'normalize', u'true', []],
        [u'int', u'borderType', u'BORDER_DEFAULT', []]],
    u'smooths the image using the box filter. Each pixel is processed in O(1) time\n']
parseName: cv.boxFilter with ['', 'cv'] -> fullname:cv::boxFilter namespace:cv classpath: classname: name:boxFilter
register (function) boxFilter

--- Incoming ---
[   u'cv.blur',
    u'void',
    ['/NW'],
    [   [u'InputArray', u'src', '', []],
        [u'OutputArray', u'dst', '', []],
        [u'Size', u'ksize', '', []],
        [u'Point', u'anchor', u'Point(-1,-1)', []],
        [u'int', u'borderType', u'BORDER_DEFAULT', []]],
    u'a synonym for normalized box filter\n']
parseName: cv.blur with ['', 'cv'] -> fullname:cv::blur namespace:cv classpath: classname: name:blur
register (function) blur

--- Incoming ---
[   u'cv.filter2D',
    u'void',
    ['/NW'],
    [   [u'InputArray', u'src', '', []],
        [u'OutputArray', u'dst', '', []],
        [u'int', u'ddepth', '', []],
        [u'InputArray', u'kernel', '', []],
        [u'Point', u'anchor', u'Point(-1,-1)', []],
        [u'double', u'delta', u'0', []],
        [u'int', u'borderType', u'BORDER_DEFAULT', []]],
    u'applies non-separable 2D linear filter to the image\n']
parseName: cv.filter2D with ['', 'cv'] -> fullname:cv::filter2D namespace:cv classpath: classname: name:filter2D
register (function) filter2D

--- Incoming ---
[   u'cv.sepFilter2D',
    u'void',
    ['/NW'],
    [   [u'InputArray', u'src', '', []],
        [u'OutputArray', u'dst', '', []],
        [u'int', u'ddepth', '', []],
        [u'InputArray', u'kernelX', '', []],
        [u'InputArray', u'kernelY', '', []],
        [u'Point', u'anchor', u'Point(-1,-1)', []],
        [u'double', u'delta', u'0', []],
        [u'int', u'borderType', u'BORDER_DEFAULT', []]],
    u'applies separable 2D linear filter to the image\n']
parseName: cv.sepFilter2D with ['', 'cv'] -> fullname:cv::sepFilter2D namespace:cv classpath: classname: name:sepFilter2D
register (function) sepFilter2D

--- Incoming ---
[   u'cv.Sobel',
    u'void',
    ['/NW'],
    [   [u'InputArray', u'src', '', []],
        [u'OutputArray', u'dst', '', []],
        [u'int', u'ddepth', '', []],
        [u'int', u'dx', '', []],
        [u'int', u'dy', '', []],
        [u'int', u'ksize', u'3', []],
        [u'double', u'scale', u'1', []],
        [u'double', u'delta', u'0', []],
        [u'int', u'borderType', u'BORDER_DEFAULT', []]],
    u'applies generalized Sobel operator to the image\n']
parseName: cv.Sobel with ['', 'cv'] -> fullname:cv::Sobel namespace:cv classpath: classname: name:Sobel
register (function) Sobel

--- Incoming ---
[   u'cv.Scharr',
    u'void',
    ['/NW'],
    [   [u'InputArray', u'src', '', []],
        [u'OutputArray', u'dst', '', []],
        [u'int', u'ddepth', '', []],
        [u'int', u'dx', '', []],
        [u'int', u'dy', '', []],
        [u'double', u'scale', u'1', []],
        [u'double', u'delta', u'0', []],
        [u'int', u'borderType', u'BORDER_DEFAULT', []]],
    u'applies the vertical or horizontal Scharr operator to the image\n']
parseName: cv.Scharr with ['', 'cv'] -> fullname:cv::Scharr namespace:cv classpath: classname: name:Scharr
register (function) Scharr

--- Incoming ---
[   u'cv.Laplacian',
    u'void',
    ['/NW'],
    [   [u'InputArray', u'src', '', []],
        [u'OutputArray', u'dst', '', []],
        [u'int', u'ddepth', '', []],
        [u'int', u'ksize', u'1', []],
        [u'double', u'scale', u'1', []],
        [u'double', u'delta', u'0', []],
        [u'int', u'borderType', u'BORDER_DEFAULT', []]],
    u'applies Laplacian operator to the image\n']
parseName: cv.Laplacian with ['', 'cv'] -> fullname:cv::Laplacian namespace:cv classpath: classname: name:Laplacian
register (function) Laplacian

--- Incoming ---
[   u'cv.Canny',
    u'void',
    ['/NW'],
    [   [u'InputArray', u'image', '', []],
        [u'OutputArray', u'edges', '', []],
        [u'double', u'threshold1', '', []],
        [u'double', u'threshold2', '', []],
        [u'int', u'apertureSize', u'3', []],
        [u'bool', u'L2gradient', u'false', []]],
    u'applies Canny edge detector and produces the edge map.\n']
parseName: cv.Canny with ['', 'cv'] -> fullname:cv::Canny namespace:cv classpath: classname: name:Canny
register (function) Canny

--- Incoming ---
[   u'cv.cornerMinEigenVal',
    u'void',
    ['/NW'],
    [   [u'InputArray', u'src', '', []],
        [u'OutputArray', u'dst', '', []],
        [u'int', u'blockSize', '', []],
        [u'int', u'ksize', u'3', []],
        [u'int', u'borderType', u'BORDER_DEFAULT', []]],
    u'computes minimum eigen value of 2x2 derivative covariation matrix at each pixel - the cornerness criteria\n']
parseName: cv.cornerMinEigenVal with ['', 'cv'] -> fullname:cv::cornerMinEigenVal namespace:cv classpath: classname: name:cornerMinEigenVal
register (function) cornerMinEigenVal

--- Incoming ---
[   u'cv.cornerHarris',
    u'void',
    ['/NW'],
    [   [u'InputArray', u'src', '', []],
        [u'OutputArray', u'dst', '', []],
        [u'int', u'blockSize', '', []],
        [u'int', u'ksize', '', []],
        [u'double', u'k', '', []],
        [u'int', u'borderType', u'BORDER_DEFAULT', []]],
    u'computes Harris cornerness criteria at each image pixel\n']
parseName: cv.cornerHarris with ['', 'cv'] -> fullname:cv::cornerHarris namespace:cv classpath: classname: name:cornerHarris
register (function) cornerHarris

--- Incoming ---
[   u'cv.eigen2x2',
    u'void',
    ['/NW'],
    [   [u'const float*', u'a', '', []],
        [u'float*', u'e', '', []],
        [u'int', u'n', '', []]],
    '']
parseName: cv.eigen2x2 with ['', 'cv'] -> fullname:cv::eigen2x2 namespace:cv classpath: classname: name:eigen2x2
register (function) eigen2x2

--- Incoming ---
[   u'cv.cornerEigenValsAndVecs',
    u'void',
    ['/NW'],
    [   [u'InputArray', u'src', '', []],
        [u'OutputArray', u'dst', '', []],
        [u'int', u'blockSize', '', []],
        [u'int', u'ksize', '', []],
        [u'int', u'borderType', u'BORDER_DEFAULT', []]],
    u'computes both eigenvalues and the eigenvectors of 2x2 derivative covariation matrix  at each pixel. The output is stored as 6-channel matrix.\n']
parseName: cv.cornerEigenValsAndVecs with ['', 'cv'] -> fullname:cv::cornerEigenValsAndVecs namespace:cv classpath: classname: name:cornerEigenValsAndVecs
register (function) cornerEigenValsAndVecs

--- Incoming ---
[   u'cv.preCornerDetect',
    u'void',
    ['/NW'],
    [   [u'InputArray', u'src', '', []],
        [u'OutputArray', u'dst', '', []],
        [u'int', u'ksize', '', []],
        [u'int', u'borderType', u'BORDER_DEFAULT', []]],
    u'computes another complex cornerness criteria at each pixel\n']
parseName: cv.preCornerDetect with ['', 'cv'] -> fullname:cv::preCornerDetect namespace:cv classpath: classname: name:preCornerDetect
register (function) preCornerDetect

--- Incoming ---
[   u'cv.cornerSubPix',
    u'void',
    ['/NW'],
    [   [u'InputArray', u'image', '', []],
        [u'InputOutputArray', u'corners', '', []],
        [u'Size', u'winSize', '', []],
        [u'Size', u'zeroZone', '', []],
        [u'TermCriteria', u'criteria', '', []]],
    u'adjusts the corner locations with sub-pixel accuracy to maximize the certain cornerness criteria\n']
parseName: cv.cornerSubPix with ['', 'cv'] -> fullname:cv::cornerSubPix namespace:cv classpath: classname: name:cornerSubPix
Registering an unknown type: InputOutputArray
Registering an unknown type: TermCriteria
register (function) cornerSubPix

--- Incoming ---
[   u'cv.goodFeaturesToTrack',
    u'void',
    ['/NW'],
    [   [u'InputArray', u'image', '', []],
        [u'OutputArray', u'corners', '', []],
        [u'int', u'maxCorners', '', []],
        [u'double', u'qualityLevel', '', []],
        [u'double', u'minDistance', '', []],
        [u'InputArray', u'mask', u'noArray()', []],
        [u'int', u'blockSize', u'3', []],
        [u'bool', u'useHarrisDetector', u'false', []],
        [u'double', u'k', u'0.04', []]],
    u'finds the strong enough corners where the cornerMinEigenVal() or cornerHarris() report the local maxima\n']
parseName: cv.goodFeaturesToTrack with ['', 'cv'] -> fullname:cv::goodFeaturesToTrack namespace:cv classpath: classname: name:goodFeaturesToTrack
register (function) goodFeaturesToTrack

--- Incoming ---
[   u'cv.HoughLines',
    u'void',
    ['/NW'],
    [   [u'InputArray', u'image', '', []],
        [u'OutputArray', u'lines', '', []],
        [u'double', u'rho', '', []],
        [u'double', u'theta', '', []],
        [u'int', u'threshold', '', []],
        [u'double', u'srn', u'0', []],
        [u'double', u'stn', u'0', []]],
    u'finds lines in the black-n-white image using the standard or pyramid Hough transform\n']
parseName: cv.HoughLines with ['', 'cv'] -> fullname:cv::HoughLines namespace:cv classpath: classname: name:HoughLines
register (function) HoughLines

--- Incoming ---
[   u'cv.HoughLinesP',
    u'void',
    ['/NW'],
    [   [u'InputArray', u'image', '', []],
        [u'OutputArray', u'lines', '', []],
        [u'double', u'rho', '', []],
        [u'double', u'theta', '', []],
        [u'int', u'threshold', '', []],
        [u'double', u'minLineLength', u'0', []],
        [u'double', u'maxLineGap', u'0', []]],
    u'finds line segments in the black-n-white image using probabilistic Hough transform\n']
parseName: cv.HoughLinesP with ['', 'cv'] -> fullname:cv::HoughLinesP namespace:cv classpath: classname: name:HoughLinesP
register (function) HoughLinesP

--- Incoming ---
[   u'cv.HoughCircles',
    u'void',
    ['/NW'],
    [   [u'InputArray', u'image', '', []],
        [u'OutputArray', u'circles', '', []],
        [u'int', u'method', '', []],
        [u'double', u'dp', '', []],
        [u'double', u'minDist', '', []],
        [u'double', u'param1', u'100', []],
        [u'double', u'param2', u'100', []],
        [u'int', u'minRadius', u'0', []],
        [u'int', u'maxRadius', u'0', []]],
    u'finds circles in the grayscale image using 2+1 gradient Hough transform\n']
parseName: cv.HoughCircles with ['', 'cv'] -> fullname:cv::HoughCircles namespace:cv classpath: classname: name:HoughCircles
register (function) HoughCircles

--- Incoming ---
[u'const cv.GHT_POSITION', u'0', [], []]
parseName: const cv.GHT_POSITION with ['', 'cv'] -> fullname:cv::GHT_POSITION namespace:cv classpath: classname: name:GHT_POSITION

--- Incoming ---
[u'const cv.GHT_SCALE', u'1', [], []]
parseName: const cv.GHT_SCALE with ['', 'cv'] -> fullname:cv::GHT_SCALE namespace:cv classpath: classname: name:GHT_SCALE

--- Incoming ---
[u'const cv.GHT_ROTATION', u'2', [], []]
parseName: const cv.GHT_ROTATION with ['', 'cv'] -> fullname:cv::GHT_ROTATION namespace:cv classpath: classname: name:GHT_ROTATION

--- Incoming ---
[   u'class cv.GeneralizedHough',
    ': cv::Algorithm',
    [],
    [],
    u'finds arbitrary template in the grayscale image using Generalized Hough Transform\nBallard, D.H. (1981). Generalizing the Hough transform to detect arbitrary shapes. Pattern Recognition 13 (2): 111-122.\nGuil, N., Gonz\xe1lez-Linares, J.M. and Zapata, E.L. (1999). Bidimensional shape detection using an invariant approach. Pattern Recognition 32 (6): 1025-1038.\n']
parseName: class cv.GeneralizedHough with ['', 'cv'] -> fullname:cv::GeneralizedHough namespace:cv classpath: classname: name:GeneralizedHough
register class cv::GeneralizedHough ([u'class cv.GeneralizedHough', ': cv::Algorithm', [], [], u'finds arbitrary template in the grayscale image using Generalized Hough Transform\nBallard, D.H. (1981). Generalizing the Hough transform to detect arbitrary shapes. Pattern Recognition 13 (2): 111-122.\nGuil, N., Gonz\xe1lez-Linares, J.M. and Zapata, E.L. (1999). Bidimensional shape detection using an invariant approach. Pattern Recognition 32 (6): 1025-1038.\n']) impl:cv::Algorithm

--- Incoming ---
[   u'cv.GeneralizedHough.create',
    u'Ptr<GeneralizedHough>',
    ['/NW', '/S'],
    [[u'int', u'method', '', []]],
    '']
parseName: cv.GeneralizedHough.create with ['', 'cv'] -> fullname:cv::GeneralizedHough::create namespace:cv classpath:GeneralizedHough classname:GeneralizedHough name:create
register (method) create in cv::GeneralizedHough

--- Incoming ---
[u'cv.GeneralizedHough.~GeneralizedHough', u'', ['/NW'], [], '']
parseName: cv.GeneralizedHough.~GeneralizedHough with ['', 'cv'] -> fullname:cv::GeneralizedHough::~GeneralizedHough namespace:cv classpath:GeneralizedHough classname:GeneralizedHough name:~GeneralizedHough
ignore destructor (method) ~GeneralizedHough in cv::GeneralizedHough

--- Incoming ---
[   u'cv.GeneralizedHough.setTemplate',
    u'void',
    ['/NW'],
    [   [u'InputArray', u'templ', '', []],
        [u'int', u'cannyThreshold', u'100', []],
        [u'Point', u'templCenter', u'Point(-1, -1)', []]],
    u'set template to search\n']
parseName: cv.GeneralizedHough.setTemplate with ['', 'cv'] -> fullname:cv::GeneralizedHough::setTemplate namespace:cv classpath:GeneralizedHough classname:GeneralizedHough name:setTemplate
register (method) setTemplate in cv::GeneralizedHough

--- Incoming ---
[   u'cv.GeneralizedHough.setTemplate',
    u'void',
    ['/NW'],
    [   [u'InputArray', u'edges', '', []],
        [u'InputArray', u'dx', '', []],
        [u'InputArray', u'dy', '', []],
        [u'Point', u'templCenter', u'Point(-1, -1)', []]],
    '']
parseName: cv.GeneralizedHough.setTemplate with ['', 'cv'] -> fullname:cv::GeneralizedHough::setTemplate namespace:cv classpath:GeneralizedHough classname:GeneralizedHough name:setTemplate
register (method) setTemplate in cv::GeneralizedHough

--- Incoming ---
[   u'cv.GeneralizedHough.detect',
    u'void',
    ['/NW'],
    [   [u'InputArray', u'image', '', []],
        [u'OutputArray', u'positions', '', []],
        [u'OutputArray', u'votes', u'cv::noArray()', []],
        [u'int', u'cannyThreshold', u'100', []]],
    u'find template on image\n']
parseName: cv.GeneralizedHough.detect with ['', 'cv'] -> fullname:cv::GeneralizedHough::detect namespace:cv classpath:GeneralizedHough classname:GeneralizedHough name:detect
register (method) detect in cv::GeneralizedHough

--- Incoming ---
[   u'cv.GeneralizedHough.detect',
    u'void',
    ['/NW'],
    [   [u'InputArray', u'edges', '', []],
        [u'InputArray', u'dx', '', []],
        [u'InputArray', u'dy', '', []],
        [u'OutputArray', u'positions', '', []],
        [u'OutputArray', u'votes', u'cv::noArray()', []]],
    '']
parseName: cv.GeneralizedHough.detect with ['', 'cv'] -> fullname:cv::GeneralizedHough::detect namespace:cv classpath:GeneralizedHough classname:GeneralizedHough name:detect
register (method) detect in cv::GeneralizedHough

--- Incoming ---
[u'cv.GeneralizedHough.release', u'void', ['/NW'], [], '']
parseName: cv.GeneralizedHough.release with ['', 'cv'] -> fullname:cv::GeneralizedHough::release namespace:cv classpath:GeneralizedHough classname:GeneralizedHough name:release
register (method) release in cv::GeneralizedHough

--- Incoming ---
[   u'cv.GeneralizedHough.setTemplateImpl',
    u'void',
    ['/NW', '/A', '/H'],
    [   [u'const Mat&', u'edges', '', []],
        [u'const Mat&', u'dx', '', []],
        [u'const Mat&', u'dy', '', []],
        [u'Point', u'templCenter', '', []]],
    '']
parseName: cv.GeneralizedHough.setTemplateImpl with ['', 'cv'] -> fullname:cv::GeneralizedHough::setTemplateImpl namespace:cv classpath:GeneralizedHough classname:GeneralizedHough name:setTemplateImpl

--- Incoming ---
[   u'cv.GeneralizedHough.detectImpl',
    u'void',
    ['/NW', '/A', '/H'],
    [   [u'const Mat&', u'edges', '', []],
        [u'const Mat&', u'dx', '', []],
        [u'const Mat&', u'dy', '', []],
        [u'OutputArray', u'positions', '', []],
        [u'OutputArray', u'votes', '', []]],
    '']
parseName: cv.GeneralizedHough.detectImpl with ['', 'cv'] -> fullname:cv::GeneralizedHough::detectImpl namespace:cv classpath:GeneralizedHough classname:GeneralizedHough name:detectImpl

--- Incoming ---
[u'cv.GeneralizedHough.releaseImpl', u'void', ['/NW', '/A', '/H'], [], '']
parseName: cv.GeneralizedHough.releaseImpl with ['', 'cv'] -> fullname:cv::GeneralizedHough::releaseImpl namespace:cv classpath:GeneralizedHough classname:GeneralizedHough name:releaseImpl

--- Incoming ---
[   u'cv.erode',
    u'void',
    ['/NW'],
    [   [u'InputArray', u'src', '', []],
        [u'OutputArray', u'dst', '', []],
        [u'InputArray', u'kernel', '', []],
        [u'Point', u'anchor', u'Point(-1,-1)', []],
        [u'int', u'iterations', u'1', []],
        [u'int', u'borderType', u'BORDER_CONSTANT', []],
        [   u'const Scalar&',
            u'borderValue',
            u'morphologyDefaultBorderValue()',
            []]],
    u'erodes the image (applies the local minimum operator)\n']
parseName: cv.erode with ['', 'cv'] -> fullname:cv::erode namespace:cv classpath: classname: name:erode
register (function) erode

--- Incoming ---
[   u'cv.dilate',
    u'void',
    ['/NW'],
    [   [u'InputArray', u'src', '', []],
        [u'OutputArray', u'dst', '', []],
        [u'InputArray', u'kernel', '', []],
        [u'Point', u'anchor', u'Point(-1,-1)', []],
        [u'int', u'iterations', u'1', []],
        [u'int', u'borderType', u'BORDER_CONSTANT', []],
        [   u'const Scalar&',
            u'borderValue',
            u'morphologyDefaultBorderValue()',
            []]],
    u'dilates the image (applies the local maximum operator)\n']
parseName: cv.dilate with ['', 'cv'] -> fullname:cv::dilate namespace:cv classpath: classname: name:dilate
register (function) dilate

--- Incoming ---
[   u'cv.morphologyEx',
    u'void',
    ['/NW'],
    [   [u'InputArray', u'src', '', []],
        [u'OutputArray', u'dst', '', []],
        [u'int', u'op', '', []],
        [u'InputArray', u'kernel', '', []],
        [u'Point', u'anchor', u'Point(-1,-1)', []],
        [u'int', u'iterations', u'1', []],
        [u'int', u'borderType', u'BORDER_CONSTANT', []],
        [   u'const Scalar&',
            u'borderValue',
            u'morphologyDefaultBorderValue()',
            []]],
    u'applies an advanced morphological operation to the image\n']
parseName: cv.morphologyEx with ['', 'cv'] -> fullname:cv::morphologyEx namespace:cv classpath: classname: name:morphologyEx
register (function) morphologyEx

--- Incoming ---
[u'const cv.INTER_NEAREST', u'CV_INTER_NN', [], []]
parseName: const cv.INTER_NEAREST with ['', 'cv'] -> fullname:cv::INTER_NEAREST namespace:cv classpath: classname: name:INTER_NEAREST

--- Incoming ---
[u'const cv.INTER_LINEAR', u'CV_INTER_LINEAR', [], []]
parseName: const cv.INTER_LINEAR with ['', 'cv'] -> fullname:cv::INTER_LINEAR namespace:cv classpath: classname: name:INTER_LINEAR

--- Incoming ---
[u'const cv.INTER_CUBIC', u'CV_INTER_CUBIC', [], []]
parseName: const cv.INTER_CUBIC with ['', 'cv'] -> fullname:cv::INTER_CUBIC namespace:cv classpath: classname: name:INTER_CUBIC

--- Incoming ---
[u'const cv.INTER_AREA', u'CV_INTER_AREA', [], []]
parseName: const cv.INTER_AREA with ['', 'cv'] -> fullname:cv::INTER_AREA namespace:cv classpath: classname: name:INTER_AREA

--- Incoming ---
[u'const cv.INTER_LANCZOS4', u'CV_INTER_LANCZOS4', [], []]
parseName: const cv.INTER_LANCZOS4 with ['', 'cv'] -> fullname:cv::INTER_LANCZOS4 namespace:cv classpath: classname: name:INTER_LANCZOS4

--- Incoming ---
[u'const cv.INTER_MAX', u'7', [], []]
parseName: const cv.INTER_MAX with ['', 'cv'] -> fullname:cv::INTER_MAX namespace:cv classpath: classname: name:INTER_MAX

--- Incoming ---
[u'const cv.WARP_INVERSE_MAP', u'CV_WARP_INVERSE_MAP', [], []]
parseName: const cv.WARP_INVERSE_MAP with ['', 'cv'] -> fullname:cv::WARP_INVERSE_MAP namespace:cv classpath: classname: name:WARP_INVERSE_MAP

--- Incoming ---
[   u'cv.resize',
    u'void',
    ['/NW'],
    [   [u'InputArray', u'src', '', []],
        [u'OutputArray', u'dst', '', []],
        [u'Size', u'dsize', '', []],
        [u'double', u'fx', u'0', []],
        [u'double', u'fy', u'0', []],
        [u'int', u'interpolation', u'INTER_LINEAR', []]],
    u'resizes the image\n']
parseName: cv.resize with ['', 'cv'] -> fullname:cv::resize namespace:cv classpath: classname: name:resize
register (function) resize

--- Incoming ---
[   u'cv.warpAffine',
    u'void',
    ['/NW'],
    [   [u'InputArray', u'src', '', []],
        [u'OutputArray', u'dst', '', []],
        [u'InputArray', u'M', '', []],
        [u'Size', u'dsize', '', []],
        [u'int', u'flags', u'INTER_LINEAR', []],
        [u'int', u'borderMode', u'BORDER_CONSTANT', []],
        [u'const Scalar&', u'borderValue', u'Scalar()', []]],
    u'warps the image using affine transformation\n']
parseName: cv.warpAffine with ['', 'cv'] -> fullname:cv::warpAffine namespace:cv classpath: classname: name:warpAffine
register (function) warpAffine

--- Incoming ---
[   u'cv.warpPerspective',
    u'void',
    ['/NW'],
    [   [u'InputArray', u'src', '', []],
        [u'OutputArray', u'dst', '', []],
        [u'InputArray', u'M', '', []],
        [u'Size', u'dsize', '', []],
        [u'int', u'flags', u'INTER_LINEAR', []],
        [u'int', u'borderMode', u'BORDER_CONSTANT', []],
        [u'const Scalar&', u'borderValue', u'Scalar()', []]],
    u'warps the image using perspective transformation\n']
parseName: cv.warpPerspective with ['', 'cv'] -> fullname:cv::warpPerspective namespace:cv classpath: classname: name:warpPerspective
register (function) warpPerspective

--- Incoming ---
[u'const cv.INTER_BITS', u'5', [], []]
parseName: const cv.INTER_BITS with ['', 'cv'] -> fullname:cv::INTER_BITS namespace:cv classpath: classname: name:INTER_BITS

--- Incoming ---
[u'const cv.INTER_BITS2', u'INTER_BITS*2', [], []]
parseName: const cv.INTER_BITS2 with ['', 'cv'] -> fullname:cv::INTER_BITS2 namespace:cv classpath: classname: name:INTER_BITS2

--- Incoming ---
[u'const cv.INTER_TAB_SIZE', u'(1<<INTER_BITS)', [], []]
parseName: const cv.INTER_TAB_SIZE with ['', 'cv'] -> fullname:cv::INTER_TAB_SIZE namespace:cv classpath: classname: name:INTER_TAB_SIZE

--- Incoming ---
[u'const cv.INTER_TAB_SIZE2', u'INTER_TAB_SIZE*INTER_TAB_SIZE', [], []]
parseName: const cv.INTER_TAB_SIZE2 with ['', 'cv'] -> fullname:cv::INTER_TAB_SIZE2 namespace:cv classpath: classname: name:INTER_TAB_SIZE2

--- Incoming ---
[   u'cv.remap',
    u'void',
    ['/NW'],
    [   [u'InputArray', u'src', '', []],
        [u'OutputArray', u'dst', '', []],
        [u'InputArray', u'map1', '', []],
        [u'InputArray', u'map2', '', []],
        [u'int', u'interpolation', '', []],
        [u'int', u'borderMode', u'BORDER_CONSTANT', []],
        [u'const Scalar&', u'borderValue', u'Scalar()', []]],
    u'warps the image using the precomputed maps. The maps are stored in either floating-point or integer fixed-point format\n']
parseName: cv.remap with ['', 'cv'] -> fullname:cv::remap namespace:cv classpath: classname: name:remap
register (function) remap

--- Incoming ---
[   u'cv.convertMaps',
    u'void',
    ['/NW'],
    [   [u'InputArray', u'map1', '', []],
        [u'InputArray', u'map2', '', []],
        [u'OutputArray', u'dstmap1', '', []],
        [u'OutputArray', u'dstmap2', '', []],
        [u'int', u'dstmap1type', '', []],
        [u'bool', u'nninterpolation', u'false', []]],
    u'converts maps for remap from floating-point to fixed-point format or backwards\n']
parseName: cv.convertMaps with ['', 'cv'] -> fullname:cv::convertMaps namespace:cv classpath: classname: name:convertMaps
register (function) convertMaps

--- Incoming ---
[   u'cv.getRotationMatrix2D',
    u'Mat',
    ['/NW'],
    [   [u'Point2f', u'center', '', []],
        [u'double', u'angle', '', []],
        [u'double', u'scale', '', []]],
    u'returns 2x3 affine transformation matrix for the planar rotation.\n']
parseName: cv.getRotationMatrix2D with ['', 'cv'] -> fullname:cv::getRotationMatrix2D namespace:cv classpath: classname: name:getRotationMatrix2D
register (function) getRotationMatrix2D

--- Incoming ---
[   u'cv.getPerspectiveTransform',
    u'Mat',
    ['/NW'],
    [   [u'const Point2f[]', u'src', '', []],
        [u'const Point2f[]', u'dst', '', []]],
    u'returns 3x3 perspective transformation for the corresponding 4 point pairs.\n']
parseName: cv.getPerspectiveTransform with ['', 'cv'] -> fullname:cv::getPerspectiveTransform namespace:cv classpath: classname: name:getPerspectiveTransform
Registering an unknown type: Point2f[]
register (function) getPerspectiveTransform

--- Incoming ---
[   u'cv.getAffineTransform',
    u'Mat',
    ['/NW'],
    [   [u'const Point2f[]', u'src', '', []],
        [u'const Point2f[]', u'dst', '', []]],
    u'returns 2x3 affine transformation for the corresponding 3 point pairs.\n']
parseName: cv.getAffineTransform with ['', 'cv'] -> fullname:cv::getAffineTransform namespace:cv classpath: classname: name:getAffineTransform
register (function) getAffineTransform

--- Incoming ---
[   u'cv.invertAffineTransform',
    u'void',
    ['/NW'],
    [[u'InputArray', u'M', '', []], [u'OutputArray', u'iM', '', []]],
    u'computes 2x3 affine transformation matrix that is inverse to the specified 2x3 affine transformation.\n']
parseName: cv.invertAffineTransform with ['', 'cv'] -> fullname:cv::invertAffineTransform namespace:cv classpath: classname: name:invertAffineTransform
register (function) invertAffineTransform

--- Incoming ---
[   u'cv.getPerspectiveTransform',
    u'Mat',
    ['/NW'],
    [[u'InputArray', u'src', '', []], [u'InputArray', u'dst', '', []]],
    '']
parseName: cv.getPerspectiveTransform with ['', 'cv'] -> fullname:cv::getPerspectiveTransform namespace:cv classpath: classname: name:getPerspectiveTransform
register (function) getPerspectiveTransform

--- Incoming ---
[   u'cv.getAffineTransform',
    u'Mat',
    ['/NW'],
    [[u'InputArray', u'src', '', []], [u'InputArray', u'dst', '', []]],
    '']
parseName: cv.getAffineTransform with ['', 'cv'] -> fullname:cv::getAffineTransform namespace:cv classpath: classname: name:getAffineTransform
register (function) getAffineTransform

--- Incoming ---
[   u'cv.getRectSubPix',
    u'void',
    ['/NW'],
    [   [u'InputArray', u'image', '', []],
        [u'Size', u'patchSize', '', []],
        [u'Point2f', u'center', '', []],
        [u'OutputArray', u'patch', '', []],
        [u'int', u'patchType', u'-1', []]],
    u'extracts rectangle from the image at sub-pixel location\n']
parseName: cv.getRectSubPix with ['', 'cv'] -> fullname:cv::getRectSubPix namespace:cv classpath: classname: name:getRectSubPix
register (function) getRectSubPix

--- Incoming ---
[   u'cv.integral',
    u'void',
    ['/NW'],
    [   [u'InputArray', u'src', '', []],
        [u'OutputArray', u'sum', '', []],
        [u'int', u'sdepth', u'-1', []]],
    u'computes the integral image\n']
parseName: cv.integral with ['', 'cv'] -> fullname:cv::integral namespace:cv classpath: classname: name:integral
register (function) integral

--- Incoming ---
[   u'cv.integral',
    u'void',
    ['/NW'],
    [   [u'InputArray', u'src', '', []],
        [u'OutputArray', u'sum', '', []],
        [u'OutputArray', u'sqsum', '', []],
        [u'int', u'sdepth', u'-1', []]],
    u'computes the integral image and integral for the squared image\n']
parseName: cv.integral with ['', 'cv'] -> fullname:cv::integral namespace:cv classpath: classname: name:integral
register (function) integral

--- Incoming ---
[   u'cv.integral',
    u'void',
    ['/NW'],
    [   [u'InputArray', u'src', '', []],
        [u'OutputArray', u'sum', '', []],
        [u'OutputArray', u'sqsum', '', []],
        [u'OutputArray', u'tilted', '', []],
        [u'int', u'sdepth', u'-1', []]],
    u'computes the integral image, integral for the squared image and the tilted integral image\n']
parseName: cv.integral with ['', 'cv'] -> fullname:cv::integral namespace:cv classpath: classname: name:integral
register (function) integral

--- Incoming ---
[   u'cv.accumulate',
    u'void',
    ['/NW'],
    [   [u'InputArray', u'src', '', []],
        [u'InputOutputArray', u'dst', '', []],
        [u'InputArray', u'mask', u'noArray()', []]],
    u'adds image to the accumulator (dst += src). Unlike cv::add, dst and src can have different types.\n']
parseName: cv.accumulate with ['', 'cv'] -> fullname:cv::accumulate namespace:cv classpath: classname: name:accumulate
register (function) accumulate

--- Incoming ---
[   u'cv.accumulateSquare',
    u'void',
    ['/NW'],
    [   [u'InputArray', u'src', '', []],
        [u'InputOutputArray', u'dst', '', []],
        [u'InputArray', u'mask', u'noArray()', []]],
    u'adds squared src image to the accumulator (dst += src*src).\n']
parseName: cv.accumulateSquare with ['', 'cv'] -> fullname:cv::accumulateSquare namespace:cv classpath: classname: name:accumulateSquare
register (function) accumulateSquare

--- Incoming ---
[   u'cv.accumulateProduct',
    u'void',
    ['/NW'],
    [   [u'InputArray', u'src1', '', []],
        [u'InputArray', u'src2', '', []],
        [u'InputOutputArray', u'dst', '', []],
        [u'InputArray', u'mask', u'noArray()', []]],
    u'adds product of the 2 images to the accumulator (dst += src1*src2).\n']
parseName: cv.accumulateProduct with ['', 'cv'] -> fullname:cv::accumulateProduct namespace:cv classpath: classname: name:accumulateProduct
register (function) accumulateProduct

--- Incoming ---
[   u'cv.accumulateWeighted',
    u'void',
    ['/NW'],
    [   [u'InputArray', u'src', '', []],
        [u'InputOutputArray', u'dst', '', []],
        [u'double', u'alpha', '', []],
        [u'InputArray', u'mask', u'noArray()', []]],
    u'updates the running average (dst = dst*(1-alpha) + src*alpha)\n']
parseName: cv.accumulateWeighted with ['', 'cv'] -> fullname:cv::accumulateWeighted namespace:cv classpath: classname: name:accumulateWeighted
register (function) accumulateWeighted

--- Incoming ---
[   u'cv.PSNR',
    u'double',
    ['/NW'],
    [[u'InputArray', u'src1', '', []], [u'InputArray', u'src2', '', []]],
    u'computes PSNR image/video quality metric\n']
parseName: cv.PSNR with ['', 'cv'] -> fullname:cv::PSNR namespace:cv classpath: classname: name:PSNR
register (function) PSNR

--- Incoming ---
[   u'cv.phaseCorrelate',
    u'Point2d',
    ['/NW'],
    [   [u'InputArray', u'src1', '', []],
        [u'InputArray', u'src2', '', []],
        [u'InputArray', u'window', u'noArray()', []]],
    '']
parseName: cv.phaseCorrelate with ['', 'cv'] -> fullname:cv::phaseCorrelate namespace:cv classpath: classname: name:phaseCorrelate
register (function) phaseCorrelate

--- Incoming ---
[   u'cv.phaseCorrelateRes',
    u'Point2d',
    ['/NW'],
    [   [u'InputArray', u'src1', '', []],
        [u'InputArray', u'src2', '', []],
        [u'InputArray', u'window', '', []],
        [u'double*', u'response', u'0', []]],
    '']
parseName: cv.phaseCorrelateRes with ['', 'cv'] -> fullname:cv::phaseCorrelateRes namespace:cv classpath: classname: name:phaseCorrelateRes
register (function) phaseCorrelateRes

--- Incoming ---
[   u'cv.createHanningWindow',
    u'void',
    ['/NW'],
    [   [u'OutputArray', u'dst', '', []],
        [u'Size', u'winSize', '', []],
        [u'int', u'type', '', []]],
    '']
parseName: cv.createHanningWindow with ['', 'cv'] -> fullname:cv::createHanningWindow namespace:cv classpath: classname: name:createHanningWindow
register (function) createHanningWindow

--- Incoming ---
[u'const cv.THRESH_BINARY', u'CV_THRESH_BINARY', [], []]
parseName: const cv.THRESH_BINARY with ['', 'cv'] -> fullname:cv::THRESH_BINARY namespace:cv classpath: classname: name:THRESH_BINARY

--- Incoming ---
[u'const cv.THRESH_BINARY_INV', u'CV_THRESH_BINARY_INV', [], []]
parseName: const cv.THRESH_BINARY_INV with ['', 'cv'] -> fullname:cv::THRESH_BINARY_INV namespace:cv classpath: classname: name:THRESH_BINARY_INV

--- Incoming ---
[u'const cv.THRESH_TRUNC', u'CV_THRESH_TRUNC', [], []]
parseName: const cv.THRESH_TRUNC with ['', 'cv'] -> fullname:cv::THRESH_TRUNC namespace:cv classpath: classname: name:THRESH_TRUNC

--- Incoming ---
[u'const cv.THRESH_TOZERO', u'CV_THRESH_TOZERO', [], []]
parseName: const cv.THRESH_TOZERO with ['', 'cv'] -> fullname:cv::THRESH_TOZERO namespace:cv classpath: classname: name:THRESH_TOZERO

--- Incoming ---
[u'const cv.THRESH_TOZERO_INV', u'CV_THRESH_TOZERO_INV', [], []]
parseName: const cv.THRESH_TOZERO_INV with ['', 'cv'] -> fullname:cv::THRESH_TOZERO_INV namespace:cv classpath: classname: name:THRESH_TOZERO_INV

--- Incoming ---
[u'const cv.THRESH_MASK', u'CV_THRESH_MASK', [], []]
parseName: const cv.THRESH_MASK with ['', 'cv'] -> fullname:cv::THRESH_MASK namespace:cv classpath: classname: name:THRESH_MASK

--- Incoming ---
[u'const cv.THRESH_OTSU', u'CV_THRESH_OTSU', [], []]
parseName: const cv.THRESH_OTSU with ['', 'cv'] -> fullname:cv::THRESH_OTSU namespace:cv classpath: classname: name:THRESH_OTSU

--- Incoming ---
[   u'cv.threshold',
    u'double',
    ['/NW'],
    [   [u'InputArray', u'src', '', []],
        [u'OutputArray', u'dst', '', []],
        [u'double', u'thresh', '', []],
        [u'double', u'maxval', '', []],
        [u'int', u'type', '', []]],
    u'applies fixed threshold to the image\n']
parseName: cv.threshold with ['', 'cv'] -> fullname:cv::threshold namespace:cv classpath: classname: name:threshold
register (function) threshold

--- Incoming ---
[u'const cv.ADAPTIVE_THRESH_MEAN_C', u'0', [], []]
parseName: const cv.ADAPTIVE_THRESH_MEAN_C with ['', 'cv'] -> fullname:cv::ADAPTIVE_THRESH_MEAN_C namespace:cv classpath: classname: name:ADAPTIVE_THRESH_MEAN_C

--- Incoming ---
[u'const cv.ADAPTIVE_THRESH_GAUSSIAN_C', u'1', [], []]
parseName: const cv.ADAPTIVE_THRESH_GAUSSIAN_C with ['', 'cv'] -> fullname:cv::ADAPTIVE_THRESH_GAUSSIAN_C namespace:cv classpath: classname: name:ADAPTIVE_THRESH_GAUSSIAN_C

--- Incoming ---
[   u'cv.adaptiveThreshold',
    u'void',
    ['/NW'],
    [   [u'InputArray', u'src', '', []],
        [u'OutputArray', u'dst', '', []],
        [u'double', u'maxValue', '', []],
        [u'int', u'adaptiveMethod', '', []],
        [u'int', u'thresholdType', '', []],
        [u'int', u'blockSize', '', []],
        [u'double', u'C', '', []]],
    u'applies variable (adaptive) threshold to the image\n']
parseName: cv.adaptiveThreshold with ['', 'cv'] -> fullname:cv::adaptiveThreshold namespace:cv classpath: classname: name:adaptiveThreshold
register (function) adaptiveThreshold

--- Incoming ---
[   u'cv.pyrDown',
    u'void',
    ['/NW'],
    [   [u'InputArray', u'src', '', []],
        [u'OutputArray', u'dst', '', []],
        [u'const Size&', u'dstsize', u'Size()', []],
        [u'int', u'borderType', u'BORDER_DEFAULT', []]],
    u'smooths and downsamples the image\n']
parseName: cv.pyrDown with ['', 'cv'] -> fullname:cv::pyrDown namespace:cv classpath: classname: name:pyrDown
register (function) pyrDown

--- Incoming ---
[   u'cv.pyrUp',
    u'void',
    ['/NW'],
    [   [u'InputArray', u'src', '', []],
        [u'OutputArray', u'dst', '', []],
        [u'const Size&', u'dstsize', u'Size()', []],
        [u'int', u'borderType', u'BORDER_DEFAULT', []]],
    u'upsamples and smoothes the image\n']
parseName: cv.pyrUp with ['', 'cv'] -> fullname:cv::pyrUp namespace:cv classpath: classname: name:pyrUp
register (function) pyrUp

--- Incoming ---
[   u'cv.buildPyramid',
    u'void',
    ['/NW'],
    [   [u'InputArray', u'src', '', []],
        [u'OutputArrayOfArrays', u'dst', '', []],
        [u'int', u'maxlevel', '', []],
        [u'int', u'borderType', u'BORDER_DEFAULT', []]],
    u'builds the gaussian pyramid using pyrDown() as a basic operation\n']
parseName: cv.buildPyramid with ['', 'cv'] -> fullname:cv::buildPyramid namespace:cv classpath: classname: name:buildPyramid
Registering an unknown type: OutputArrayOfArrays
register (function) buildPyramid

--- Incoming ---
[   u'cv.undistort',
    u'void',
    ['/NW'],
    [   [u'InputArray', u'src', '', []],
        [u'OutputArray', u'dst', '', []],
        [u'InputArray', u'cameraMatrix', '', []],
        [u'InputArray', u'distCoeffs', '', []],
        [u'InputArray', u'newCameraMatrix', u'noArray()', []]],
    u'corrects lens distortion for the given camera matrix and distortion coefficients\n']
parseName: cv.undistort with ['', 'cv'] -> fullname:cv::undistort namespace:cv classpath: classname: name:undistort
register (function) undistort

--- Incoming ---
[   u'cv.initUndistortRectifyMap',
    u'void',
    ['/NW'],
    [   [u'InputArray', u'cameraMatrix', '', []],
        [u'InputArray', u'distCoeffs', '', []],
        [u'InputArray', u'R', '', []],
        [u'InputArray', u'newCameraMatrix', '', []],
        [u'Size', u'size', '', []],
        [u'int', u'm1type', '', []],
        [u'OutputArray', u'map1', '', []],
        [u'OutputArray', u'map2', '', []]],
    u'initializes maps for cv::remap() to correct lens distortion and optionally rectify the image\n']
parseName: cv.initUndistortRectifyMap with ['', 'cv'] -> fullname:cv::initUndistortRectifyMap namespace:cv classpath: classname: name:initUndistortRectifyMap
register (function) initUndistortRectifyMap

--- Incoming ---
[u'const cv.PROJ_SPHERICAL_ORTHO', u'0', [], []]
parseName: const cv.PROJ_SPHERICAL_ORTHO with ['', 'cv'] -> fullname:cv::PROJ_SPHERICAL_ORTHO namespace:cv classpath: classname: name:PROJ_SPHERICAL_ORTHO

--- Incoming ---
[u'const cv.PROJ_SPHERICAL_EQRECT', u'1', [], []]
parseName: const cv.PROJ_SPHERICAL_EQRECT with ['', 'cv'] -> fullname:cv::PROJ_SPHERICAL_EQRECT namespace:cv classpath: classname: name:PROJ_SPHERICAL_EQRECT

--- Incoming ---
[   u'cv.initWideAngleProjMap',
    u'float',
    ['/NW'],
    [   [u'InputArray', u'cameraMatrix', '', []],
        [u'InputArray', u'distCoeffs', '', []],
        [u'Size', u'imageSize', '', []],
        [u'int', u'destImageWidth', '', []],
        [u'int', u'm1type', '', []],
        [u'OutputArray', u'map1', '', []],
        [u'OutputArray', u'map2', '', []],
        [u'int', u'projType', u'PROJ_SPHERICAL_EQRECT', []],
        [u'double', u'alpha', u'0', []]],
    u'initializes maps for cv::remap() for wide-angle\n']
parseName: cv.initWideAngleProjMap with ['', 'cv'] -> fullname:cv::initWideAngleProjMap namespace:cv classpath: classname: name:initWideAngleProjMap
register (function) initWideAngleProjMap

--- Incoming ---
[   u'cv.getDefaultNewCameraMatrix',
    u'Mat',
    ['/NW'],
    [   [u'InputArray', u'cameraMatrix', '', []],
        [u'Size', u'imgsize', u'Size()', []],
        [u'bool', u'centerPrincipalPoint', u'false', []]],
    u'returns the default new camera matrix (by default it is the same as cameraMatrix unless centerPricipalPoint=true)\n']
parseName: cv.getDefaultNewCameraMatrix with ['', 'cv'] -> fullname:cv::getDefaultNewCameraMatrix namespace:cv classpath: classname: name:getDefaultNewCameraMatrix
register (function) getDefaultNewCameraMatrix

--- Incoming ---
[   u'cv.undistortPoints',
    u'void',
    ['/NW'],
    [   [u'InputArray', u'src', '', []],
        [u'OutputArray', u'dst', '', []],
        [u'InputArray', u'cameraMatrix', '', []],
        [u'InputArray', u'distCoeffs', '', []],
        [u'InputArray', u'R', u'noArray()', []],
        [u'InputArray', u'P', u'noArray()', []]],
    u"returns points' coordinates after lens distortion correction\n"]
parseName: cv.undistortPoints with ['', 'cv'] -> fullname:cv::undistortPoints namespace:cv classpath: classname: name:undistortPoints
register (function) undistortPoints

--- Incoming ---
[   u'cv.calcHist',
    u'void',
    ['/NW'],
    [   [u'const Mat*', u'images', '', []],
        [u'int', u'nimages', '', []],
        [u'const int*', u'channels', '', []],
        [u'InputArray', u'mask', '', []],
        [u'OutputArray', u'hist', '', []],
        [u'int', u'dims', '', []],
        [u'const int*', u'histSize', '', []],
        [u'const float**', u'ranges', '', []],
        [u'bool', u'uniform', u'true', []],
        [u'bool', u'accumulate', u'false', []]],
    u'computes the joint dense histogram for a set of images.\n']
parseName: cv.calcHist with ['', 'cv'] -> fullname:cv::calcHist namespace:cv classpath: classname: name:calcHist
register (function) calcHist

--- Incoming ---
[   u'cv.calcHist',
    u'void',
    ['/NW'],
    [   [u'const Mat*', u'images', '', []],
        [u'int', u'nimages', '', []],
        [u'const int*', u'channels', '', []],
        [u'InputArray', u'mask', '', []],
        [u'SparseMat&', u'hist', '', []],
        [u'int', u'dims', '', []],
        [u'const int*', u'histSize', '', []],
        [u'const float**', u'ranges', '', []],
        [u'bool', u'uniform', u'true', []],
        [u'bool', u'accumulate', u'false', []]],
    u'computes the joint sparse histogram for a set of images.\n']
parseName: cv.calcHist with ['', 'cv'] -> fullname:cv::calcHist namespace:cv classpath: classname: name:calcHist
Registering an unknown type: SparseMat
register (function) calcHist

--- Incoming ---
[   u'cv.calcHist',
    u'void',
    ['/NW'],
    [   [u'InputArrayOfArrays', u'images', '', []],
        [u'const vector<int>&', u'channels', '', []],
        [u'InputArray', u'mask', '', []],
        [u'OutputArray', u'hist', '', []],
        [u'const vector<int>&', u'histSize', '', []],
        [u'const vector<float>&', u'ranges', '', []],
        [u'bool', u'accumulate', u'false', []]],
    '']
parseName: cv.calcHist with ['', 'cv'] -> fullname:cv::calcHist namespace:cv classpath: classname: name:calcHist
Registering an unknown type: InputArrayOfArrays
register (function) calcHist

--- Incoming ---
[   u'cv.calcBackProject',
    u'void',
    ['/NW'],
    [   [u'const Mat*', u'images', '', []],
        [u'int', u'nimages', '', []],
        [u'const int*', u'channels', '', []],
        [u'InputArray', u'hist', '', []],
        [u'OutputArray', u'backProject', '', []],
        [u'const float**', u'ranges', '', []],
        [u'double', u'scale', u'1', []],
        [u'bool', u'uniform', u'true', []]],
    u'computes back projection for the set of images\n']
parseName: cv.calcBackProject with ['', 'cv'] -> fullname:cv::calcBackProject namespace:cv classpath: classname: name:calcBackProject
register (function) calcBackProject

--- Incoming ---
[   u'cv.calcBackProject',
    u'void',
    ['/NW'],
    [   [u'const Mat*', u'images', '', []],
        [u'int', u'nimages', '', []],
        [u'const int*', u'channels', '', []],
        [u'const SparseMat&', u'hist', '', []],
        [u'OutputArray', u'backProject', '', []],
        [u'const float**', u'ranges', '', []],
        [u'double', u'scale', u'1', []],
        [u'bool', u'uniform', u'true', []]],
    u'computes back projection for the set of images\n']
parseName: cv.calcBackProject with ['', 'cv'] -> fullname:cv::calcBackProject namespace:cv classpath: classname: name:calcBackProject
Registering an unknown type: SparseMat
register (function) calcBackProject

--- Incoming ---
[   u'cv.calcBackProject',
    u'void',
    ['/NW'],
    [   [u'InputArrayOfArrays', u'images', '', []],
        [u'const vector<int>&', u'channels', '', []],
        [u'InputArray', u'hist', '', []],
        [u'OutputArray', u'dst', '', []],
        [u'const vector<float>&', u'ranges', '', []],
        [u'double', u'scale', '', []]],
    '']
parseName: cv.calcBackProject with ['', 'cv'] -> fullname:cv::calcBackProject namespace:cv classpath: classname: name:calcBackProject
register (function) calcBackProject

--- Incoming ---
[   u'cv.compareHist',
    u'double',
    ['/NW'],
    [   [u'InputArray', u'H1', '', []],
        [u'InputArray', u'H2', '', []],
        [u'int', u'method', '', []]],
    u'compares two histograms stored in dense arrays\n']
parseName: cv.compareHist with ['', 'cv'] -> fullname:cv::compareHist namespace:cv classpath: classname: name:compareHist
register (function) compareHist

--- Incoming ---
[   u'cv.compareHist',
    u'double',
    ['/NW'],
    [   [u'const SparseMat&', u'H1', '', []],
        [u'const SparseMat&', u'H2', '', []],
        [u'int', u'method', '', []]],
    u'compares two histograms stored in sparse arrays\n']
parseName: cv.compareHist with ['', 'cv'] -> fullname:cv::compareHist namespace:cv classpath: classname: name:compareHist
register (function) compareHist

--- Incoming ---
[   u'cv.equalizeHist',
    u'void',
    ['/NW'],
    [[u'InputArray', u'src', '', []], [u'OutputArray', u'dst', '', []]],
    u'normalizes the grayscale image brightness and contrast by normalizing its histogram\n']
parseName: cv.equalizeHist with ['', 'cv'] -> fullname:cv::equalizeHist namespace:cv classpath: classname: name:equalizeHist
register (function) equalizeHist

--- Incoming ---
[u'class cv.CLAHE', ': cv::Algorithm', [], [], '']
parseName: class cv.CLAHE with ['', 'cv'] -> fullname:cv::CLAHE namespace:cv classpath: classname: name:CLAHE
register class cv::CLAHE ([u'class cv.CLAHE', ': cv::Algorithm', [], [], '']) impl:cv::Algorithm

--- Incoming ---
[   u'cv.CLAHE.apply',
    u'void',
    ['/NW', '/A'],
    [[u'InputArray', u'src', '', []], [u'OutputArray', u'dst', '', []]],
    '']
parseName: cv.CLAHE.apply with ['', 'cv'] -> fullname:cv::CLAHE::apply namespace:cv classpath:CLAHE classname:CLAHE name:apply

--- Incoming ---
[   u'cv.CLAHE.setClipLimit',
    u'void',
    ['/NW', '/A'],
    [[u'double', u'clipLimit', '', []]],
    '']
parseName: cv.CLAHE.setClipLimit with ['', 'cv'] -> fullname:cv::CLAHE::setClipLimit namespace:cv classpath:CLAHE classname:CLAHE name:setClipLimit

--- Incoming ---
[u'cv.CLAHE.getClipLimit', u'double', ['/NW', '/A', '/C'], [], '']
parseName: cv.CLAHE.getClipLimit with ['', 'cv'] -> fullname:cv::CLAHE::getClipLimit namespace:cv classpath:CLAHE classname:CLAHE name:getClipLimit

--- Incoming ---
[   u'cv.CLAHE.setTilesGridSize',
    u'void',
    ['/NW', '/A'],
    [[u'Size', u'tileGridSize', '', []]],
    '']
parseName: cv.CLAHE.setTilesGridSize with ['', 'cv'] -> fullname:cv::CLAHE::setTilesGridSize namespace:cv classpath:CLAHE classname:CLAHE name:setTilesGridSize

--- Incoming ---
[u'cv.CLAHE.getTilesGridSize', u'Size', ['/NW', '/A', '/C'], [], '']
parseName: cv.CLAHE.getTilesGridSize with ['', 'cv'] -> fullname:cv::CLAHE::getTilesGridSize namespace:cv classpath:CLAHE classname:CLAHE name:getTilesGridSize

--- Incoming ---
[u'cv.CLAHE.collectGarbage', u'void', ['/NW', '/A'], [], '']
parseName: cv.CLAHE.collectGarbage with ['', 'cv'] -> fullname:cv::CLAHE::collectGarbage namespace:cv classpath:CLAHE classname:CLAHE name:collectGarbage

--- Incoming ---
[   u'cv.createCLAHE',
    u'Ptr<CLAHE>',
    ['/NW'],
    [   [u'double', u'clipLimit', u'40.0', []],
        [u'Size', u'tileGridSize', u'Size(8, 8)', []]],
    '']
parseName: cv.createCLAHE with ['', 'cv'] -> fullname:cv::createCLAHE namespace:cv classpath: classname: name:createCLAHE
register (function) createCLAHE

--- Incoming ---
[   u'cv.EMD',
    u'float',
    ['/NW'],
    [   [u'InputArray', u'signature1', '', []],
        [u'InputArray', u'signature2', '', []],
        [u'int', u'distType', '', []],
        [u'InputArray', u'cost', u'noArray()', []],
        [u'float*', u'lowerBound', u'0', []],
        [u'OutputArray', u'flow', u'noArray()', []]],
    '']
parseName: cv.EMD with ['', 'cv'] -> fullname:cv::EMD namespace:cv classpath: classname: name:EMD
register (function) EMD

--- Incoming ---
[   u'cv.watershed',
    u'void',
    ['/NW'],
    [   [u'InputArray', u'image', '', []],
        [u'InputOutputArray', u'markers', '', []]],
    u'segments the image using watershed algorithm\n']
parseName: cv.watershed with ['', 'cv'] -> fullname:cv::watershed namespace:cv classpath: classname: name:watershed
register (function) watershed

--- Incoming ---
[   u'cv.pyrMeanShiftFiltering',
    u'void',
    ['/NW'],
    [   [u'InputArray', u'src', '', []],
        [u'OutputArray', u'dst', '', []],
        [u'double', u'sp', '', []],
        [u'double', u'sr', '', []],
        [u'int', u'maxLevel', u'1', []],
        [   u'TermCriteria',
            u'termcrit',
            u'TermCriteria( TermCriteria::MAX_ITER+TermCriteria::EPS,5,1)',
            []]],
    u'filters image using meanshift algorithm\n']
parseName: cv.pyrMeanShiftFiltering with ['', 'cv'] -> fullname:cv::pyrMeanShiftFiltering namespace:cv classpath: classname: name:pyrMeanShiftFiltering
register (function) pyrMeanShiftFiltering

--- Incoming ---
[u'const cv.GC_BGD', u'0', [], []]
parseName: const cv.GC_BGD with ['', 'cv'] -> fullname:cv::GC_BGD namespace:cv classpath: classname: name:GC_BGD

--- Incoming ---
[u'const cv.GC_FGD', u'1', [], []]
parseName: const cv.GC_FGD with ['', 'cv'] -> fullname:cv::GC_FGD namespace:cv classpath: classname: name:GC_FGD

--- Incoming ---
[u'const cv.GC_PR_BGD', u'2', [], []]
parseName: const cv.GC_PR_BGD with ['', 'cv'] -> fullname:cv::GC_PR_BGD namespace:cv classpath: classname: name:GC_PR_BGD

--- Incoming ---
[u'const cv.GC_PR_FGD', u'3', [], []]
parseName: const cv.GC_PR_FGD with ['', 'cv'] -> fullname:cv::GC_PR_FGD namespace:cv classpath: classname: name:GC_PR_FGD

--- Incoming ---
[u'const cv.GC_INIT_WITH_RECT', u'0', [], []]
parseName: const cv.GC_INIT_WITH_RECT with ['', 'cv'] -> fullname:cv::GC_INIT_WITH_RECT namespace:cv classpath: classname: name:GC_INIT_WITH_RECT

--- Incoming ---
[u'const cv.GC_INIT_WITH_MASK', u'1', [], []]
parseName: const cv.GC_INIT_WITH_MASK with ['', 'cv'] -> fullname:cv::GC_INIT_WITH_MASK namespace:cv classpath: classname: name:GC_INIT_WITH_MASK

--- Incoming ---
[u'const cv.GC_EVAL', u'2', [], []]
parseName: const cv.GC_EVAL with ['', 'cv'] -> fullname:cv::GC_EVAL namespace:cv classpath: classname: name:GC_EVAL

--- Incoming ---
[   u'cv.grabCut',
    u'void',
    ['/NW'],
    [   [u'InputArray', u'img', '', []],
        [u'InputOutputArray', u'mask', '', []],
        [u'Rect', u'rect', '', []],
        [u'InputOutputArray', u'bgdModel', '', []],
        [u'InputOutputArray', u'fgdModel', '', []],
        [u'int', u'iterCount', '', []],
        [u'int', u'mode', u'GC_EVAL', []]],
    u'segments the image using GrabCut algorithm\n']
parseName: cv.grabCut with ['', 'cv'] -> fullname:cv::grabCut namespace:cv classpath: classname: name:grabCut
register (function) grabCut

--- Incoming ---
[u'const cv.DIST_LABEL_CCOMP', u'0', [], []]
parseName: const cv.DIST_LABEL_CCOMP with ['', 'cv'] -> fullname:cv::DIST_LABEL_CCOMP namespace:cv classpath: classname: name:DIST_LABEL_CCOMP

--- Incoming ---
[u'const cv.DIST_LABEL_PIXEL', u'1', [], []]
parseName: const cv.DIST_LABEL_PIXEL with ['', 'cv'] -> fullname:cv::DIST_LABEL_PIXEL namespace:cv classpath: classname: name:DIST_LABEL_PIXEL

--- Incoming ---
[   u'cv.distanceTransform',
    u'void',
    ['/NW'],
    [   [u'InputArray', u'src', '', []],
        [u'OutputArray', u'dst', '', []],
        [u'OutputArray', u'labels', '', []],
        [u'int', u'distanceType', '', []],
        [u'int', u'maskSize', '', []],
        [u'int', u'labelType', u'DIST_LABEL_CCOMP', []]],
    u'builds the discrete Voronoi diagram\n']
parseName: cv.distanceTransform with ['', 'cv'] -> fullname:cv::distanceTransform namespace:cv classpath: classname: name:distanceTransform
register (function) distanceTransform

--- Incoming ---
[   u'cv.distanceTransform',
    u'void',
    ['/NW'],
    [   [u'InputArray', u'src', '', []],
        [u'OutputArray', u'dst', '', []],
        [u'int', u'distanceType', '', []],
        [u'int', u'maskSize', '', []]],
    u'computes the distance transform map\n']
parseName: cv.distanceTransform with ['', 'cv'] -> fullname:cv::distanceTransform namespace:cv classpath: classname: name:distanceTransform
register (function) distanceTransform

--- Incoming ---
[u'const cv.FLOODFILL_FIXED_RANGE', u'1 << 16', [], []]
parseName: const cv.FLOODFILL_FIXED_RANGE with ['', 'cv'] -> fullname:cv::FLOODFILL_FIXED_RANGE namespace:cv classpath: classname: name:FLOODFILL_FIXED_RANGE

--- Incoming ---
[u'const cv.FLOODFILL_MASK_ONLY', u'1 << 17', [], []]
parseName: const cv.FLOODFILL_MASK_ONLY with ['', 'cv'] -> fullname:cv::FLOODFILL_MASK_ONLY namespace:cv classpath: classname: name:FLOODFILL_MASK_ONLY

--- Incoming ---
[   u'cv.floodFill',
    u'int',
    ['/NW'],
    [   [u'InputOutputArray', u'image', '', []],
        [u'Point', u'seedPoint', '', []],
        [u'Scalar', u'newVal', '', []],
        [u'Rect*', u'rect', u'0', []],
        [u'Scalar', u'loDiff', u'Scalar()', []],
        [u'Scalar', u'upDiff', u'Scalar()', []],
        [u'int', u'flags', u'4', []]],
    u'fills the semi-uniform image region starting from the specified seed point\n']
parseName: cv.floodFill with ['', 'cv'] -> fullname:cv::floodFill namespace:cv classpath: classname: name:floodFill
register (function) floodFill

--- Incoming ---
[   u'cv.floodFill',
    u'int',
    ['/NW'],
    [   [u'InputOutputArray', u'image', '', []],
        [u'InputOutputArray', u'mask', '', []],
        [u'Point', u'seedPoint', '', []],
        [u'Scalar', u'newVal', '', []],
        [u'Rect*', u'rect', u'0', []],
        [u'Scalar', u'loDiff', u'Scalar()', []],
        [u'Scalar', u'upDiff', u'Scalar()', []],
        [u'int', u'flags', u'4', []]],
    u'fills the semi-uniform image region and/or the mask starting from the specified seed point\n']
parseName: cv.floodFill with ['', 'cv'] -> fullname:cv::floodFill namespace:cv classpath: classname: name:floodFill
register (function) floodFill

--- Incoming ---
[u'const cv.COLOR_BGR2BGRA', u'0', [], []]
parseName: const cv.COLOR_BGR2BGRA with ['', 'cv'] -> fullname:cv::COLOR_BGR2BGRA namespace:cv classpath: classname: name:COLOR_BGR2BGRA

--- Incoming ---
[u'const cv.COLOR_RGB2RGBA', u'COLOR_BGR2BGRA', [], []]
parseName: const cv.COLOR_RGB2RGBA with ['', 'cv'] -> fullname:cv::COLOR_RGB2RGBA namespace:cv classpath: classname: name:COLOR_RGB2RGBA

--- Incoming ---
[u'const cv.COLOR_BGRA2BGR', u'1', [], []]
parseName: const cv.COLOR_BGRA2BGR with ['', 'cv'] -> fullname:cv::COLOR_BGRA2BGR namespace:cv classpath: classname: name:COLOR_BGRA2BGR

--- Incoming ---
[u'const cv.COLOR_RGBA2RGB', u'COLOR_BGRA2BGR', [], []]
parseName: const cv.COLOR_RGBA2RGB with ['', 'cv'] -> fullname:cv::COLOR_RGBA2RGB namespace:cv classpath: classname: name:COLOR_RGBA2RGB

--- Incoming ---
[u'const cv.COLOR_BGR2RGBA', u'2', [], []]
parseName: const cv.COLOR_BGR2RGBA with ['', 'cv'] -> fullname:cv::COLOR_BGR2RGBA namespace:cv classpath: classname: name:COLOR_BGR2RGBA

--- Incoming ---
[u'const cv.COLOR_RGB2BGRA', u'COLOR_BGR2RGBA', [], []]
parseName: const cv.COLOR_RGB2BGRA with ['', 'cv'] -> fullname:cv::COLOR_RGB2BGRA namespace:cv classpath: classname: name:COLOR_RGB2BGRA

--- Incoming ---
[u'const cv.COLOR_RGBA2BGR', u'3', [], []]
parseName: const cv.COLOR_RGBA2BGR with ['', 'cv'] -> fullname:cv::COLOR_RGBA2BGR namespace:cv classpath: classname: name:COLOR_RGBA2BGR

--- Incoming ---
[u'const cv.COLOR_BGRA2RGB', u'COLOR_RGBA2BGR', [], []]
parseName: const cv.COLOR_BGRA2RGB with ['', 'cv'] -> fullname:cv::COLOR_BGRA2RGB namespace:cv classpath: classname: name:COLOR_BGRA2RGB

--- Incoming ---
[u'const cv.COLOR_BGR2RGB', u'4', [], []]
parseName: const cv.COLOR_BGR2RGB with ['', 'cv'] -> fullname:cv::COLOR_BGR2RGB namespace:cv classpath: classname: name:COLOR_BGR2RGB

--- Incoming ---
[u'const cv.COLOR_RGB2BGR', u'COLOR_BGR2RGB', [], []]
parseName: const cv.COLOR_RGB2BGR with ['', 'cv'] -> fullname:cv::COLOR_RGB2BGR namespace:cv classpath: classname: name:COLOR_RGB2BGR

--- Incoming ---
[u'const cv.COLOR_BGRA2RGBA', u'5', [], []]
parseName: const cv.COLOR_BGRA2RGBA with ['', 'cv'] -> fullname:cv::COLOR_BGRA2RGBA namespace:cv classpath: classname: name:COLOR_BGRA2RGBA

--- Incoming ---
[u'const cv.COLOR_RGBA2BGRA', u'COLOR_BGRA2RGBA', [], []]
parseName: const cv.COLOR_RGBA2BGRA with ['', 'cv'] -> fullname:cv::COLOR_RGBA2BGRA namespace:cv classpath: classname: name:COLOR_RGBA2BGRA

--- Incoming ---
[u'const cv.COLOR_BGR2GRAY', u'6', [], []]
parseName: const cv.COLOR_BGR2GRAY with ['', 'cv'] -> fullname:cv::COLOR_BGR2GRAY namespace:cv classpath: classname: name:COLOR_BGR2GRAY

--- Incoming ---
[u'const cv.COLOR_RGB2GRAY', u'7', [], []]
parseName: const cv.COLOR_RGB2GRAY with ['', 'cv'] -> fullname:cv::COLOR_RGB2GRAY namespace:cv classpath: classname: name:COLOR_RGB2GRAY

--- Incoming ---
[u'const cv.COLOR_GRAY2BGR', u'8', [], []]
parseName: const cv.COLOR_GRAY2BGR with ['', 'cv'] -> fullname:cv::COLOR_GRAY2BGR namespace:cv classpath: classname: name:COLOR_GRAY2BGR

--- Incoming ---
[u'const cv.COLOR_GRAY2RGB', u'COLOR_GRAY2BGR', [], []]
parseName: const cv.COLOR_GRAY2RGB with ['', 'cv'] -> fullname:cv::COLOR_GRAY2RGB namespace:cv classpath: classname: name:COLOR_GRAY2RGB

--- Incoming ---
[u'const cv.COLOR_GRAY2BGRA', u'9', [], []]
parseName: const cv.COLOR_GRAY2BGRA with ['', 'cv'] -> fullname:cv::COLOR_GRAY2BGRA namespace:cv classpath: classname: name:COLOR_GRAY2BGRA

--- Incoming ---
[u'const cv.COLOR_GRAY2RGBA', u'COLOR_GRAY2BGRA', [], []]
parseName: const cv.COLOR_GRAY2RGBA with ['', 'cv'] -> fullname:cv::COLOR_GRAY2RGBA namespace:cv classpath: classname: name:COLOR_GRAY2RGBA

--- Incoming ---
[u'const cv.COLOR_BGRA2GRAY', u'10', [], []]
parseName: const cv.COLOR_BGRA2GRAY with ['', 'cv'] -> fullname:cv::COLOR_BGRA2GRAY namespace:cv classpath: classname: name:COLOR_BGRA2GRAY

--- Incoming ---
[u'const cv.COLOR_RGBA2GRAY', u'11', [], []]
parseName: const cv.COLOR_RGBA2GRAY with ['', 'cv'] -> fullname:cv::COLOR_RGBA2GRAY namespace:cv classpath: classname: name:COLOR_RGBA2GRAY

--- Incoming ---
[u'const cv.COLOR_BGR2BGR565', u'12', [], []]
parseName: const cv.COLOR_BGR2BGR565 with ['', 'cv'] -> fullname:cv::COLOR_BGR2BGR565 namespace:cv classpath: classname: name:COLOR_BGR2BGR565

--- Incoming ---
[u'const cv.COLOR_RGB2BGR565', u'13', [], []]
parseName: const cv.COLOR_RGB2BGR565 with ['', 'cv'] -> fullname:cv::COLOR_RGB2BGR565 namespace:cv classpath: classname: name:COLOR_RGB2BGR565

--- Incoming ---
[u'const cv.COLOR_BGR5652BGR', u'14', [], []]
parseName: const cv.COLOR_BGR5652BGR with ['', 'cv'] -> fullname:cv::COLOR_BGR5652BGR namespace:cv classpath: classname: name:COLOR_BGR5652BGR

--- Incoming ---
[u'const cv.COLOR_BGR5652RGB', u'15', [], []]
parseName: const cv.COLOR_BGR5652RGB with ['', 'cv'] -> fullname:cv::COLOR_BGR5652RGB namespace:cv classpath: classname: name:COLOR_BGR5652RGB

--- Incoming ---
[u'const cv.COLOR_BGRA2BGR565', u'16', [], []]
parseName: const cv.COLOR_BGRA2BGR565 with ['', 'cv'] -> fullname:cv::COLOR_BGRA2BGR565 namespace:cv classpath: classname: name:COLOR_BGRA2BGR565

--- Incoming ---
[u'const cv.COLOR_RGBA2BGR565', u'17', [], []]
parseName: const cv.COLOR_RGBA2BGR565 with ['', 'cv'] -> fullname:cv::COLOR_RGBA2BGR565 namespace:cv classpath: classname: name:COLOR_RGBA2BGR565

--- Incoming ---
[u'const cv.COLOR_BGR5652BGRA', u'18', [], []]
parseName: const cv.COLOR_BGR5652BGRA with ['', 'cv'] -> fullname:cv::COLOR_BGR5652BGRA namespace:cv classpath: classname: name:COLOR_BGR5652BGRA

--- Incoming ---
[u'const cv.COLOR_BGR5652RGBA', u'19', [], []]
parseName: const cv.COLOR_BGR5652RGBA with ['', 'cv'] -> fullname:cv::COLOR_BGR5652RGBA namespace:cv classpath: classname: name:COLOR_BGR5652RGBA

--- Incoming ---
[u'const cv.COLOR_GRAY2BGR565', u'20', [], []]
parseName: const cv.COLOR_GRAY2BGR565 with ['', 'cv'] -> fullname:cv::COLOR_GRAY2BGR565 namespace:cv classpath: classname: name:COLOR_GRAY2BGR565

--- Incoming ---
[u'const cv.COLOR_BGR5652GRAY', u'21', [], []]
parseName: const cv.COLOR_BGR5652GRAY with ['', 'cv'] -> fullname:cv::COLOR_BGR5652GRAY namespace:cv classpath: classname: name:COLOR_BGR5652GRAY

--- Incoming ---
[u'const cv.COLOR_BGR2BGR555', u'22', [], []]
parseName: const cv.COLOR_BGR2BGR555 with ['', 'cv'] -> fullname:cv::COLOR_BGR2BGR555 namespace:cv classpath: classname: name:COLOR_BGR2BGR555

--- Incoming ---
[u'const cv.COLOR_RGB2BGR555', u'23', [], []]
parseName: const cv.COLOR_RGB2BGR555 with ['', 'cv'] -> fullname:cv::COLOR_RGB2BGR555 namespace:cv classpath: classname: name:COLOR_RGB2BGR555

--- Incoming ---
[u'const cv.COLOR_BGR5552BGR', u'24', [], []]
parseName: const cv.COLOR_BGR5552BGR with ['', 'cv'] -> fullname:cv::COLOR_BGR5552BGR namespace:cv classpath: classname: name:COLOR_BGR5552BGR

--- Incoming ---
[u'const cv.COLOR_BGR5552RGB', u'25', [], []]
parseName: const cv.COLOR_BGR5552RGB with ['', 'cv'] -> fullname:cv::COLOR_BGR5552RGB namespace:cv classpath: classname: name:COLOR_BGR5552RGB

--- Incoming ---
[u'const cv.COLOR_BGRA2BGR555', u'26', [], []]
parseName: const cv.COLOR_BGRA2BGR555 with ['', 'cv'] -> fullname:cv::COLOR_BGRA2BGR555 namespace:cv classpath: classname: name:COLOR_BGRA2BGR555

--- Incoming ---
[u'const cv.COLOR_RGBA2BGR555', u'27', [], []]
parseName: const cv.COLOR_RGBA2BGR555 with ['', 'cv'] -> fullname:cv::COLOR_RGBA2BGR555 namespace:cv classpath: classname: name:COLOR_RGBA2BGR555

--- Incoming ---
[u'const cv.COLOR_BGR5552BGRA', u'28', [], []]
parseName: const cv.COLOR_BGR5552BGRA with ['', 'cv'] -> fullname:cv::COLOR_BGR5552BGRA namespace:cv classpath: classname: name:COLOR_BGR5552BGRA

--- Incoming ---
[u'const cv.COLOR_BGR5552RGBA', u'29', [], []]
parseName: const cv.COLOR_BGR5552RGBA with ['', 'cv'] -> fullname:cv::COLOR_BGR5552RGBA namespace:cv classpath: classname: name:COLOR_BGR5552RGBA

--- Incoming ---
[u'const cv.COLOR_GRAY2BGR555', u'30', [], []]
parseName: const cv.COLOR_GRAY2BGR555 with ['', 'cv'] -> fullname:cv::COLOR_GRAY2BGR555 namespace:cv classpath: classname: name:COLOR_GRAY2BGR555

--- Incoming ---
[u'const cv.COLOR_BGR5552GRAY', u'31', [], []]
parseName: const cv.COLOR_BGR5552GRAY with ['', 'cv'] -> fullname:cv::COLOR_BGR5552GRAY namespace:cv classpath: classname: name:COLOR_BGR5552GRAY

--- Incoming ---
[u'const cv.COLOR_BGR2XYZ', u'32', [], []]
parseName: const cv.COLOR_BGR2XYZ with ['', 'cv'] -> fullname:cv::COLOR_BGR2XYZ namespace:cv classpath: classname: name:COLOR_BGR2XYZ

--- Incoming ---
[u'const cv.COLOR_RGB2XYZ', u'33', [], []]
parseName: const cv.COLOR_RGB2XYZ with ['', 'cv'] -> fullname:cv::COLOR_RGB2XYZ namespace:cv classpath: classname: name:COLOR_RGB2XYZ

--- Incoming ---
[u'const cv.COLOR_XYZ2BGR', u'34', [], []]
parseName: const cv.COLOR_XYZ2BGR with ['', 'cv'] -> fullname:cv::COLOR_XYZ2BGR namespace:cv classpath: classname: name:COLOR_XYZ2BGR

--- Incoming ---
[u'const cv.COLOR_XYZ2RGB', u'35', [], []]
parseName: const cv.COLOR_XYZ2RGB with ['', 'cv'] -> fullname:cv::COLOR_XYZ2RGB namespace:cv classpath: classname: name:COLOR_XYZ2RGB

--- Incoming ---
[u'const cv.COLOR_BGR2YCrCb', u'36', [], []]
parseName: const cv.COLOR_BGR2YCrCb with ['', 'cv'] -> fullname:cv::COLOR_BGR2YCrCb namespace:cv classpath: classname: name:COLOR_BGR2YCrCb

--- Incoming ---
[u'const cv.COLOR_RGB2YCrCb', u'37', [], []]
parseName: const cv.COLOR_RGB2YCrCb with ['', 'cv'] -> fullname:cv::COLOR_RGB2YCrCb namespace:cv classpath: classname: name:COLOR_RGB2YCrCb

--- Incoming ---
[u'const cv.COLOR_YCrCb2BGR', u'38', [], []]
parseName: const cv.COLOR_YCrCb2BGR with ['', 'cv'] -> fullname:cv::COLOR_YCrCb2BGR namespace:cv classpath: classname: name:COLOR_YCrCb2BGR

--- Incoming ---
[u'const cv.COLOR_YCrCb2RGB', u'39', [], []]
parseName: const cv.COLOR_YCrCb2RGB with ['', 'cv'] -> fullname:cv::COLOR_YCrCb2RGB namespace:cv classpath: classname: name:COLOR_YCrCb2RGB

--- Incoming ---
[u'const cv.COLOR_BGR2HSV', u'40', [], []]
parseName: const cv.COLOR_BGR2HSV with ['', 'cv'] -> fullname:cv::COLOR_BGR2HSV namespace:cv classpath: classname: name:COLOR_BGR2HSV

--- Incoming ---
[u'const cv.COLOR_RGB2HSV', u'41', [], []]
parseName: const cv.COLOR_RGB2HSV with ['', 'cv'] -> fullname:cv::COLOR_RGB2HSV namespace:cv classpath: classname: name:COLOR_RGB2HSV

--- Incoming ---
[u'const cv.COLOR_BGR2Lab', u'44', [], []]
parseName: const cv.COLOR_BGR2Lab with ['', 'cv'] -> fullname:cv::COLOR_BGR2Lab namespace:cv classpath: classname: name:COLOR_BGR2Lab

--- Incoming ---
[u'const cv.COLOR_RGB2Lab', u'45', [], []]
parseName: const cv.COLOR_RGB2Lab with ['', 'cv'] -> fullname:cv::COLOR_RGB2Lab namespace:cv classpath: classname: name:COLOR_RGB2Lab

--- Incoming ---
[u'const cv.COLOR_BayerBG2BGR', u'46', [], []]
parseName: const cv.COLOR_BayerBG2BGR with ['', 'cv'] -> fullname:cv::COLOR_BayerBG2BGR namespace:cv classpath: classname: name:COLOR_BayerBG2BGR

--- Incoming ---
[u'const cv.COLOR_BayerGB2BGR', u'47', [], []]
parseName: const cv.COLOR_BayerGB2BGR with ['', 'cv'] -> fullname:cv::COLOR_BayerGB2BGR namespace:cv classpath: classname: name:COLOR_BayerGB2BGR

--- Incoming ---
[u'const cv.COLOR_BayerRG2BGR', u'48', [], []]
parseName: const cv.COLOR_BayerRG2BGR with ['', 'cv'] -> fullname:cv::COLOR_BayerRG2BGR namespace:cv classpath: classname: name:COLOR_BayerRG2BGR

--- Incoming ---
[u'const cv.COLOR_BayerGR2BGR', u'49', [], []]
parseName: const cv.COLOR_BayerGR2BGR with ['', 'cv'] -> fullname:cv::COLOR_BayerGR2BGR namespace:cv classpath: classname: name:COLOR_BayerGR2BGR

--- Incoming ---
[u'const cv.COLOR_BayerBG2RGB', u'COLOR_BayerRG2BGR', [], []]
parseName: const cv.COLOR_BayerBG2RGB with ['', 'cv'] -> fullname:cv::COLOR_BayerBG2RGB namespace:cv classpath: classname: name:COLOR_BayerBG2RGB

--- Incoming ---
[u'const cv.COLOR_BayerGB2RGB', u'COLOR_BayerGR2BGR', [], []]
parseName: const cv.COLOR_BayerGB2RGB with ['', 'cv'] -> fullname:cv::COLOR_BayerGB2RGB namespace:cv classpath: classname: name:COLOR_BayerGB2RGB

--- Incoming ---
[u'const cv.COLOR_BayerRG2RGB', u'COLOR_BayerBG2BGR', [], []]
parseName: const cv.COLOR_BayerRG2RGB with ['', 'cv'] -> fullname:cv::COLOR_BayerRG2RGB namespace:cv classpath: classname: name:COLOR_BayerRG2RGB

--- Incoming ---
[u'const cv.COLOR_BayerGR2RGB', u'COLOR_BayerGB2BGR', [], []]
parseName: const cv.COLOR_BayerGR2RGB with ['', 'cv'] -> fullname:cv::COLOR_BayerGR2RGB namespace:cv classpath: classname: name:COLOR_BayerGR2RGB

--- Incoming ---
[u'const cv.COLOR_BGR2Luv', u'50', [], []]
parseName: const cv.COLOR_BGR2Luv with ['', 'cv'] -> fullname:cv::COLOR_BGR2Luv namespace:cv classpath: classname: name:COLOR_BGR2Luv

--- Incoming ---
[u'const cv.COLOR_RGB2Luv', u'51', [], []]
parseName: const cv.COLOR_RGB2Luv with ['', 'cv'] -> fullname:cv::COLOR_RGB2Luv namespace:cv classpath: classname: name:COLOR_RGB2Luv

--- Incoming ---
[u'const cv.COLOR_BGR2HLS', u'52', [], []]
parseName: const cv.COLOR_BGR2HLS with ['', 'cv'] -> fullname:cv::COLOR_BGR2HLS namespace:cv classpath: classname: name:COLOR_BGR2HLS

--- Incoming ---
[u'const cv.COLOR_RGB2HLS', u'53', [], []]
parseName: const cv.COLOR_RGB2HLS with ['', 'cv'] -> fullname:cv::COLOR_RGB2HLS namespace:cv classpath: classname: name:COLOR_RGB2HLS

--- Incoming ---
[u'const cv.COLOR_HSV2BGR', u'54', [], []]
parseName: const cv.COLOR_HSV2BGR with ['', 'cv'] -> fullname:cv::COLOR_HSV2BGR namespace:cv classpath: classname: name:COLOR_HSV2BGR

--- Incoming ---
[u'const cv.COLOR_HSV2RGB', u'55', [], []]
parseName: const cv.COLOR_HSV2RGB with ['', 'cv'] -> fullname:cv::COLOR_HSV2RGB namespace:cv classpath: classname: name:COLOR_HSV2RGB

--- Incoming ---
[u'const cv.COLOR_Lab2BGR', u'56', [], []]
parseName: const cv.COLOR_Lab2BGR with ['', 'cv'] -> fullname:cv::COLOR_Lab2BGR namespace:cv classpath: classname: name:COLOR_Lab2BGR

--- Incoming ---
[u'const cv.COLOR_Lab2RGB', u'57', [], []]
parseName: const cv.COLOR_Lab2RGB with ['', 'cv'] -> fullname:cv::COLOR_Lab2RGB namespace:cv classpath: classname: name:COLOR_Lab2RGB

--- Incoming ---
[u'const cv.COLOR_Luv2BGR', u'58', [], []]
parseName: const cv.COLOR_Luv2BGR with ['', 'cv'] -> fullname:cv::COLOR_Luv2BGR namespace:cv classpath: classname: name:COLOR_Luv2BGR

--- Incoming ---
[u'const cv.COLOR_Luv2RGB', u'59', [], []]
parseName: const cv.COLOR_Luv2RGB with ['', 'cv'] -> fullname:cv::COLOR_Luv2RGB namespace:cv classpath: classname: name:COLOR_Luv2RGB

--- Incoming ---
[u'const cv.COLOR_HLS2BGR', u'60', [], []]
parseName: const cv.COLOR_HLS2BGR with ['', 'cv'] -> fullname:cv::COLOR_HLS2BGR namespace:cv classpath: classname: name:COLOR_HLS2BGR

--- Incoming ---
[u'const cv.COLOR_HLS2RGB', u'61', [], []]
parseName: const cv.COLOR_HLS2RGB with ['', 'cv'] -> fullname:cv::COLOR_HLS2RGB namespace:cv classpath: classname: name:COLOR_HLS2RGB

--- Incoming ---
[u'const cv.COLOR_BayerBG2BGR_VNG', u'62', [], []]
parseName: const cv.COLOR_BayerBG2BGR_VNG with ['', 'cv'] -> fullname:cv::COLOR_BayerBG2BGR_VNG namespace:cv classpath: classname: name:COLOR_BayerBG2BGR_VNG

--- Incoming ---
[u'const cv.COLOR_BayerGB2BGR_VNG', u'63', [], []]
parseName: const cv.COLOR_BayerGB2BGR_VNG with ['', 'cv'] -> fullname:cv::COLOR_BayerGB2BGR_VNG namespace:cv classpath: classname: name:COLOR_BayerGB2BGR_VNG

--- Incoming ---
[u'const cv.COLOR_BayerRG2BGR_VNG', u'64', [], []]
parseName: const cv.COLOR_BayerRG2BGR_VNG with ['', 'cv'] -> fullname:cv::COLOR_BayerRG2BGR_VNG namespace:cv classpath: classname: name:COLOR_BayerRG2BGR_VNG

--- Incoming ---
[u'const cv.COLOR_BayerGR2BGR_VNG', u'65', [], []]
parseName: const cv.COLOR_BayerGR2BGR_VNG with ['', 'cv'] -> fullname:cv::COLOR_BayerGR2BGR_VNG namespace:cv classpath: classname: name:COLOR_BayerGR2BGR_VNG

--- Incoming ---
[u'const cv.COLOR_BayerBG2RGB_VNG', u'COLOR_BayerRG2BGR_VNG', [], []]
parseName: const cv.COLOR_BayerBG2RGB_VNG with ['', 'cv'] -> fullname:cv::COLOR_BayerBG2RGB_VNG namespace:cv classpath: classname: name:COLOR_BayerBG2RGB_VNG

--- Incoming ---
[u'const cv.COLOR_BayerGB2RGB_VNG', u'COLOR_BayerGR2BGR_VNG', [], []]
parseName: const cv.COLOR_BayerGB2RGB_VNG with ['', 'cv'] -> fullname:cv::COLOR_BayerGB2RGB_VNG namespace:cv classpath: classname: name:COLOR_BayerGB2RGB_VNG

--- Incoming ---
[u'const cv.COLOR_BayerRG2RGB_VNG', u'COLOR_BayerBG2BGR_VNG', [], []]
parseName: const cv.COLOR_BayerRG2RGB_VNG with ['', 'cv'] -> fullname:cv::COLOR_BayerRG2RGB_VNG namespace:cv classpath: classname: name:COLOR_BayerRG2RGB_VNG

--- Incoming ---
[u'const cv.COLOR_BayerGR2RGB_VNG', u'COLOR_BayerGB2BGR_VNG', [], []]
parseName: const cv.COLOR_BayerGR2RGB_VNG with ['', 'cv'] -> fullname:cv::COLOR_BayerGR2RGB_VNG namespace:cv classpath: classname: name:COLOR_BayerGR2RGB_VNG

--- Incoming ---
[u'const cv.COLOR_BGR2HSV_FULL', u'66', [], []]
parseName: const cv.COLOR_BGR2HSV_FULL with ['', 'cv'] -> fullname:cv::COLOR_BGR2HSV_FULL namespace:cv classpath: classname: name:COLOR_BGR2HSV_FULL

--- Incoming ---
[u'const cv.COLOR_RGB2HSV_FULL', u'67', [], []]
parseName: const cv.COLOR_RGB2HSV_FULL with ['', 'cv'] -> fullname:cv::COLOR_RGB2HSV_FULL namespace:cv classpath: classname: name:COLOR_RGB2HSV_FULL

--- Incoming ---
[u'const cv.COLOR_BGR2HLS_FULL', u'68', [], []]
parseName: const cv.COLOR_BGR2HLS_FULL with ['', 'cv'] -> fullname:cv::COLOR_BGR2HLS_FULL namespace:cv classpath: classname: name:COLOR_BGR2HLS_FULL

--- Incoming ---
[u'const cv.COLOR_RGB2HLS_FULL', u'69', [], []]
parseName: const cv.COLOR_RGB2HLS_FULL with ['', 'cv'] -> fullname:cv::COLOR_RGB2HLS_FULL namespace:cv classpath: classname: name:COLOR_RGB2HLS_FULL

--- Incoming ---
[u'const cv.COLOR_HSV2BGR_FULL', u'70', [], []]
parseName: const cv.COLOR_HSV2BGR_FULL with ['', 'cv'] -> fullname:cv::COLOR_HSV2BGR_FULL namespace:cv classpath: classname: name:COLOR_HSV2BGR_FULL

--- Incoming ---
[u'const cv.COLOR_HSV2RGB_FULL', u'71', [], []]
parseName: const cv.COLOR_HSV2RGB_FULL with ['', 'cv'] -> fullname:cv::COLOR_HSV2RGB_FULL namespace:cv classpath: classname: name:COLOR_HSV2RGB_FULL

--- Incoming ---
[u'const cv.COLOR_HLS2BGR_FULL', u'72', [], []]
parseName: const cv.COLOR_HLS2BGR_FULL with ['', 'cv'] -> fullname:cv::COLOR_HLS2BGR_FULL namespace:cv classpath: classname: name:COLOR_HLS2BGR_FULL

--- Incoming ---
[u'const cv.COLOR_HLS2RGB_FULL', u'73', [], []]
parseName: const cv.COLOR_HLS2RGB_FULL with ['', 'cv'] -> fullname:cv::COLOR_HLS2RGB_FULL namespace:cv classpath: classname: name:COLOR_HLS2RGB_FULL

--- Incoming ---
[u'const cv.COLOR_LBGR2Lab', u'74', [], []]
parseName: const cv.COLOR_LBGR2Lab with ['', 'cv'] -> fullname:cv::COLOR_LBGR2Lab namespace:cv classpath: classname: name:COLOR_LBGR2Lab

--- Incoming ---
[u'const cv.COLOR_LRGB2Lab', u'75', [], []]
parseName: const cv.COLOR_LRGB2Lab with ['', 'cv'] -> fullname:cv::COLOR_LRGB2Lab namespace:cv classpath: classname: name:COLOR_LRGB2Lab

--- Incoming ---
[u'const cv.COLOR_LBGR2Luv', u'76', [], []]
parseName: const cv.COLOR_LBGR2Luv with ['', 'cv'] -> fullname:cv::COLOR_LBGR2Luv namespace:cv classpath: classname: name:COLOR_LBGR2Luv

--- Incoming ---
[u'const cv.COLOR_LRGB2Luv', u'77', [], []]
parseName: const cv.COLOR_LRGB2Luv with ['', 'cv'] -> fullname:cv::COLOR_LRGB2Luv namespace:cv classpath: classname: name:COLOR_LRGB2Luv

--- Incoming ---
[u'const cv.COLOR_Lab2LBGR', u'78', [], []]
parseName: const cv.COLOR_Lab2LBGR with ['', 'cv'] -> fullname:cv::COLOR_Lab2LBGR namespace:cv classpath: classname: name:COLOR_Lab2LBGR

--- Incoming ---
[u'const cv.COLOR_Lab2LRGB', u'79', [], []]
parseName: const cv.COLOR_Lab2LRGB with ['', 'cv'] -> fullname:cv::COLOR_Lab2LRGB namespace:cv classpath: classname: name:COLOR_Lab2LRGB

--- Incoming ---
[u'const cv.COLOR_Luv2LBGR', u'80', [], []]
parseName: const cv.COLOR_Luv2LBGR with ['', 'cv'] -> fullname:cv::COLOR_Luv2LBGR namespace:cv classpath: classname: name:COLOR_Luv2LBGR

--- Incoming ---
[u'const cv.COLOR_Luv2LRGB', u'81', [], []]
parseName: const cv.COLOR_Luv2LRGB with ['', 'cv'] -> fullname:cv::COLOR_Luv2LRGB namespace:cv classpath: classname: name:COLOR_Luv2LRGB

--- Incoming ---
[u'const cv.COLOR_BGR2YUV', u'82', [], []]
parseName: const cv.COLOR_BGR2YUV with ['', 'cv'] -> fullname:cv::COLOR_BGR2YUV namespace:cv classpath: classname: name:COLOR_BGR2YUV

--- Incoming ---
[u'const cv.COLOR_RGB2YUV', u'83', [], []]
parseName: const cv.COLOR_RGB2YUV with ['', 'cv'] -> fullname:cv::COLOR_RGB2YUV namespace:cv classpath: classname: name:COLOR_RGB2YUV

--- Incoming ---
[u'const cv.COLOR_YUV2BGR', u'84', [], []]
parseName: const cv.COLOR_YUV2BGR with ['', 'cv'] -> fullname:cv::COLOR_YUV2BGR namespace:cv classpath: classname: name:COLOR_YUV2BGR

--- Incoming ---
[u'const cv.COLOR_YUV2RGB', u'85', [], []]
parseName: const cv.COLOR_YUV2RGB with ['', 'cv'] -> fullname:cv::COLOR_YUV2RGB namespace:cv classpath: classname: name:COLOR_YUV2RGB

--- Incoming ---
[u'const cv.COLOR_BayerBG2GRAY', u'86', [], []]
parseName: const cv.COLOR_BayerBG2GRAY with ['', 'cv'] -> fullname:cv::COLOR_BayerBG2GRAY namespace:cv classpath: classname: name:COLOR_BayerBG2GRAY

--- Incoming ---
[u'const cv.COLOR_BayerGB2GRAY', u'87', [], []]
parseName: const cv.COLOR_BayerGB2GRAY with ['', 'cv'] -> fullname:cv::COLOR_BayerGB2GRAY namespace:cv classpath: classname: name:COLOR_BayerGB2GRAY

--- Incoming ---
[u'const cv.COLOR_BayerRG2GRAY', u'88', [], []]
parseName: const cv.COLOR_BayerRG2GRAY with ['', 'cv'] -> fullname:cv::COLOR_BayerRG2GRAY namespace:cv classpath: classname: name:COLOR_BayerRG2GRAY

--- Incoming ---
[u'const cv.COLOR_BayerGR2GRAY', u'89', [], []]
parseName: const cv.COLOR_BayerGR2GRAY with ['', 'cv'] -> fullname:cv::COLOR_BayerGR2GRAY namespace:cv classpath: classname: name:COLOR_BayerGR2GRAY

--- Incoming ---
[u'const cv.COLOR_YUV2RGB_NV12', u'90', [], []]
parseName: const cv.COLOR_YUV2RGB_NV12 with ['', 'cv'] -> fullname:cv::COLOR_YUV2RGB_NV12 namespace:cv classpath: classname: name:COLOR_YUV2RGB_NV12

--- Incoming ---
[u'const cv.COLOR_YUV2BGR_NV12', u'91', [], []]
parseName: const cv.COLOR_YUV2BGR_NV12 with ['', 'cv'] -> fullname:cv::COLOR_YUV2BGR_NV12 namespace:cv classpath: classname: name:COLOR_YUV2BGR_NV12

--- Incoming ---
[u'const cv.COLOR_YUV2RGB_NV21', u'92', [], []]
parseName: const cv.COLOR_YUV2RGB_NV21 with ['', 'cv'] -> fullname:cv::COLOR_YUV2RGB_NV21 namespace:cv classpath: classname: name:COLOR_YUV2RGB_NV21

--- Incoming ---
[u'const cv.COLOR_YUV2BGR_NV21', u'93', [], []]
parseName: const cv.COLOR_YUV2BGR_NV21 with ['', 'cv'] -> fullname:cv::COLOR_YUV2BGR_NV21 namespace:cv classpath: classname: name:COLOR_YUV2BGR_NV21

--- Incoming ---
[u'const cv.COLOR_YUV420sp2RGB', u'COLOR_YUV2RGB_NV21', [], []]
parseName: const cv.COLOR_YUV420sp2RGB with ['', 'cv'] -> fullname:cv::COLOR_YUV420sp2RGB namespace:cv classpath: classname: name:COLOR_YUV420sp2RGB

--- Incoming ---
[u'const cv.COLOR_YUV420sp2BGR', u'COLOR_YUV2BGR_NV21', [], []]
parseName: const cv.COLOR_YUV420sp2BGR with ['', 'cv'] -> fullname:cv::COLOR_YUV420sp2BGR namespace:cv classpath: classname: name:COLOR_YUV420sp2BGR

--- Incoming ---
[u'const cv.COLOR_YUV2RGBA_NV12', u'94', [], []]
parseName: const cv.COLOR_YUV2RGBA_NV12 with ['', 'cv'] -> fullname:cv::COLOR_YUV2RGBA_NV12 namespace:cv classpath: classname: name:COLOR_YUV2RGBA_NV12

--- Incoming ---
[u'const cv.COLOR_YUV2BGRA_NV12', u'95', [], []]
parseName: const cv.COLOR_YUV2BGRA_NV12 with ['', 'cv'] -> fullname:cv::COLOR_YUV2BGRA_NV12 namespace:cv classpath: classname: name:COLOR_YUV2BGRA_NV12

--- Incoming ---
[u'const cv.COLOR_YUV2RGBA_NV21', u'96', [], []]
parseName: const cv.COLOR_YUV2RGBA_NV21 with ['', 'cv'] -> fullname:cv::COLOR_YUV2RGBA_NV21 namespace:cv classpath: classname: name:COLOR_YUV2RGBA_NV21

--- Incoming ---
[u'const cv.COLOR_YUV2BGRA_NV21', u'97', [], []]
parseName: const cv.COLOR_YUV2BGRA_NV21 with ['', 'cv'] -> fullname:cv::COLOR_YUV2BGRA_NV21 namespace:cv classpath: classname: name:COLOR_YUV2BGRA_NV21

--- Incoming ---
[u'const cv.COLOR_YUV420sp2RGBA', u'COLOR_YUV2RGBA_NV21', [], []]
parseName: const cv.COLOR_YUV420sp2RGBA with ['', 'cv'] -> fullname:cv::COLOR_YUV420sp2RGBA namespace:cv classpath: classname: name:COLOR_YUV420sp2RGBA

--- Incoming ---
[u'const cv.COLOR_YUV420sp2BGRA', u'COLOR_YUV2BGRA_NV21', [], []]
parseName: const cv.COLOR_YUV420sp2BGRA with ['', 'cv'] -> fullname:cv::COLOR_YUV420sp2BGRA namespace:cv classpath: classname: name:COLOR_YUV420sp2BGRA

--- Incoming ---
[u'const cv.COLOR_YUV2RGB_YV12', u'98', [], []]
parseName: const cv.COLOR_YUV2RGB_YV12 with ['', 'cv'] -> fullname:cv::COLOR_YUV2RGB_YV12 namespace:cv classpath: classname: name:COLOR_YUV2RGB_YV12

--- Incoming ---
[u'const cv.COLOR_YUV2BGR_YV12', u'99', [], []]
parseName: const cv.COLOR_YUV2BGR_YV12 with ['', 'cv'] -> fullname:cv::COLOR_YUV2BGR_YV12 namespace:cv classpath: classname: name:COLOR_YUV2BGR_YV12

--- Incoming ---
[u'const cv.COLOR_YUV2RGB_IYUV', u'100', [], []]
parseName: const cv.COLOR_YUV2RGB_IYUV with ['', 'cv'] -> fullname:cv::COLOR_YUV2RGB_IYUV namespace:cv classpath: classname: name:COLOR_YUV2RGB_IYUV

--- Incoming ---
[u'const cv.COLOR_YUV2BGR_IYUV', u'101', [], []]
parseName: const cv.COLOR_YUV2BGR_IYUV with ['', 'cv'] -> fullname:cv::COLOR_YUV2BGR_IYUV namespace:cv classpath: classname: name:COLOR_YUV2BGR_IYUV

--- Incoming ---
[u'const cv.COLOR_YUV2RGB_I420', u'COLOR_YUV2RGB_IYUV', [], []]
parseName: const cv.COLOR_YUV2RGB_I420 with ['', 'cv'] -> fullname:cv::COLOR_YUV2RGB_I420 namespace:cv classpath: classname: name:COLOR_YUV2RGB_I420

--- Incoming ---
[u'const cv.COLOR_YUV2BGR_I420', u'COLOR_YUV2BGR_IYUV', [], []]
parseName: const cv.COLOR_YUV2BGR_I420 with ['', 'cv'] -> fullname:cv::COLOR_YUV2BGR_I420 namespace:cv classpath: classname: name:COLOR_YUV2BGR_I420

--- Incoming ---
[u'const cv.COLOR_YUV420p2RGB', u'COLOR_YUV2RGB_YV12', [], []]
parseName: const cv.COLOR_YUV420p2RGB with ['', 'cv'] -> fullname:cv::COLOR_YUV420p2RGB namespace:cv classpath: classname: name:COLOR_YUV420p2RGB

--- Incoming ---
[u'const cv.COLOR_YUV420p2BGR', u'COLOR_YUV2BGR_YV12', [], []]
parseName: const cv.COLOR_YUV420p2BGR with ['', 'cv'] -> fullname:cv::COLOR_YUV420p2BGR namespace:cv classpath: classname: name:COLOR_YUV420p2BGR

--- Incoming ---
[u'const cv.COLOR_YUV2RGBA_YV12', u'102', [], []]
parseName: const cv.COLOR_YUV2RGBA_YV12 with ['', 'cv'] -> fullname:cv::COLOR_YUV2RGBA_YV12 namespace:cv classpath: classname: name:COLOR_YUV2RGBA_YV12

--- Incoming ---
[u'const cv.COLOR_YUV2BGRA_YV12', u'103', [], []]
parseName: const cv.COLOR_YUV2BGRA_YV12 with ['', 'cv'] -> fullname:cv::COLOR_YUV2BGRA_YV12 namespace:cv classpath: classname: name:COLOR_YUV2BGRA_YV12

--- Incoming ---
[u'const cv.COLOR_YUV2RGBA_IYUV', u'104', [], []]
parseName: const cv.COLOR_YUV2RGBA_IYUV with ['', 'cv'] -> fullname:cv::COLOR_YUV2RGBA_IYUV namespace:cv classpath: classname: name:COLOR_YUV2RGBA_IYUV

--- Incoming ---
[u'const cv.COLOR_YUV2BGRA_IYUV', u'105', [], []]
parseName: const cv.COLOR_YUV2BGRA_IYUV with ['', 'cv'] -> fullname:cv::COLOR_YUV2BGRA_IYUV namespace:cv classpath: classname: name:COLOR_YUV2BGRA_IYUV

--- Incoming ---
[u'const cv.COLOR_YUV2RGBA_I420', u'COLOR_YUV2RGBA_IYUV', [], []]
parseName: const cv.COLOR_YUV2RGBA_I420 with ['', 'cv'] -> fullname:cv::COLOR_YUV2RGBA_I420 namespace:cv classpath: classname: name:COLOR_YUV2RGBA_I420

--- Incoming ---
[u'const cv.COLOR_YUV2BGRA_I420', u'COLOR_YUV2BGRA_IYUV', [], []]
parseName: const cv.COLOR_YUV2BGRA_I420 with ['', 'cv'] -> fullname:cv::COLOR_YUV2BGRA_I420 namespace:cv classpath: classname: name:COLOR_YUV2BGRA_I420

--- Incoming ---
[u'const cv.COLOR_YUV420p2RGBA', u'COLOR_YUV2RGBA_YV12', [], []]
parseName: const cv.COLOR_YUV420p2RGBA with ['', 'cv'] -> fullname:cv::COLOR_YUV420p2RGBA namespace:cv classpath: classname: name:COLOR_YUV420p2RGBA

--- Incoming ---
[u'const cv.COLOR_YUV420p2BGRA', u'COLOR_YUV2BGRA_YV12', [], []]
parseName: const cv.COLOR_YUV420p2BGRA with ['', 'cv'] -> fullname:cv::COLOR_YUV420p2BGRA namespace:cv classpath: classname: name:COLOR_YUV420p2BGRA

--- Incoming ---
[u'const cv.COLOR_YUV2GRAY_420', u'106', [], []]
parseName: const cv.COLOR_YUV2GRAY_420 with ['', 'cv'] -> fullname:cv::COLOR_YUV2GRAY_420 namespace:cv classpath: classname: name:COLOR_YUV2GRAY_420

--- Incoming ---
[u'const cv.COLOR_YUV2GRAY_NV21', u'COLOR_YUV2GRAY_420', [], []]
parseName: const cv.COLOR_YUV2GRAY_NV21 with ['', 'cv'] -> fullname:cv::COLOR_YUV2GRAY_NV21 namespace:cv classpath: classname: name:COLOR_YUV2GRAY_NV21

--- Incoming ---
[u'const cv.COLOR_YUV2GRAY_NV12', u'COLOR_YUV2GRAY_420', [], []]
parseName: const cv.COLOR_YUV2GRAY_NV12 with ['', 'cv'] -> fullname:cv::COLOR_YUV2GRAY_NV12 namespace:cv classpath: classname: name:COLOR_YUV2GRAY_NV12

--- Incoming ---
[u'const cv.COLOR_YUV2GRAY_YV12', u'COLOR_YUV2GRAY_420', [], []]
parseName: const cv.COLOR_YUV2GRAY_YV12 with ['', 'cv'] -> fullname:cv::COLOR_YUV2GRAY_YV12 namespace:cv classpath: classname: name:COLOR_YUV2GRAY_YV12

--- Incoming ---
[u'const cv.COLOR_YUV2GRAY_IYUV', u'COLOR_YUV2GRAY_420', [], []]
parseName: const cv.COLOR_YUV2GRAY_IYUV with ['', 'cv'] -> fullname:cv::COLOR_YUV2GRAY_IYUV namespace:cv classpath: classname: name:COLOR_YUV2GRAY_IYUV

--- Incoming ---
[u'const cv.COLOR_YUV2GRAY_I420', u'COLOR_YUV2GRAY_420', [], []]
parseName: const cv.COLOR_YUV2GRAY_I420 with ['', 'cv'] -> fullname:cv::COLOR_YUV2GRAY_I420 namespace:cv classpath: classname: name:COLOR_YUV2GRAY_I420

--- Incoming ---
[u'const cv.COLOR_YUV420sp2GRAY', u'COLOR_YUV2GRAY_420', [], []]
parseName: const cv.COLOR_YUV420sp2GRAY with ['', 'cv'] -> fullname:cv::COLOR_YUV420sp2GRAY namespace:cv classpath: classname: name:COLOR_YUV420sp2GRAY

--- Incoming ---
[u'const cv.COLOR_YUV420p2GRAY', u'COLOR_YUV2GRAY_420', [], []]
parseName: const cv.COLOR_YUV420p2GRAY with ['', 'cv'] -> fullname:cv::COLOR_YUV420p2GRAY namespace:cv classpath: classname: name:COLOR_YUV420p2GRAY

--- Incoming ---
[u'const cv.COLOR_YUV2RGB_UYVY', u'107', [], []]
parseName: const cv.COLOR_YUV2RGB_UYVY with ['', 'cv'] -> fullname:cv::COLOR_YUV2RGB_UYVY namespace:cv classpath: classname: name:COLOR_YUV2RGB_UYVY

--- Incoming ---
[u'const cv.COLOR_YUV2BGR_UYVY', u'108', [], []]
parseName: const cv.COLOR_YUV2BGR_UYVY with ['', 'cv'] -> fullname:cv::COLOR_YUV2BGR_UYVY namespace:cv classpath: classname: name:COLOR_YUV2BGR_UYVY

--- Incoming ---
[u'const cv.COLOR_YUV2RGB_Y422', u'COLOR_YUV2RGB_UYVY', [], []]
parseName: const cv.COLOR_YUV2RGB_Y422 with ['', 'cv'] -> fullname:cv::COLOR_YUV2RGB_Y422 namespace:cv classpath: classname: name:COLOR_YUV2RGB_Y422

--- Incoming ---
[u'const cv.COLOR_YUV2BGR_Y422', u'COLOR_YUV2BGR_UYVY', [], []]
parseName: const cv.COLOR_YUV2BGR_Y422 with ['', 'cv'] -> fullname:cv::COLOR_YUV2BGR_Y422 namespace:cv classpath: classname: name:COLOR_YUV2BGR_Y422

--- Incoming ---
[u'const cv.COLOR_YUV2RGB_UYNV', u'COLOR_YUV2RGB_UYVY', [], []]
parseName: const cv.COLOR_YUV2RGB_UYNV with ['', 'cv'] -> fullname:cv::COLOR_YUV2RGB_UYNV namespace:cv classpath: classname: name:COLOR_YUV2RGB_UYNV

--- Incoming ---
[u'const cv.COLOR_YUV2BGR_UYNV', u'COLOR_YUV2BGR_UYVY', [], []]
parseName: const cv.COLOR_YUV2BGR_UYNV with ['', 'cv'] -> fullname:cv::COLOR_YUV2BGR_UYNV namespace:cv classpath: classname: name:COLOR_YUV2BGR_UYNV

--- Incoming ---
[u'const cv.COLOR_YUV2RGBA_UYVY', u'111', [], []]
parseName: const cv.COLOR_YUV2RGBA_UYVY with ['', 'cv'] -> fullname:cv::COLOR_YUV2RGBA_UYVY namespace:cv classpath: classname: name:COLOR_YUV2RGBA_UYVY

--- Incoming ---
[u'const cv.COLOR_YUV2BGRA_UYVY', u'112', [], []]
parseName: const cv.COLOR_YUV2BGRA_UYVY with ['', 'cv'] -> fullname:cv::COLOR_YUV2BGRA_UYVY namespace:cv classpath: classname: name:COLOR_YUV2BGRA_UYVY

--- Incoming ---
[u'const cv.COLOR_YUV2RGBA_Y422', u'COLOR_YUV2RGBA_UYVY', [], []]
parseName: const cv.COLOR_YUV2RGBA_Y422 with ['', 'cv'] -> fullname:cv::COLOR_YUV2RGBA_Y422 namespace:cv classpath: classname: name:COLOR_YUV2RGBA_Y422

--- Incoming ---
[u'const cv.COLOR_YUV2BGRA_Y422', u'COLOR_YUV2BGRA_UYVY', [], []]
parseName: const cv.COLOR_YUV2BGRA_Y422 with ['', 'cv'] -> fullname:cv::COLOR_YUV2BGRA_Y422 namespace:cv classpath: classname: name:COLOR_YUV2BGRA_Y422

--- Incoming ---
[u'const cv.COLOR_YUV2RGBA_UYNV', u'COLOR_YUV2RGBA_UYVY', [], []]
parseName: const cv.COLOR_YUV2RGBA_UYNV with ['', 'cv'] -> fullname:cv::COLOR_YUV2RGBA_UYNV namespace:cv classpath: classname: name:COLOR_YUV2RGBA_UYNV

--- Incoming ---
[u'const cv.COLOR_YUV2BGRA_UYNV', u'COLOR_YUV2BGRA_UYVY', [], []]
parseName: const cv.COLOR_YUV2BGRA_UYNV with ['', 'cv'] -> fullname:cv::COLOR_YUV2BGRA_UYNV namespace:cv classpath: classname: name:COLOR_YUV2BGRA_UYNV

--- Incoming ---
[u'const cv.COLOR_YUV2RGB_YUY2', u'115', [], []]
parseName: const cv.COLOR_YUV2RGB_YUY2 with ['', 'cv'] -> fullname:cv::COLOR_YUV2RGB_YUY2 namespace:cv classpath: classname: name:COLOR_YUV2RGB_YUY2

--- Incoming ---
[u'const cv.COLOR_YUV2BGR_YUY2', u'116', [], []]
parseName: const cv.COLOR_YUV2BGR_YUY2 with ['', 'cv'] -> fullname:cv::COLOR_YUV2BGR_YUY2 namespace:cv classpath: classname: name:COLOR_YUV2BGR_YUY2

--- Incoming ---
[u'const cv.COLOR_YUV2RGB_YVYU', u'117', [], []]
parseName: const cv.COLOR_YUV2RGB_YVYU with ['', 'cv'] -> fullname:cv::COLOR_YUV2RGB_YVYU namespace:cv classpath: classname: name:COLOR_YUV2RGB_YVYU

--- Incoming ---
[u'const cv.COLOR_YUV2BGR_YVYU', u'118', [], []]
parseName: const cv.COLOR_YUV2BGR_YVYU with ['', 'cv'] -> fullname:cv::COLOR_YUV2BGR_YVYU namespace:cv classpath: classname: name:COLOR_YUV2BGR_YVYU

--- Incoming ---
[u'const cv.COLOR_YUV2RGB_YUYV', u'COLOR_YUV2RGB_YUY2', [], []]
parseName: const cv.COLOR_YUV2RGB_YUYV with ['', 'cv'] -> fullname:cv::COLOR_YUV2RGB_YUYV namespace:cv classpath: classname: name:COLOR_YUV2RGB_YUYV

--- Incoming ---
[u'const cv.COLOR_YUV2BGR_YUYV', u'COLOR_YUV2BGR_YUY2', [], []]
parseName: const cv.COLOR_YUV2BGR_YUYV with ['', 'cv'] -> fullname:cv::COLOR_YUV2BGR_YUYV namespace:cv classpath: classname: name:COLOR_YUV2BGR_YUYV

--- Incoming ---
[u'const cv.COLOR_YUV2RGB_YUNV', u'COLOR_YUV2RGB_YUY2', [], []]
parseName: const cv.COLOR_YUV2RGB_YUNV with ['', 'cv'] -> fullname:cv::COLOR_YUV2RGB_YUNV namespace:cv classpath: classname: name:COLOR_YUV2RGB_YUNV

--- Incoming ---
[u'const cv.COLOR_YUV2BGR_YUNV', u'COLOR_YUV2BGR_YUY2', [], []]
parseName: const cv.COLOR_YUV2BGR_YUNV with ['', 'cv'] -> fullname:cv::COLOR_YUV2BGR_YUNV namespace:cv classpath: classname: name:COLOR_YUV2BGR_YUNV

--- Incoming ---
[u'const cv.COLOR_YUV2RGBA_YUY2', u'119', [], []]
parseName: const cv.COLOR_YUV2RGBA_YUY2 with ['', 'cv'] -> fullname:cv::COLOR_YUV2RGBA_YUY2 namespace:cv classpath: classname: name:COLOR_YUV2RGBA_YUY2

--- Incoming ---
[u'const cv.COLOR_YUV2BGRA_YUY2', u'120', [], []]
parseName: const cv.COLOR_YUV2BGRA_YUY2 with ['', 'cv'] -> fullname:cv::COLOR_YUV2BGRA_YUY2 namespace:cv classpath: classname: name:COLOR_YUV2BGRA_YUY2

--- Incoming ---
[u'const cv.COLOR_YUV2RGBA_YVYU', u'121', [], []]
parseName: const cv.COLOR_YUV2RGBA_YVYU with ['', 'cv'] -> fullname:cv::COLOR_YUV2RGBA_YVYU namespace:cv classpath: classname: name:COLOR_YUV2RGBA_YVYU

--- Incoming ---
[u'const cv.COLOR_YUV2BGRA_YVYU', u'122', [], []]
parseName: const cv.COLOR_YUV2BGRA_YVYU with ['', 'cv'] -> fullname:cv::COLOR_YUV2BGRA_YVYU namespace:cv classpath: classname: name:COLOR_YUV2BGRA_YVYU

--- Incoming ---
[u'const cv.COLOR_YUV2RGBA_YUYV', u'COLOR_YUV2RGBA_YUY2', [], []]
parseName: const cv.COLOR_YUV2RGBA_YUYV with ['', 'cv'] -> fullname:cv::COLOR_YUV2RGBA_YUYV namespace:cv classpath: classname: name:COLOR_YUV2RGBA_YUYV

--- Incoming ---
[u'const cv.COLOR_YUV2BGRA_YUYV', u'COLOR_YUV2BGRA_YUY2', [], []]
parseName: const cv.COLOR_YUV2BGRA_YUYV with ['', 'cv'] -> fullname:cv::COLOR_YUV2BGRA_YUYV namespace:cv classpath: classname: name:COLOR_YUV2BGRA_YUYV

--- Incoming ---
[u'const cv.COLOR_YUV2RGBA_YUNV', u'COLOR_YUV2RGBA_YUY2', [], []]
parseName: const cv.COLOR_YUV2RGBA_YUNV with ['', 'cv'] -> fullname:cv::COLOR_YUV2RGBA_YUNV namespace:cv classpath: classname: name:COLOR_YUV2RGBA_YUNV

--- Incoming ---
[u'const cv.COLOR_YUV2BGRA_YUNV', u'COLOR_YUV2BGRA_YUY2', [], []]
parseName: const cv.COLOR_YUV2BGRA_YUNV with ['', 'cv'] -> fullname:cv::COLOR_YUV2BGRA_YUNV namespace:cv classpath: classname: name:COLOR_YUV2BGRA_YUNV

--- Incoming ---
[u'const cv.COLOR_YUV2GRAY_UYVY', u'123', [], []]
parseName: const cv.COLOR_YUV2GRAY_UYVY with ['', 'cv'] -> fullname:cv::COLOR_YUV2GRAY_UYVY namespace:cv classpath: classname: name:COLOR_YUV2GRAY_UYVY

--- Incoming ---
[u'const cv.COLOR_YUV2GRAY_YUY2', u'124', [], []]
parseName: const cv.COLOR_YUV2GRAY_YUY2 with ['', 'cv'] -> fullname:cv::COLOR_YUV2GRAY_YUY2 namespace:cv classpath: classname: name:COLOR_YUV2GRAY_YUY2

--- Incoming ---
[u'const cv.COLOR_YUV2GRAY_Y422', u'COLOR_YUV2GRAY_UYVY', [], []]
parseName: const cv.COLOR_YUV2GRAY_Y422 with ['', 'cv'] -> fullname:cv::COLOR_YUV2GRAY_Y422 namespace:cv classpath: classname: name:COLOR_YUV2GRAY_Y422

--- Incoming ---
[u'const cv.COLOR_YUV2GRAY_UYNV', u'COLOR_YUV2GRAY_UYVY', [], []]
parseName: const cv.COLOR_YUV2GRAY_UYNV with ['', 'cv'] -> fullname:cv::COLOR_YUV2GRAY_UYNV namespace:cv classpath: classname: name:COLOR_YUV2GRAY_UYNV

--- Incoming ---
[u'const cv.COLOR_YUV2GRAY_YVYU', u'COLOR_YUV2GRAY_YUY2', [], []]
parseName: const cv.COLOR_YUV2GRAY_YVYU with ['', 'cv'] -> fullname:cv::COLOR_YUV2GRAY_YVYU namespace:cv classpath: classname: name:COLOR_YUV2GRAY_YVYU

--- Incoming ---
[u'const cv.COLOR_YUV2GRAY_YUYV', u'COLOR_YUV2GRAY_YUY2', [], []]
parseName: const cv.COLOR_YUV2GRAY_YUYV with ['', 'cv'] -> fullname:cv::COLOR_YUV2GRAY_YUYV namespace:cv classpath: classname: name:COLOR_YUV2GRAY_YUYV

--- Incoming ---
[u'const cv.COLOR_YUV2GRAY_YUNV', u'COLOR_YUV2GRAY_YUY2', [], []]
parseName: const cv.COLOR_YUV2GRAY_YUNV with ['', 'cv'] -> fullname:cv::COLOR_YUV2GRAY_YUNV namespace:cv classpath: classname: name:COLOR_YUV2GRAY_YUNV

--- Incoming ---
[u'const cv.COLOR_RGBA2mRGBA', u'125', [], []]
parseName: const cv.COLOR_RGBA2mRGBA with ['', 'cv'] -> fullname:cv::COLOR_RGBA2mRGBA namespace:cv classpath: classname: name:COLOR_RGBA2mRGBA

--- Incoming ---
[u'const cv.COLOR_mRGBA2RGBA', u'126', [], []]
parseName: const cv.COLOR_mRGBA2RGBA with ['', 'cv'] -> fullname:cv::COLOR_mRGBA2RGBA namespace:cv classpath: classname: name:COLOR_mRGBA2RGBA

--- Incoming ---
[u'const cv.COLOR_RGB2YUV_I420', u'127', [], []]
parseName: const cv.COLOR_RGB2YUV_I420 with ['', 'cv'] -> fullname:cv::COLOR_RGB2YUV_I420 namespace:cv classpath: classname: name:COLOR_RGB2YUV_I420

--- Incoming ---
[u'const cv.COLOR_BGR2YUV_I420', u'128', [], []]
parseName: const cv.COLOR_BGR2YUV_I420 with ['', 'cv'] -> fullname:cv::COLOR_BGR2YUV_I420 namespace:cv classpath: classname: name:COLOR_BGR2YUV_I420

--- Incoming ---
[u'const cv.COLOR_RGB2YUV_IYUV', u'COLOR_RGB2YUV_I420', [], []]
parseName: const cv.COLOR_RGB2YUV_IYUV with ['', 'cv'] -> fullname:cv::COLOR_RGB2YUV_IYUV namespace:cv classpath: classname: name:COLOR_RGB2YUV_IYUV

--- Incoming ---
[u'const cv.COLOR_BGR2YUV_IYUV', u'COLOR_BGR2YUV_I420', [], []]
parseName: const cv.COLOR_BGR2YUV_IYUV with ['', 'cv'] -> fullname:cv::COLOR_BGR2YUV_IYUV namespace:cv classpath: classname: name:COLOR_BGR2YUV_IYUV

--- Incoming ---
[u'const cv.COLOR_RGBA2YUV_I420', u'129', [], []]
parseName: const cv.COLOR_RGBA2YUV_I420 with ['', 'cv'] -> fullname:cv::COLOR_RGBA2YUV_I420 namespace:cv classpath: classname: name:COLOR_RGBA2YUV_I420

--- Incoming ---
[u'const cv.COLOR_BGRA2YUV_I420', u'130', [], []]
parseName: const cv.COLOR_BGRA2YUV_I420 with ['', 'cv'] -> fullname:cv::COLOR_BGRA2YUV_I420 namespace:cv classpath: classname: name:COLOR_BGRA2YUV_I420

--- Incoming ---
[u'const cv.COLOR_RGBA2YUV_IYUV', u'COLOR_RGBA2YUV_I420', [], []]
parseName: const cv.COLOR_RGBA2YUV_IYUV with ['', 'cv'] -> fullname:cv::COLOR_RGBA2YUV_IYUV namespace:cv classpath: classname: name:COLOR_RGBA2YUV_IYUV

--- Incoming ---
[u'const cv.COLOR_BGRA2YUV_IYUV', u'COLOR_BGRA2YUV_I420', [], []]
parseName: const cv.COLOR_BGRA2YUV_IYUV with ['', 'cv'] -> fullname:cv::COLOR_BGRA2YUV_IYUV namespace:cv classpath: classname: name:COLOR_BGRA2YUV_IYUV

--- Incoming ---
[u'const cv.COLOR_RGB2YUV_YV12', u'131', [], []]
parseName: const cv.COLOR_RGB2YUV_YV12 with ['', 'cv'] -> fullname:cv::COLOR_RGB2YUV_YV12 namespace:cv classpath: classname: name:COLOR_RGB2YUV_YV12

--- Incoming ---
[u'const cv.COLOR_BGR2YUV_YV12', u'132', [], []]
parseName: const cv.COLOR_BGR2YUV_YV12 with ['', 'cv'] -> fullname:cv::COLOR_BGR2YUV_YV12 namespace:cv classpath: classname: name:COLOR_BGR2YUV_YV12

--- Incoming ---
[u'const cv.COLOR_RGBA2YUV_YV12', u'133', [], []]
parseName: const cv.COLOR_RGBA2YUV_YV12 with ['', 'cv'] -> fullname:cv::COLOR_RGBA2YUV_YV12 namespace:cv classpath: classname: name:COLOR_RGBA2YUV_YV12

--- Incoming ---
[u'const cv.COLOR_BGRA2YUV_YV12', u'134', [], []]
parseName: const cv.COLOR_BGRA2YUV_YV12 with ['', 'cv'] -> fullname:cv::COLOR_BGRA2YUV_YV12 namespace:cv classpath: classname: name:COLOR_BGRA2YUV_YV12

--- Incoming ---
[u'const cv.COLOR_COLORCVT_MAX', u'135', [], []]
parseName: const cv.COLOR_COLORCVT_MAX with ['', 'cv'] -> fullname:cv::COLOR_COLORCVT_MAX namespace:cv classpath: classname: name:COLOR_COLORCVT_MAX

--- Incoming ---
[   u'cv.cvtColor',
    u'void',
    ['/NW'],
    [   [u'InputArray', u'src', '', []],
        [u'OutputArray', u'dst', '', []],
        [u'int', u'code', '', []],
        [u'int', u'dstCn', u'0', []]],
    u'converts image from one color space to another\n']
parseName: cv.cvtColor with ['', 'cv'] -> fullname:cv::cvtColor namespace:cv classpath: classname: name:cvtColor
register (function) cvtColor

--- Incoming ---
[   u'class cv.Moments',
    '',
    ['/Map'],
    [   [u'double', u'm00', '', ['/RW']],
        [u'double', u'm10', '', ['/RW']],
        [u'double', u'm01', '', ['/RW']],
        [u'double', u'm20', '', ['/RW']],
        [u'double', u'm11', '', ['/RW']],
        [u'double', u'm02', '', ['/RW']],
        [u'double', u'm30', '', ['/RW']],
        [u'double', u'm21', '', ['/RW']],
        [u'double', u'm12', '', ['/RW']],
        [u'double', u'm03', '', ['/RW']],
        [u'double', u'mu20', '', ['/RW']],
        [u'double', u'mu11', '', ['/RW']],
        [u'double', u'mu02', '', ['/RW']],
        [u'double', u'mu30', '', ['/RW']],
        [u'double', u'mu21', '', ['/RW']],
        [u'double', u'mu12', '', ['/RW']],
        [u'double', u'mu03', '', ['/RW']],
        [u'double', u'nu20', '', ['/RW']],
        [u'double', u'nu11', '', ['/RW']],
        [u'double', u'nu02', '', ['/RW']],
        [u'double', u'nu30', '', ['/RW']],
        [u'double', u'nu21', '', ['/RW']],
        [u'double', u'nu12', '', ['/RW']],
        [u'double', u'nu03', '', ['/RW']]],
    u'raster image moments\n']
parseName: class cv.Moments with ['', 'cv'] -> fullname:cv::Moments namespace:cv classpath: classname: name:Moments
register class cv::Moments ([u'class cv.Moments', '', ['/Map'], [[u'double', u'm00', '', ['/RW']], [u'double', u'm10', '', ['/RW']], [u'double', u'm01', '', ['/RW']], [u'double', u'm20', '', ['/RW']], [u'double', u'm11', '', ['/RW']], [u'double', u'm02', '', ['/RW']], [u'double', u'm30', '', ['/RW']], [u'double', u'm21', '', ['/RW']], [u'double', u'm12', '', ['/RW']], [u'double', u'm03', '', ['/RW']], [u'double', u'mu20', '', ['/RW']], [u'double', u'mu11', '', ['/RW']], [u'double', u'mu02', '', ['/RW']], [u'double', u'mu30', '', ['/RW']], [u'double', u'mu21', '', ['/RW']], [u'double', u'mu12', '', ['/RW']], [u'double', u'mu03', '', ['/RW']], [u'double', u'nu20', '', ['/RW']], [u'double', u'nu11', '', ['/RW']], [u'double', u'nu02', '', ['/RW']], [u'double', u'nu30', '', ['/RW']], [u'double', u'nu21', '', ['/RW']], [u'double', u'nu12', '', ['/RW']], [u'double', u'nu03', '', ['/RW']]], u'raster image moments\n'])

--- Incoming ---
[u'cv.Moments.Moments', u'', ['/NW'], [], u'the default constructor\n']
parseName: cv.Moments.Moments with ['', 'cv'] -> fullname:cv::Moments::Moments namespace:cv classpath:Moments classname:Moments name:Moments
register (constructor) new in cv::Moments (simple)

--- Incoming ---
[   u'cv.Moments.Moments',
    u'',
    ['/NW'],
    [   [u'double', u'm00', '', []],
        [u'double', u'm10', '', []],
        [u'double', u'm01', '', []],
        [u'double', u'm20', '', []],
        [u'double', u'm11', '', []],
        [u'double', u'm02', '', []],
        [u'double', u'm30', '', []],
        [u'double', u'm21', '', []],
        [u'double', u'm12', '', []],
        [u'double', u'm03', '', []]],
    u'the full constructor\n']
parseName: cv.Moments.Moments with ['', 'cv'] -> fullname:cv::Moments::Moments namespace:cv classpath:Moments classname:Moments name:Moments
register (constructor) new in cv::Moments (simple)

--- Incoming ---
[   u'cv.Moments.Moments',
    u'',
    ['/NW'],
    [[u'const CvMoments&', u'moments', '', []]],
    u'the conversion from CvMoments\n']
parseName: cv.Moments.Moments with ['', 'cv'] -> fullname:cv::Moments::Moments namespace:cv classpath:Moments classname:Moments name:Moments
register (constructor) new in cv::Moments (simple)

--- Incoming ---
[   u'cv.Moments.operator CvMoments',
    u'',
    ['/NW', '/C'],
    [],
    u'the conversion to CvMoments\n']
parseName: cv.Moments.operator CvMoments with ['', 'cv'] -> fullname:cv::Moments::operator CvMoments namespace:cv classpath:Moments classname:Moments name:operator CvMoments
ignore (method) operator CvMoments in cv::Moments (simple)

--- Incoming ---
[   u'cv.moments',
    u'Moments',
    ['/NW'],
    [   [u'InputArray', u'array', '', []],
        [u'bool', u'binaryImage', u'false', []]],
    u'computes moments of the rasterized shape or a vector of points\n']
parseName: cv.moments with ['', 'cv'] -> fullname:cv::moments namespace:cv classpath: classname: name:moments
register (function) moments

--- Incoming ---
[   u'cv.HuMoments',
    u'void',
    ['/NW'],
    [[u'const Moments&', u'moments', '', []], [u'double[7]', u'hu', '', []]],
    u'computes 7 Hu invariants from the moments\n']
parseName: cv.HuMoments with ['', 'cv'] -> fullname:cv::HuMoments namespace:cv classpath: classname: name:HuMoments
Registering an unknown type: double[7]
register (function) HuMoments

--- Incoming ---
[   u'cv.HuMoments',
    u'void',
    ['/NW'],
    [[u'const Moments&', u'm', '', []], [u'OutputArray', u'hu', '', []]],
    '']
parseName: cv.HuMoments with ['', 'cv'] -> fullname:cv::HuMoments namespace:cv classpath: classname: name:HuMoments
register (function) HuMoments

--- Incoming ---
[u'const cv.TM_SQDIFF', u'0', [], []]
parseName: const cv.TM_SQDIFF with ['', 'cv'] -> fullname:cv::TM_SQDIFF namespace:cv classpath: classname: name:TM_SQDIFF

--- Incoming ---
[u'const cv.TM_SQDIFF_NORMED', u'1', [], []]
parseName: const cv.TM_SQDIFF_NORMED with ['', 'cv'] -> fullname:cv::TM_SQDIFF_NORMED namespace:cv classpath: classname: name:TM_SQDIFF_NORMED

--- Incoming ---
[u'const cv.TM_CCORR', u'2', [], []]
parseName: const cv.TM_CCORR with ['', 'cv'] -> fullname:cv::TM_CCORR namespace:cv classpath: classname: name:TM_CCORR

--- Incoming ---
[u'const cv.TM_CCORR_NORMED', u'3', [], []]
parseName: const cv.TM_CCORR_NORMED with ['', 'cv'] -> fullname:cv::TM_CCORR_NORMED namespace:cv classpath: classname: name:TM_CCORR_NORMED

--- Incoming ---
[u'const cv.TM_CCOEFF', u'4', [], []]
parseName: const cv.TM_CCOEFF with ['', 'cv'] -> fullname:cv::TM_CCOEFF namespace:cv classpath: classname: name:TM_CCOEFF

--- Incoming ---
[u'const cv.TM_CCOEFF_NORMED', u'5', [], []]
parseName: const cv.TM_CCOEFF_NORMED with ['', 'cv'] -> fullname:cv::TM_CCOEFF_NORMED namespace:cv classpath: classname: name:TM_CCOEFF_NORMED

--- Incoming ---
[   u'cv.matchTemplate',
    u'void',
    ['/NW'],
    [   [u'InputArray', u'image', '', []],
        [u'InputArray', u'templ', '', []],
        [u'OutputArray', u'result', '', []],
        [u'int', u'method', '', []]],
    u'computes the proximity map for the raster template and the image where the template is searched for\n']
parseName: cv.matchTemplate with ['', 'cv'] -> fullname:cv::matchTemplate namespace:cv classpath: classname: name:matchTemplate
register (function) matchTemplate

--- Incoming ---
[u'const cv.RETR_EXTERNAL', u'CV_RETR_EXTERNAL', [], []]
parseName: const cv.RETR_EXTERNAL with ['', 'cv'] -> fullname:cv::RETR_EXTERNAL namespace:cv classpath: classname: name:RETR_EXTERNAL

--- Incoming ---
[u'const cv.RETR_LIST', u'CV_RETR_LIST', [], []]
parseName: const cv.RETR_LIST with ['', 'cv'] -> fullname:cv::RETR_LIST namespace:cv classpath: classname: name:RETR_LIST

--- Incoming ---
[u'const cv.RETR_CCOMP', u'CV_RETR_CCOMP', [], []]
parseName: const cv.RETR_CCOMP with ['', 'cv'] -> fullname:cv::RETR_CCOMP namespace:cv classpath: classname: name:RETR_CCOMP

--- Incoming ---
[u'const cv.RETR_TREE', u'CV_RETR_TREE', [], []]
parseName: const cv.RETR_TREE with ['', 'cv'] -> fullname:cv::RETR_TREE namespace:cv classpath: classname: name:RETR_TREE

--- Incoming ---
[u'const cv.RETR_FLOODFILL', u'CV_RETR_FLOODFILL', [], []]
parseName: const cv.RETR_FLOODFILL with ['', 'cv'] -> fullname:cv::RETR_FLOODFILL namespace:cv classpath: classname: name:RETR_FLOODFILL

--- Incoming ---
[u'const cv.CHAIN_APPROX_NONE', u'CV_CHAIN_APPROX_NONE', [], []]
parseName: const cv.CHAIN_APPROX_NONE with ['', 'cv'] -> fullname:cv::CHAIN_APPROX_NONE namespace:cv classpath: classname: name:CHAIN_APPROX_NONE

--- Incoming ---
[u'const cv.CHAIN_APPROX_SIMPLE', u'CV_CHAIN_APPROX_SIMPLE', [], []]
parseName: const cv.CHAIN_APPROX_SIMPLE with ['', 'cv'] -> fullname:cv::CHAIN_APPROX_SIMPLE namespace:cv classpath: classname: name:CHAIN_APPROX_SIMPLE

--- Incoming ---
[u'const cv.CHAIN_APPROX_TC89_L1', u'CV_CHAIN_APPROX_TC89_L1', [], []]
parseName: const cv.CHAIN_APPROX_TC89_L1 with ['', 'cv'] -> fullname:cv::CHAIN_APPROX_TC89_L1 namespace:cv classpath: classname: name:CHAIN_APPROX_TC89_L1

--- Incoming ---
[u'const cv.CHAIN_APPROX_TC89_KCOS', u'CV_CHAIN_APPROX_TC89_KCOS', [], []]
parseName: const cv.CHAIN_APPROX_TC89_KCOS with ['', 'cv'] -> fullname:cv::CHAIN_APPROX_TC89_KCOS namespace:cv classpath: classname: name:CHAIN_APPROX_TC89_KCOS

--- Incoming ---
[   u'cv.findContours',
    u'void',
    ['/NW'],
    [   [u'InputOutputArray', u'image', '', []],
        [u'OutputArrayOfArrays', u'contours', '', []],
        [u'OutputArray', u'hierarchy', '', []],
        [u'int', u'mode', '', []],
        [u'int', u'method', '', []],
        [u'Point', u'offset', u'Point()', []]],
    u'retrieves contours and the hierarchical information from black-n-white image.\n']
parseName: cv.findContours with ['', 'cv'] -> fullname:cv::findContours namespace:cv classpath: classname: name:findContours
register (function) findContours

--- Incoming ---
[   u'cv.findContours',
    u'void',
    ['/NW'],
    [   [u'InputOutputArray', u'image', '', []],
        [u'OutputArrayOfArrays', u'contours', '', []],
        [u'int', u'mode', '', []],
        [u'int', u'method', '', []],
        [u'Point', u'offset', u'Point()', []]],
    u'retrieves contours from black-n-white image.\n']
parseName: cv.findContours with ['', 'cv'] -> fullname:cv::findContours namespace:cv classpath: classname: name:findContours
register (function) findContours

--- Incoming ---
[   u'cv.drawContours',
    u'void',
    ['/NW'],
    [   [u'InputOutputArray', u'image', '', []],
        [u'InputArrayOfArrays', u'contours', '', []],
        [u'int', u'contourIdx', '', []],
        [u'const Scalar&', u'color', '', []],
        [u'int', u'thickness', u'1', []],
        [u'int', u'lineType', u'8', []],
        [u'InputArray', u'hierarchy', u'noArray()', []],
        [u'int', u'maxLevel', u'INT_MAX', []],
        [u'Point', u'offset', u'Point()', []]],
    u'draws contours in the image\n']
parseName: cv.drawContours with ['', 'cv'] -> fullname:cv::drawContours namespace:cv classpath: classname: name:drawContours
register (function) drawContours

--- Incoming ---
[   u'cv.approxPolyDP',
    u'void',
    ['/NW'],
    [   [u'InputArray', u'curve', '', []],
        [u'OutputArray', u'approxCurve', '', []],
        [u'double', u'epsilon', '', []],
        [u'bool', u'closed', '', []]],
    u'approximates contour or a curve using Douglas-Peucker algorithm\n']
parseName: cv.approxPolyDP with ['', 'cv'] -> fullname:cv::approxPolyDP namespace:cv classpath: classname: name:approxPolyDP
register (function) approxPolyDP

--- Incoming ---
[   u'cv.arcLength',
    u'double',
    ['/NW'],
    [[u'InputArray', u'curve', '', []], [u'bool', u'closed', '', []]],
    u'computes the contour perimeter (closed=true) or a curve length\n']
parseName: cv.arcLength with ['', 'cv'] -> fullname:cv::arcLength namespace:cv classpath: classname: name:arcLength
register (function) arcLength

--- Incoming ---
[   u'cv.boundingRect',
    u'Rect',
    ['/NW'],
    [[u'InputArray', u'points', '', []]],
    u'computes the bounding rectangle for a contour\n']
parseName: cv.boundingRect with ['', 'cv'] -> fullname:cv::boundingRect namespace:cv classpath: classname: name:boundingRect
register (function) boundingRect

--- Incoming ---
[   u'cv.contourArea',
    u'double',
    ['/NW'],
    [   [u'InputArray', u'contour', '', []],
        [u'bool', u'oriented', u'false', []]],
    u'computes the contour area\n']
parseName: cv.contourArea with ['', 'cv'] -> fullname:cv::contourArea namespace:cv classpath: classname: name:contourArea
register (function) contourArea

--- Incoming ---
[   u'cv.minAreaRect',
    u'RotatedRect',
    ['/NW'],
    [[u'InputArray', u'points', '', []]],
    u'computes the minimal rotated rectangle for a set of points\n']
parseName: cv.minAreaRect with ['', 'cv'] -> fullname:cv::minAreaRect namespace:cv classpath: classname: name:minAreaRect
Registering an unknown type: RotatedRect
register (function) minAreaRect

--- Incoming ---
[   u'cv.minEnclosingCircle',
    u'void',
    ['/NW'],
    [   [u'InputArray', u'points', '', []],
        [u'Point2f&', u'center', '', []],
        [u'float&', u'radius', '', []]],
    u'computes the minimal enclosing circle for a set of points\n']
parseName: cv.minEnclosingCircle with ['', 'cv'] -> fullname:cv::minEnclosingCircle namespace:cv classpath: classname: name:minEnclosingCircle
register (function) minEnclosingCircle

--- Incoming ---
[   u'cv.matchShapes',
    u'double',
    ['/NW'],
    [   [u'InputArray', u'contour1', '', []],
        [u'InputArray', u'contour2', '', []],
        [u'int', u'method', '', []],
        [u'double', u'parameter', '', []]],
    u'matches two contours using one of the available algorithms\n']
parseName: cv.matchShapes with ['', 'cv'] -> fullname:cv::matchShapes namespace:cv classpath: classname: name:matchShapes
register (function) matchShapes

--- Incoming ---
[   u'cv.convexHull',
    u'void',
    ['/NW'],
    [   [u'InputArray', u'points', '', []],
        [u'OutputArray', u'hull', '', []],
        [u'bool', u'clockwise', u'false', []],
        [u'bool', u'returnPoints', u'true', []]],
    u'computes convex hull for a set of 2D points.\n']
parseName: cv.convexHull with ['', 'cv'] -> fullname:cv::convexHull namespace:cv classpath: classname: name:convexHull
register (function) convexHull

--- Incoming ---
[   u'cv.convexityDefects',
    u'void',
    ['/NW'],
    [   [u'InputArray', u'contour', '', []],
        [u'InputArray', u'convexhull', '', []],
        [u'OutputArray', u'convexityDefects', '', []]],
    u'computes the contour convexity defects\n']
parseName: cv.convexityDefects with ['', 'cv'] -> fullname:cv::convexityDefects namespace:cv classpath: classname: name:convexityDefects
register (function) convexityDefects

--- Incoming ---
[   u'cv.isContourConvex',
    u'bool',
    ['/NW'],
    [[u'InputArray', u'contour', '', []]],
    u'returns true if the contour is convex. Does not support contours with self-intersection\n']
parseName: cv.isContourConvex with ['', 'cv'] -> fullname:cv::isContourConvex namespace:cv classpath: classname: name:isContourConvex
register (function) isContourConvex

--- Incoming ---
[   u'cv.intersectConvexConvex',
    u'float',
    ['/NW'],
    [   [u'InputArray', u'_p1', '', []],
        [u'InputArray', u'_p2', '', []],
        [u'OutputArray', u'_p12', '', []],
        [u'bool', u'handleNested', u'true', []]],
    u'finds intersection of two convex polygons\n']
parseName: cv.intersectConvexConvex with ['', 'cv'] -> fullname:cv::intersectConvexConvex namespace:cv classpath: classname: name:intersectConvexConvex
register (function) intersectConvexConvex

--- Incoming ---
[   u'cv.fitEllipse',
    u'RotatedRect',
    ['/NW'],
    [[u'InputArray', u'points', '', []]],
    u'fits ellipse to the set of 2D points\n']
parseName: cv.fitEllipse with ['', 'cv'] -> fullname:cv::fitEllipse namespace:cv classpath: classname: name:fitEllipse
register (function) fitEllipse

--- Incoming ---
[   u'cv.fitLine',
    u'void',
    ['/NW'],
    [   [u'InputArray', u'points', '', []],
        [u'OutputArray', u'line', '', []],
        [u'int', u'distType', '', []],
        [u'double', u'param', '', []],
        [u'double', u'reps', '', []],
        [u'double', u'aeps', '', []]],
    u'fits line to the set of 2D points using M-estimator algorithm\n']
parseName: cv.fitLine with ['', 'cv'] -> fullname:cv::fitLine namespace:cv classpath: classname: name:fitLine
register (function) fitLine

--- Incoming ---
[   u'cv.pointPolygonTest',
    u'double',
    ['/NW'],
    [   [u'InputArray', u'contour', '', []],
        [u'Point2f', u'pt', '', []],
        [u'bool', u'measureDist', '', []]],
    u'checks if the point is inside the contour. Optionally computes the signed distance from the point to the contour boundary\n']
parseName: cv.pointPolygonTest with ['', 'cv'] -> fullname:cv::pointPolygonTest namespace:cv classpath: classname: name:pointPolygonTest
register (function) pointPolygonTest

--- Incoming ---
[u'class cv.Subdiv2D', '', [], [], '']
parseName: class cv.Subdiv2D with ['', 'cv'] -> fullname:cv::Subdiv2D namespace:cv classpath: classname: name:Subdiv2D
register class cv::Subdiv2D ([u'class cv.Subdiv2D', '', [], [], ''])

--- Incoming ---
[u'const cv.Subdiv2D.PTLOC_ERROR', u'-2', [], []]
parseName: const cv.Subdiv2D.PTLOC_ERROR with ['', 'cv'] -> fullname:cv::Subdiv2D::PTLOC_ERROR namespace:cv classpath:Subdiv2D classname:Subdiv2D name:PTLOC_ERROR

--- Incoming ---
[u'const cv.Subdiv2D.PTLOC_OUTSIDE_RECT', u'-1', [], []]
parseName: const cv.Subdiv2D.PTLOC_OUTSIDE_RECT with ['', 'cv'] -> fullname:cv::Subdiv2D::PTLOC_OUTSIDE_RECT namespace:cv classpath:Subdiv2D classname:Subdiv2D name:PTLOC_OUTSIDE_RECT

--- Incoming ---
[u'const cv.Subdiv2D.PTLOC_INSIDE', u'0', [], []]
parseName: const cv.Subdiv2D.PTLOC_INSIDE with ['', 'cv'] -> fullname:cv::Subdiv2D::PTLOC_INSIDE namespace:cv classpath:Subdiv2D classname:Subdiv2D name:PTLOC_INSIDE

--- Incoming ---
[u'const cv.Subdiv2D.PTLOC_VERTEX', u'1', [], []]
parseName: const cv.Subdiv2D.PTLOC_VERTEX with ['', 'cv'] -> fullname:cv::Subdiv2D::PTLOC_VERTEX namespace:cv classpath:Subdiv2D classname:Subdiv2D name:PTLOC_VERTEX

--- Incoming ---
[u'const cv.Subdiv2D.PTLOC_ON_EDGE', u'2', [], []]
parseName: const cv.Subdiv2D.PTLOC_ON_EDGE with ['', 'cv'] -> fullname:cv::Subdiv2D::PTLOC_ON_EDGE namespace:cv classpath:Subdiv2D classname:Subdiv2D name:PTLOC_ON_EDGE

--- Incoming ---
[u'const cv.Subdiv2D.NEXT_AROUND_ORG', u'0x00', [], []]
parseName: const cv.Subdiv2D.NEXT_AROUND_ORG with ['', 'cv'] -> fullname:cv::Subdiv2D::NEXT_AROUND_ORG namespace:cv classpath:Subdiv2D classname:Subdiv2D name:NEXT_AROUND_ORG

--- Incoming ---
[u'const cv.Subdiv2D.NEXT_AROUND_DST', u'0x22', [], []]
parseName: const cv.Subdiv2D.NEXT_AROUND_DST with ['', 'cv'] -> fullname:cv::Subdiv2D::NEXT_AROUND_DST namespace:cv classpath:Subdiv2D classname:Subdiv2D name:NEXT_AROUND_DST

--- Incoming ---
[u'const cv.Subdiv2D.PREV_AROUND_ORG', u'0x11', [], []]
parseName: const cv.Subdiv2D.PREV_AROUND_ORG with ['', 'cv'] -> fullname:cv::Subdiv2D::PREV_AROUND_ORG namespace:cv classpath:Subdiv2D classname:Subdiv2D name:PREV_AROUND_ORG

--- Incoming ---
[u'const cv.Subdiv2D.PREV_AROUND_DST', u'0x33', [], []]
parseName: const cv.Subdiv2D.PREV_AROUND_DST with ['', 'cv'] -> fullname:cv::Subdiv2D::PREV_AROUND_DST namespace:cv classpath:Subdiv2D classname:Subdiv2D name:PREV_AROUND_DST

--- Incoming ---
[u'const cv.Subdiv2D.NEXT_AROUND_LEFT', u'0x13', [], []]
parseName: const cv.Subdiv2D.NEXT_AROUND_LEFT with ['', 'cv'] -> fullname:cv::Subdiv2D::NEXT_AROUND_LEFT namespace:cv classpath:Subdiv2D classname:Subdiv2D name:NEXT_AROUND_LEFT

--- Incoming ---
[u'const cv.Subdiv2D.NEXT_AROUND_RIGHT', u'0x31', [], []]
parseName: const cv.Subdiv2D.NEXT_AROUND_RIGHT with ['', 'cv'] -> fullname:cv::Subdiv2D::NEXT_AROUND_RIGHT namespace:cv classpath:Subdiv2D classname:Subdiv2D name:NEXT_AROUND_RIGHT

--- Incoming ---
[u'const cv.Subdiv2D.PREV_AROUND_LEFT', u'0x20', [], []]
parseName: const cv.Subdiv2D.PREV_AROUND_LEFT with ['', 'cv'] -> fullname:cv::Subdiv2D::PREV_AROUND_LEFT namespace:cv classpath:Subdiv2D classname:Subdiv2D name:PREV_AROUND_LEFT

--- Incoming ---
[u'const cv.Subdiv2D.PREV_AROUND_RIGHT', u'0x02', [], []]
parseName: const cv.Subdiv2D.PREV_AROUND_RIGHT with ['', 'cv'] -> fullname:cv::Subdiv2D::PREV_AROUND_RIGHT namespace:cv classpath:Subdiv2D classname:Subdiv2D name:PREV_AROUND_RIGHT

--- Incoming ---
[u'cv.Subdiv2D.Subdiv2D', u'', ['/NW'], [], '']
parseName: cv.Subdiv2D.Subdiv2D with ['', 'cv'] -> fullname:cv::Subdiv2D::Subdiv2D namespace:cv classpath:Subdiv2D classname:Subdiv2D name:Subdiv2D
register (constructor) new in cv::Subdiv2D

--- Incoming ---
[u'cv.Subdiv2D.Subdiv2D', u'', ['/NW'], [[u'Rect', u'rect', '', []]], '']
parseName: cv.Subdiv2D.Subdiv2D with ['', 'cv'] -> fullname:cv::Subdiv2D::Subdiv2D namespace:cv classpath:Subdiv2D classname:Subdiv2D name:Subdiv2D
register (constructor) new in cv::Subdiv2D

--- Incoming ---
[   u'cv.Subdiv2D.initDelaunay',
    u'void',
    ['/NW'],
    [[u'Rect', u'rect', '', []]],
    '']
parseName: cv.Subdiv2D.initDelaunay with ['', 'cv'] -> fullname:cv::Subdiv2D::initDelaunay namespace:cv classpath:Subdiv2D classname:Subdiv2D name:initDelaunay
register (method) initDelaunay in cv::Subdiv2D

--- Incoming ---
[u'cv.Subdiv2D.insert', u'int', ['/NW'], [[u'Point2f', u'pt', '', []]], '']
parseName: cv.Subdiv2D.insert with ['', 'cv'] -> fullname:cv::Subdiv2D::insert namespace:cv classpath:Subdiv2D classname:Subdiv2D name:insert
register (method) insert in cv::Subdiv2D

--- Incoming ---
[   u'cv.Subdiv2D.insert',
    u'void',
    ['/NW'],
    [[u'const vector<Point2f>&', u'ptvec', '', []]],
    '']
parseName: cv.Subdiv2D.insert with ['', 'cv'] -> fullname:cv::Subdiv2D::insert namespace:cv classpath:Subdiv2D classname:Subdiv2D name:insert
register (method) insert in cv::Subdiv2D

--- Incoming ---
[   u'cv.Subdiv2D.locate',
    u'int',
    ['/NW'],
    [   [u'Point2f', u'pt', '', []],
        [u'int&', u'edge', '', []],
        [u'int&', u'vertex', '', []]],
    '']
parseName: cv.Subdiv2D.locate with ['', 'cv'] -> fullname:cv::Subdiv2D::locate namespace:cv classpath:Subdiv2D classname:Subdiv2D name:locate
register (method) locate in cv::Subdiv2D

--- Incoming ---
[   u'cv.Subdiv2D.findNearest',
    u'int',
    ['/NW'],
    [[u'Point2f', u'pt', '', []], [u'Point2f*', u'nearestPt', u'0', []]],
    '']
parseName: cv.Subdiv2D.findNearest with ['', 'cv'] -> fullname:cv::Subdiv2D::findNearest namespace:cv classpath:Subdiv2D classname:Subdiv2D name:findNearest
register (method) findNearest in cv::Subdiv2D

--- Incoming ---
[   u'cv.Subdiv2D.getEdgeList',
    u'void',
    ['/NW', '/C'],
    [[u'vector<Vec4f>&', u'edgeList', '', []]],
    '']
parseName: cv.Subdiv2D.getEdgeList with ['', 'cv'] -> fullname:cv::Subdiv2D::getEdgeList namespace:cv classpath:Subdiv2D classname:Subdiv2D name:getEdgeList
register (method) getEdgeList in cv::Subdiv2D

--- Incoming ---
[   u'cv.Subdiv2D.getTriangleList',
    u'void',
    ['/NW', '/C'],
    [[u'vector<Vec6f>&', u'triangleList', '', []]],
    '']
parseName: cv.Subdiv2D.getTriangleList with ['', 'cv'] -> fullname:cv::Subdiv2D::getTriangleList namespace:cv classpath:Subdiv2D classname:Subdiv2D name:getTriangleList
register (method) getTriangleList in cv::Subdiv2D

--- Incoming ---
[   u'cv.Subdiv2D.getVoronoiFacetList',
    u'void',
    ['/NW'],
    [   [u'const vector<int>&', u'idx', '', []],
        [u'vector<vector<Point2f> >&', u'facetList', '', []],
        [u'vector<Point2f>&', u'facetCenters', '', []]],
    '']
parseName: cv.Subdiv2D.getVoronoiFacetList with ['', 'cv'] -> fullname:cv::Subdiv2D::getVoronoiFacetList namespace:cv classpath:Subdiv2D classname:Subdiv2D name:getVoronoiFacetList
register (method) getVoronoiFacetList in cv::Subdiv2D

--- Incoming ---
[   u'cv.Subdiv2D.getVertex',
    u'Point2f',
    ['/NW', '/C'],
    [[u'int', u'vertex', '', []], [u'int*', u'firstEdge', u'0', []]],
    '']
parseName: cv.Subdiv2D.getVertex with ['', 'cv'] -> fullname:cv::Subdiv2D::getVertex namespace:cv classpath:Subdiv2D classname:Subdiv2D name:getVertex
register (method) getVertex in cv::Subdiv2D

--- Incoming ---
[   u'cv.Subdiv2D.getEdge',
    u'int',
    ['/NW', '/C'],
    [[u'int', u'edge', '', []], [u'int', u'nextEdgeType', '', []]],
    '']
parseName: cv.Subdiv2D.getEdge with ['', 'cv'] -> fullname:cv::Subdiv2D::getEdge namespace:cv classpath:Subdiv2D classname:Subdiv2D name:getEdge
register (method) getEdge in cv::Subdiv2D

--- Incoming ---
[   u'cv.Subdiv2D.nextEdge',
    u'int',
    ['/NW', '/C'],
    [[u'int', u'edge', '', []]],
    '']
parseName: cv.Subdiv2D.nextEdge with ['', 'cv'] -> fullname:cv::Subdiv2D::nextEdge namespace:cv classpath:Subdiv2D classname:Subdiv2D name:nextEdge
register (method) nextEdge in cv::Subdiv2D

--- Incoming ---
[   u'cv.Subdiv2D.rotateEdge',
    u'int',
    ['/NW', '/C'],
    [[u'int', u'edge', '', []], [u'int', u'rotate', '', []]],
    '']
parseName: cv.Subdiv2D.rotateEdge with ['', 'cv'] -> fullname:cv::Subdiv2D::rotateEdge namespace:cv classpath:Subdiv2D classname:Subdiv2D name:rotateEdge
register (method) rotateEdge in cv::Subdiv2D

--- Incoming ---
[   u'cv.Subdiv2D.symEdge',
    u'int',
    ['/NW', '/C'],
    [[u'int', u'edge', '', []]],
    '']
parseName: cv.Subdiv2D.symEdge with ['', 'cv'] -> fullname:cv::Subdiv2D::symEdge namespace:cv classpath:Subdiv2D classname:Subdiv2D name:symEdge
register (method) symEdge in cv::Subdiv2D

--- Incoming ---
[   u'cv.Subdiv2D.edgeOrg',
    u'int',
    ['/NW', '/C'],
    [[u'int', u'edge', '', []], [u'Point2f*', u'orgpt', u'0', []]],
    '']
parseName: cv.Subdiv2D.edgeOrg with ['', 'cv'] -> fullname:cv::Subdiv2D::edgeOrg namespace:cv classpath:Subdiv2D classname:Subdiv2D name:edgeOrg
register (method) edgeOrg in cv::Subdiv2D

--- Incoming ---
[   u'cv.Subdiv2D.edgeDst',
    u'int',
    ['/NW', '/C'],
    [[u'int', u'edge', '', []], [u'Point2f*', u'dstpt', u'0', []]],
    '']
parseName: cv.Subdiv2D.edgeDst with ['', 'cv'] -> fullname:cv::Subdiv2D::edgeDst namespace:cv classpath:Subdiv2D classname:Subdiv2D name:edgeDst
register (method) edgeDst in cv::Subdiv2D

--- Incoming ---
[u'cv.Subdiv2D.newEdge', u'int', ['/NW', '/H'], [], '']
parseName: cv.Subdiv2D.newEdge with ['', 'cv'] -> fullname:cv::Subdiv2D::newEdge namespace:cv classpath:Subdiv2D classname:Subdiv2D name:newEdge

--- Incoming ---
[   u'cv.Subdiv2D.deleteEdge',
    u'void',
    ['/NW', '/H'],
    [[u'int', u'edge', '', []]],
    '']
parseName: cv.Subdiv2D.deleteEdge with ['', 'cv'] -> fullname:cv::Subdiv2D::deleteEdge namespace:cv classpath:Subdiv2D classname:Subdiv2D name:deleteEdge

--- Incoming ---
[   u'cv.Subdiv2D.newPoint',
    u'int',
    ['/NW', '/H'],
    [   [u'Point2f', u'pt', '', []],
        [u'bool', u'is', '', []],
        [u'int', u'firstEdge', u'0', []]],
    '']
parseName: cv.Subdiv2D.newPoint with ['', 'cv'] -> fullname:cv::Subdiv2D::newPoint namespace:cv classpath:Subdiv2D classname:Subdiv2D name:newPoint

--- Incoming ---
[   u'cv.Subdiv2D.deletePoint',
    u'void',
    ['/NW', '/H'],
    [[u'int', u'vtx', '', []]],
    '']
parseName: cv.Subdiv2D.deletePoint with ['', 'cv'] -> fullname:cv::Subdiv2D::deletePoint namespace:cv classpath:Subdiv2D classname:Subdiv2D name:deletePoint

--- Incoming ---
[   u'cv.Subdiv2D.setEdgePoints',
    u'void',
    ['/NW', '/H'],
    [   [u'int', u'edge', '', []],
        [u'int', u'orgPt', '', []],
        [u'int', u'dstPt', '', []]],
    '']
parseName: cv.Subdiv2D.setEdgePoints with ['', 'cv'] -> fullname:cv::Subdiv2D::setEdgePoints namespace:cv classpath:Subdiv2D classname:Subdiv2D name:setEdgePoints

--- Incoming ---
[   u'cv.Subdiv2D.splice',
    u'void',
    ['/NW', '/H'],
    [[u'int', u'edgeA', '', []], [u'int', u'edgeB', '', []]],
    '']
parseName: cv.Subdiv2D.splice with ['', 'cv'] -> fullname:cv::Subdiv2D::splice namespace:cv classpath:Subdiv2D classname:Subdiv2D name:splice

--- Incoming ---
[   u'cv.Subdiv2D.connectEdges',
    u'int',
    ['/NW', '/H'],
    [[u'int', u'edgeA', '', []], [u'int', u'edgeB', '', []]],
    '']
parseName: cv.Subdiv2D.connectEdges with ['', 'cv'] -> fullname:cv::Subdiv2D::connectEdges namespace:cv classpath:Subdiv2D classname:Subdiv2D name:connectEdges

--- Incoming ---
[   u'cv.Subdiv2D.swapEdges',
    u'void',
    ['/NW', '/H'],
    [[u'int', u'edge', '', []]],
    '']
parseName: cv.Subdiv2D.swapEdges with ['', 'cv'] -> fullname:cv::Subdiv2D::swapEdges namespace:cv classpath:Subdiv2D classname:Subdiv2D name:swapEdges

--- Incoming ---
[   u'cv.Subdiv2D.isRightOf',
    u'int',
    ['/NW', '/C', '/H'],
    [[u'Point2f', u'pt', '', []], [u'int', u'edge', '', []]],
    '']
parseName: cv.Subdiv2D.isRightOf with ['', 'cv'] -> fullname:cv::Subdiv2D::isRightOf namespace:cv classpath:Subdiv2D classname:Subdiv2D name:isRightOf

--- Incoming ---
[u'cv.Subdiv2D.calcVoronoi', u'void', ['/NW', '/H'], [], '']
parseName: cv.Subdiv2D.calcVoronoi with ['', 'cv'] -> fullname:cv::Subdiv2D::calcVoronoi namespace:cv classpath:Subdiv2D classname:Subdiv2D name:calcVoronoi

--- Incoming ---
[u'cv.Subdiv2D.clearVoronoi', u'void', ['/NW', '/H'], [], '']
parseName: cv.Subdiv2D.clearVoronoi with ['', 'cv'] -> fullname:cv::Subdiv2D::clearVoronoi namespace:cv classpath:Subdiv2D classname:Subdiv2D name:clearVoronoi

--- Incoming ---
[u'cv.Subdiv2D.checkSubdiv', u'void', ['/NW', '/C', '/H'], [], '']
parseName: cv.Subdiv2D.checkSubdiv with ['', 'cv'] -> fullname:cv::Subdiv2D::checkSubdiv namespace:cv classpath:Subdiv2D classname:Subdiv2D name:checkSubdiv

--- Incoming ---
[u'struct cv.Subdiv2D.Vertex', '', ['/Hidden'], [], '']
parseName: struct cv.Subdiv2D.Vertex with ['', 'cv'] -> fullname:cv::Subdiv2D::Vertex namespace:cv classpath:Subdiv2D classname:Subdiv2D name:Vertex
register class cv::Subdiv2D::Vertex ([u'struct cv.Subdiv2D.Vertex', '', ['/Hidden'], [], '']) [ignored]

--- Incoming ---
[u'cv.Subdiv2D.Vertex.Vertex', u'', ['/NW'], [], '']
parseName: cv.Subdiv2D.Vertex.Vertex with ['', 'cv'] -> fullname:cv::Subdiv2D::Vertex::Vertex namespace:cv classpath:Subdiv2D::Vertex classname:Vertex name:Vertex
register (constructor) new in cv::Subdiv2D::Vertex

--- Incoming ---
[   u'cv.Subdiv2D.Vertex.Vertex',
    u'',
    ['/NW'],
    [   [u'Point2f', u'pt', '', []],
        [u'bool', u'_is', '', []],
        [u'int', u'_firstEdge', u'0', []]],
    '']
parseName: cv.Subdiv2D.Vertex.Vertex with ['', 'cv'] -> fullname:cv::Subdiv2D::Vertex::Vertex namespace:cv classpath:Subdiv2D::Vertex classname:Vertex name:Vertex
register (constructor) new in cv::Subdiv2D::Vertex

--- Incoming ---
[u'cv.Subdiv2D.Vertex.is', u'bool', ['/NW', '/C'], [], '']
parseName: cv.Subdiv2D.Vertex.is with ['', 'cv'] -> fullname:cv::Subdiv2D::Vertex::is namespace:cv classpath:Subdiv2D::Vertex classname:Vertex name:is
register (method) is in cv::Subdiv2D::Vertex

--- Incoming ---
[u'cv.Subdiv2D.Vertex.isfree', u'bool', ['/NW', '/C'], [], '']
parseName: cv.Subdiv2D.Vertex.isfree with ['', 'cv'] -> fullname:cv::Subdiv2D::Vertex::isfree namespace:cv classpath:Subdiv2D::Vertex classname:Vertex name:isfree
register (method) isfree in cv::Subdiv2D::Vertex

--- Incoming ---
[u'struct cv.Subdiv2D.QuadEdge', '', ['/Hidden'], [], '']
parseName: struct cv.Subdiv2D.QuadEdge with ['', 'cv'] -> fullname:cv::Subdiv2D::QuadEdge namespace:cv classpath:Subdiv2D classname:Subdiv2D name:QuadEdge
register class cv::Subdiv2D::QuadEdge ([u'struct cv.Subdiv2D.QuadEdge', '', ['/Hidden'], [], '']) [ignored]

--- Incoming ---
[u'cv.Subdiv2D.QuadEdge.QuadEdge', u'', ['/NW'], [], '']
parseName: cv.Subdiv2D.QuadEdge.QuadEdge with ['', 'cv'] -> fullname:cv::Subdiv2D::QuadEdge::QuadEdge namespace:cv classpath:Subdiv2D::QuadEdge classname:QuadEdge name:QuadEdge
register (constructor) new in cv::Subdiv2D::QuadEdge

--- Incoming ---
[   u'cv.Subdiv2D.QuadEdge.QuadEdge',
    u'',
    ['/NW'],
    [[u'int', u'edgeidx', '', []]],
    '']
parseName: cv.Subdiv2D.QuadEdge.QuadEdge with ['', 'cv'] -> fullname:cv::Subdiv2D::QuadEdge::QuadEdge namespace:cv classpath:Subdiv2D::QuadEdge classname:QuadEdge name:QuadEdge
register (constructor) new in cv::Subdiv2D::QuadEdge

--- Incoming ---
[u'cv.Subdiv2D.QuadEdge.isfree', u'bool', ['/NW', '/C'], [], '']
parseName: cv.Subdiv2D.QuadEdge.isfree with ['', 'cv'] -> fullname:cv::Subdiv2D::QuadEdge::isfree namespace:cv classpath:Subdiv2D::QuadEdge classname:QuadEdge name:isfree
register (method) isfree in cv::Subdiv2D::QuadEdge


===== Generating... =====
Generating func cv2DRotationMatrix (function)
  ignored: return type class RawPtr[Unknown[CvMat]] is ignored
Generating func cvAcc (function)
  ignored: can not map type Unknown[CvArr] yet
Generating func cvAdaptiveThreshold (function)
  ignored: can not map type Unknown[CvArr] yet
Generating func cvApproxChains (function)
  ignored: return type class RawPtr[Unknown[CvSeq]] is ignored
Generating func cvApproxPoly (function)
  ignored: return type class RawPtr[Unknown[CvSeq]] is ignored
Generating func cvArcLength (function)
  ignored: returning primitive by pointer is not supported (FIXME ?)
Generating func cvBoundingRect (function)
  ignored: return type class Unknown[CvRect] is ignored
Generating func cvBoxPoints (function)
  ignored: can not map type Unknown[CvBox2D] yet
Generating func cvCalcArrBackProjectPatch (function)
  ignored: can not map type RawPtr[Unknown[CvArr]] yet
Generating func cvCalcArrBackProject (function)
  ignored: can not map type RawPtr[Unknown[CvArr]] yet
Generating func cvCalcArrHist (function)
  ignored: can not map type RawPtr[Unknown[CvArr]] yet
Generating func cvCalcBayesianProb (function)
  ignored: can not map type RawPtr[Unknown[CvHistogram]] yet
Generating func cvCalcEMD2 (function)
  ignored: can not map type Unknown[CvArr] yet
Generating func cvCalcHist (function)
  ignored: can not map type RawPtr[Unknown[IplImage]] yet
Generating func cvCalcProbDensity (function)
  ignored: can not map type Unknown[CvHistogram] yet
Generating func cvCanny (function)
  ignored: can not map type Unknown[CvArr] yet
Generating func cvCheckContourConvexity (function)
  ignored: can not map type Unknown[CvArr] yet
Generating func cvClearHist (function)
  ignored: can not map type Unknown[CvHistogram] yet
Generating func cvCompareHist (function)
  ignored: can not map type Unknown[CvHistogram] yet
Generating func cvContourArea (function)
  ignored: can not map type Unknown[CvArr] yet
Generating func cvContourPerimeter (function)
  ignored: returning primitive by pointer is not supported (FIXME ?)
Generating func cvConvertMaps (function)
  ignored: can not map type Unknown[CvArr] yet
Generating func cvConvexHull2 (function)
  ignored: return type class RawPtr[Unknown[CvSeq]] is ignored
Generating func cvConvexityDefects (function)
  ignored: return type class RawPtr[Unknown[CvSeq]] is ignored
Generating func cvCopyHist (function)
  ignored: can not map type Unknown[CvHistogram] yet
Generating func cvCopyMakeBorder (function)
  ignored: can not map type Unknown[CvArr] yet
Generating func cvCornerEigenValsAndVecs (function)
  ignored: can not map type Unknown[CvArr] yet
Generating func cvCornerHarris (function)
  ignored: can not map type Unknown[CvArr] yet
Generating func cvCornerMinEigenVal (function)
  ignored: can not map type Unknown[CvArr] yet
Generating func cvCreateHist (function)
  ignored: return type class RawPtr[Unknown[CvHistogram]] is ignored
Generating func cvCreatePyramid (function)
  ignored: return type class RawPtr[RawPtr[Unknown[CvMat]]] is ignored
Generating func cvCreateStructuringElementEx (function)
  ignored: return type class RawPtr[Unknown[IplConvKernel]] is ignored
Generating func cvCvtColor (function)
  ignored: can not map type Unknown[CvArr] yet
Generating func cvDilate (function)
  ignored: can not map type Unknown[CvArr] yet
Generating func cvDistTransform (function)
  ignored: can not map type Unknown[CvArr] yet
Generating func cvEndFindContours (function)
  ignored: return type class RawPtr[Unknown[CvSeq]] is ignored
Generating func cvEqualizeHist (function)
  ignored: can not map type Unknown[CvArr] yet
Generating func cvErode (function)
  ignored: can not map type Unknown[CvArr] yet
Generating func cvFilter2D (function)
  ignored: can not map type Unknown[CvArr] yet
Generating func cvFindContours (function)
  ignored: can not map type Unknown[CvArr] yet
Generating func cvFindCornerSubPix (function)
  ignored: can not map type Unknown[CvArr] yet
Generating func cvFindNextContour (function)
  ignored: return type class RawPtr[Unknown[CvSeq]] is ignored
Generating func cvFitEllipse2 (function)
  ignored: return type class Unknown[CvBox2D] is ignored
Generating func cvFitLine (function)
  ignored: can not map type Unknown[CvArr] yet
Generating func cvFloodFill (function)
  ignored: can not map type Unknown[CvArr] yet
Generating func cvGetAffineTransform (function)
  ignored: return type class RawPtr[Unknown[CvMat]] is ignored
Generating func cvGetCentralMoment (function)
  ignored: can not map type CvMoments (boxed) yet
Generating func cvGetHuMoments (function)
  ignored: can not map type CvMoments (boxed) yet
Generating func cvGetMinMaxHistValue (function)
  ignored: can not map type Unknown[CvHistogram] yet
Generating func cvGetNormalizedCentralMoment (function)
  ignored: can not map type CvMoments (boxed) yet
Generating func cvGetPerspectiveTransform (function)
  ignored: return type class RawPtr[Unknown[CvMat]] is ignored
Generating func cvGetQuadrangleSubPix (function)
  ignored: can not map type Unknown[CvArr] yet
Generating func cvGetRectSubPix (function)
  ignored: can not map type Unknown[CvArr] yet
Generating func cvGetSpatialMoment (function)
  ignored: can not map type CvMoments (boxed) yet
Generating func cvGoodFeaturesToTrack (function)
  ignored: can not map type Unknown[CvArr] yet
Generating func cvHoughCircles (function)
  ignored: return type class RawPtr[Unknown[CvSeq]] is ignored
Generating func cvHoughLines2 (function)
  ignored: return type class RawPtr[Unknown[CvSeq]] is ignored
Generating func cvInitUndistortMap (function)
  ignored: can not map type Unknown[CvMat] yet
Generating func cvInitUndistortRectifyMap (function)
  ignored: can not map type Unknown[CvMat] yet
Generating func cvIntegral (function)
  ignored: can not map type Unknown[CvArr] yet
Generating func cvLaplace (function)
  ignored: can not map type Unknown[CvArr] yet
Generating func cvLinearPolar (function)
  ignored: can not map type Unknown[CvArr] yet
Generating func cvLogPolar (function)
  ignored: can not map type Unknown[CvArr] yet
Generating func cvMakeHistHeaderForArray (function)
  ignored: return type class RawPtr[Unknown[CvHistogram]] is ignored
Generating func cvMatchShapes (function)
  ignored: returning primitive by pointer is not supported (FIXME ?)
Generating func cvMatchTemplate (function)
  ignored: can not map type Unknown[CvArr] yet
Generating func cvMaxRect (function)
  ignored: return type class Unknown[CvRect] is ignored
Generating func cvMinAreaRect2 (function)
  ignored: return type class Unknown[CvBox2D] is ignored
Generating func cvMinEnclosingCircle (function)
  ignored: can not map type Unknown[CvArr] yet
Generating func cvMoments (function)
  ignored: can not map type Unknown[CvArr] yet
Generating func cvMorphologyEx (function)
  ignored: can not map type Unknown[CvArr] yet
Generating func cvMultiplyAcc (function)
  ignored: can not map type Unknown[CvArr] yet
Generating func cvNormalizeHist (function)
  ignored: can not map type Unknown[CvHistogram] yet
Generating func cvPointPolygonTest (function)
  ignored: can not map type Unknown[CvArr] yet
Generating func cvPointSeqFromMat (function)
  ignored: return type class RawPtr[Unknown[CvSeq]] is ignored
Generating func cvPreCornerDetect (function)
  ignored: can not map type Unknown[CvArr] yet
Generating func cvPyrDown (function)
  ignored: can not map type Unknown[CvArr] yet
Generating func cvPyrMeanShiftFiltering (function)
  ignored: can not map type Unknown[CvArr] yet
Generating func cvPyrUp (function)
  ignored: can not map type Unknown[CvArr] yet
Generating func cvReadChainPoint (function)
  ignored: return type class Unknown[CvPoint] is ignored
Generating func cvReleaseHist (function)
  ignored: can not map type RawPtr[Unknown[CvHistogram]] yet
Generating func cvReleasePyramid (function)
  ignored: can not map type RawPtr[RawPtr[Unknown[CvMat]]] yet
Generating func cvReleaseStructuringElement (function)
  ignored: can not map type RawPtr[Unknown[IplConvKernel]] yet
Generating func cvRemap (function)
  ignored: can not map type Unknown[CvArr] yet
Generating func cvResize (function)
  ignored: can not map type Unknown[CvArr] yet
Generating func cvRunningAvg (function)
  ignored: can not map type Unknown[CvArr] yet
Generating func cvSampleLine (function)
  ignored: can not map type Unknown[CvArr] yet
Generating func cvSetHistBinRanges (function)
  ignored: can not map type Unknown[CvHistogram] yet
Generating func cvSmooth (function)
  ignored: can not map type Unknown[CvArr] yet
Generating func cvSobel (function)
  ignored: can not map type Unknown[CvArr] yet
Generating func cvSquareAcc (function)
  ignored: can not map type Unknown[CvArr] yet
Generating func cvStartFindContours (function)
  ignored: return type class Unknown[CvContourScanner] is ignored
Generating func cvStartReadChainPoints (function)
  ignored: can not map type Unknown[CvChain] yet
Generating func cvSubstituteContour (function)
  ignored: can not map type Unknown[CvContourScanner] yet
Generating func cvThreshHist (function)
  ignored: can not map type Unknown[CvHistogram] yet
Generating func cvThreshold (function)
  ignored: can not map type Unknown[CvArr] yet
Generating func cvUndistort2 (function)
  ignored: can not map type Unknown[CvArr] yet
Generating func cvUndistortPoints (function)
  ignored: can not map type Unknown[CvMat] yet
Generating func cvWarpAffine (function)
  ignored: can not map type Unknown[CvArr] yet
Generating func cvWarpPerspective (function)
  ignored: can not map type Unknown[CvArr] yet
Generating func cvWatershed (function)
  ignored: can not map type Unknown[CvArr] yet
Generating func cv::Canny (function)
Generating func cv::EMD (function)
  ignored: returning primitive by pointer is not supported (FIXME ?)
Generating func cv::GaussianBlur (function)
Generating func cv::HoughCircles (function)
Generating func cv::HoughLinesP (function)
Generating func cv::HoughLines (function)
Generating func cv::HuMoments (function)
Generating func cv::HuMoments (function)
  ignored: can not map type Unknown[double[7]] yet
Generating func cv::Laplacian (function)
Generating func cv::PSNR (function)
Generating func cv::Scharr (function)
Generating func cv::Sobel (function)
Generating func cv::accumulateProduct (function)
  ignored: can not map type Unknown[InputOutputArray] yet
Generating func cv::accumulateSquare (function)
  ignored: can not map type Unknown[InputOutputArray] yet
Generating func cv::accumulateWeighted (function)
  ignored: can not map type Unknown[InputOutputArray] yet
Generating func cv::accumulate (function)
  ignored: can not map type Unknown[InputOutputArray] yet
Generating func cv::adaptiveBilateralFilter (function)
Generating func cv::adaptiveThreshold (function)
Generating func cv::approxPolyDP (function)
Generating func cv::arcLength (function)
Generating func cv::bilateralFilter (function)
Generating func cv::blur (function)
Generating func cv::borderInterpolate (function)
Generating func cv::boundingRect (function)
Generating func cv::boxFilter (function)
Generating func cv::buildPyramid (function)
  ignored: can not map type Unknown[OutputArrayOfArrays] yet
Generating func cv::calcBackProject (function)
  ignored: returning primitive by pointer is not supported (FIXME ?)
Generating func cv::calcBackProject (function)
  ignored: returning primitive by pointer is not supported (FIXME ?)
Generating func cv::calcBackProject (function)
  ignored: can not map type Unknown[InputArrayOfArrays] yet
Generating func cv::calcHist (function)
  ignored: returning primitive by pointer is not supported (FIXME ?)
Generating func cv::calcHist (function)
  ignored: returning primitive by pointer is not supported (FIXME ?)
Generating func cv::calcHist (function)
  ignored: can not map type Unknown[InputArrayOfArrays] yet
Generating func cv::compareHist (function)
Generating func cv::compareHist (function)
  ignored: can not map type Unknown[SparseMat] yet
Generating func cv::contourArea (function)
Generating func cv::convertMaps (function)
Generating func cv::convexHull (function)
Generating func cv::convexityDefects (function)
Generating func cv::copyMakeBorder (function)
Generating func cv::cornerEigenValsAndVecs (function)
Generating func cv::cornerHarris (function)
Generating func cv::cornerMinEigenVal (function)
Generating func cv::cornerSubPix (function)
  ignored: can not map type Unknown[InputOutputArray] yet
Generating func cv::createBoxFilter (function)
Generating func cv::createCLAHE (function)
  ignored: return type class SmartPtr[cv::CLAHE (boxed)] is ignored
Generating func cv::createDerivFilter (function)
Generating func cv::createGaussianFilter (function)
Generating func cv::createHanningWindow (function)
Generating func cv::createLinearFilter (function)
Generating func cv::createMorphologyFilter (function)
Generating func cv::createSeparableLinearFilter (function)
Generating func cv::cvtColor (function)
Generating func cv::dilate (function)
Generating func cv::distanceTransform (function)
Generating func cv::distanceTransform (function)
Generating func cv::drawContours (function)
  ignored: can not map type Unknown[InputOutputArray] yet
Generating func cv::eigen2x2 (function)
  ignored: returning primitive by pointer is not supported (FIXME ?)
Generating func cv::equalizeHist (function)
Generating func cv::erode (function)
Generating func cv::filter2D (function)
Generating func cv::findContours (function)
  ignored: can not map type Unknown[InputOutputArray] yet
Generating func cv::findContours (function)
  ignored: can not map type Unknown[InputOutputArray] yet
Generating func cv::fitEllipse (function)
  ignored: return type class Unknown[RotatedRect] is ignored
Generating func cv::fitLine (function)
Generating func cv::floodFill (function)
  ignored: can not map type Unknown[InputOutputArray] yet
Generating func cv::floodFill (function)
  ignored: can not map type Unknown[InputOutputArray] yet
Generating func cv::getAffineTransform (function)
Generating func cv::getAffineTransform (function)
  ignored: can not map type Unknown[Point2f[]] yet
Generating func cv::getColumnSumFilter (function)
  ignored: return type class SmartPtr[cv::BaseColumnFilter (boxed)] is ignored
Generating func cv::getDefaultNewCameraMatrix (function)
Generating func cv::getDerivKernels (function)
Generating func cv::getGaborKernel (function)
Generating func cv::getGaussianKernel (function)
Generating func cv::getKernelType (function)
Generating func cv::getLinearColumnFilter (function)
  ignored: return type class SmartPtr[cv::BaseColumnFilter (boxed)] is ignored
Generating func cv::getLinearFilter (function)
  ignored: return type class SmartPtr[cv::BaseFilter (boxed)] is ignored
Generating func cv::getLinearRowFilter (function)
  ignored: return type class SmartPtr[cv::BaseRowFilter (boxed)] is ignored
Generating func cv::getMorphologyColumnFilter (function)
  ignored: return type class SmartPtr[cv::BaseColumnFilter (boxed)] is ignored
Generating func cv::getMorphologyFilter (function)
  ignored: return type class SmartPtr[cv::BaseFilter (boxed)] is ignored
Generating func cv::getMorphologyRowFilter (function)
  ignored: return type class SmartPtr[cv::BaseRowFilter (boxed)] is ignored
Generating func cv::getPerspectiveTransform (function)
Generating func cv::getPerspectiveTransform (function)
  ignored: can not map type Unknown[Point2f[]] yet
Generating func cv::getRectSubPix (function)
Generating func cv::getRotationMatrix2D (function)
Generating func cv::getRowSumFilter (function)
  ignored: return type class SmartPtr[cv::BaseRowFilter (boxed)] is ignored
Generating func cv::getStructuringElement (function)
Generating func cv::goodFeaturesToTrack (function)
Generating func cv::grabCut (function)
  ignored: can not map type Unknown[InputOutputArray] yet
Generating func cv::initUndistortRectifyMap (function)
Generating func cv::initWideAngleProjMap (function)
Generating func cv::integral (function)
Generating func cv::integral (function)
Generating func cv::integral (function)
Generating func cv::intersectConvexConvex (function)
Generating func cv::invertAffineTransform (function)
Generating func cv::isContourConvex (function)
Generating func cv::matchShapes (function)
Generating func cv::matchTemplate (function)
Generating func cv::medianBlur (function)
Generating func cv::minAreaRect (function)
  ignored: return type class Unknown[RotatedRect] is ignored
Generating func cv::minEnclosingCircle (function)
Generating func cv::moments (function)
Generating func cv::morphologyDefaultBorderValue (function)
Generating func cv::morphologyEx (function)
Generating func cv::phaseCorrelateRes (function)
  ignored: returning primitive by pointer is not supported (FIXME ?)
Generating func cv::phaseCorrelate (function)
Generating func cv::pointPolygonTest (function)
Generating func cv::preCornerDetect (function)
Generating func cv::pyrDown (function)
Generating func cv::pyrMeanShiftFiltering (function)
  ignored: can not map type Unknown[TermCriteria] yet
Generating func cv::pyrUp (function)
Generating func cv::remap (function)
Generating func cv::resize (function)
Generating func cv::sepFilter2D (function)
Generating func cv::threshold (function)
Generating func cv::undistortPoints (function)
Generating func cv::undistort (function)
Generating func cv::warpAffine (function)
Generating func cv::warpPerspective (function)
Generating func cv::watershed (function)
  ignored: can not map type Unknown[InputOutputArray] yet
Generating impl for trait cv::CLAHE
Generating box for struct cv::FilterEngine
Generating box for cv::FilterEngine
Generating impl for struct cv::FilterEngine
Generating func cv::FilterEngine::FilterEngine (constructor) cv::FilterEngine . new
Generating func cv::FilterEngine::FilterEngine (constructor) cv::FilterEngine . new
  ignored: can not map type SmartPtr[cv::BaseFilter (boxed)] yet
Generating func cv::FilterEngine::init (method) cv::FilterEngine . init
  ignored: can not map type SmartPtr[cv::BaseFilter (boxed)] yet
Generating func cv::FilterEngine::start (method) cv::FilterEngine . start
Generating func cv::FilterEngine::start (method) cv::FilterEngine . start
Generating func cv::FilterEngine::proceed (method) cv::FilterEngine . proceed
  ignored: returning primitive by pointer is not supported (FIXME ?)
Generating func cv::FilterEngine::apply (method) cv::FilterEngine . apply
Generating func cv::FilterEngine::isSeparable (method) cv::FilterEngine . isSeparable
Generating func cv::FilterEngine::remainingInputRows (method) cv::FilterEngine . remainingInputRows
Generating func cv::FilterEngine::remainingOutputRows (method) cv::FilterEngine . remainingOutputRows
Generating impl for trait cv::GeneralizedHough
Generating func cv::GeneralizedHough::create (method) cv::GeneralizedHough . create
Generating func cv::GeneralizedHough::setTemplate (method) cv::GeneralizedHough . setTemplate
  ignored: ignored by renamed table
Generating func cv::GeneralizedHough::setTemplate (method) cv::GeneralizedHough . setTemplate
Generating func cv::GeneralizedHough::detect (method) cv::GeneralizedHough . detect
Generating func cv::GeneralizedHough::detect (method) cv::GeneralizedHough . detect
Generating func cv::GeneralizedHough::release (method) cv::GeneralizedHough . release
Generating box for struct cv::Moments (simple)
Generating impl for struct cv::Moments (simple)
Generating func cv::Moments::Moments (constructor) cv::Moments (simple) . new
Generating func cv::Moments::Moments (constructor) cv::Moments (simple) . new
Generating func cv::Moments::Moments (constructor) cv::Moments (simple) . new
  ignored: can not map type CvMoments (boxed) yet
Generating box for struct cv::Subdiv2D
Generating box for cv::Subdiv2D
Generating impl for struct cv::Subdiv2D
Generating func cv::Subdiv2D::Subdiv2D (constructor) cv::Subdiv2D . new
Generating func cv::Subdiv2D::Subdiv2D (constructor) cv::Subdiv2D . new
Generating func cv::Subdiv2D::initDelaunay (method) cv::Subdiv2D . initDelaunay
Generating func cv::Subdiv2D::insert (method) cv::Subdiv2D . insert
Generating func cv::Subdiv2D::insert (method) cv::Subdiv2D . insert
Generating func cv::Subdiv2D::locate (method) cv::Subdiv2D . locate
Generating func cv::Subdiv2D::findNearest (method) cv::Subdiv2D . findNearest
  ignored: returning primitive by pointer is not supported (FIXME ?)
Generating func cv::Subdiv2D::getEdgeList (method) cv::Subdiv2D . getEdgeList
Generating func cv::Subdiv2D::getTriangleList (method) cv::Subdiv2D . getTriangleList
Generating func cv::Subdiv2D::getVoronoiFacetList (method) cv::Subdiv2D . getVoronoiFacetList
Generating func cv::Subdiv2D::getVertex (method) cv::Subdiv2D . getVertex
  ignored: returning primitive by pointer is not supported (FIXME ?)
Generating func cv::Subdiv2D::getEdge (method) cv::Subdiv2D . getEdge
Generating func cv::Subdiv2D::nextEdge (method) cv::Subdiv2D . nextEdge
Generating func cv::Subdiv2D::rotateEdge (method) cv::Subdiv2D . rotateEdge
Generating func cv::Subdiv2D::symEdge (method) cv::Subdiv2D . symEdge
Generating func cv::Subdiv2D::edgeOrg (method) cv::Subdiv2D . edgeOrg
  ignored: returning primitive by pointer is not supported (FIXME ?)
Generating func cv::Subdiv2D::edgeDst (method) cv::Subdiv2D . edgeDst
  ignored: returning primitive by pointer is not supported (FIXME ?)
