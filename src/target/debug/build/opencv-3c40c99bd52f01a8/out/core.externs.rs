extern "C" {
#[doc(hidden)] pub fn cv_core_cvCeil_double_value(value: f64) -> cv_return_value_int;
#[doc(hidden)] pub fn cv_core_cvFloor_double_value(value: f64) -> cv_return_value_int;
#[doc(hidden)] pub fn cv_core_cvIplDepth_int_type(_type: i32) -> cv_return_value_int;
#[doc(hidden)] pub fn cv_core_cvIsInf_double_value(value: f64) -> cv_return_value_int;
#[doc(hidden)] pub fn cv_core_cvIsNaN_double_value(value: f64) -> cv_return_value_int;
#[doc(hidden)] pub fn cv_core_cvRNG_int64_seed(seed: i64) -> cv_return_value_c_CvRNG;
#[doc(hidden)] pub fn cv_core_cvRound_double_value(value: f64) -> cv_return_value_int;
#[doc(hidden)] pub fn cv_core_cv_LUT_InputArray_src_InputArray_lut_OutputArray_dst_int_interpolation(src: *mut c_void, lut: *mut c_void, dst: *mut c_void, interpolation: i32) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_Mahalanobis_InputArray_v1_InputArray_v2_InputArray_icovar(v1: *mut c_void, v2: *mut c_void, icovar: *mut c_void) -> cv_return_value_double;
#[doc(hidden)] pub fn cv_core_cv_Mahalonobis_InputArray_v1_InputArray_v2_InputArray_icovar(v1: *mut c_void, v2: *mut c_void, icovar: *mut c_void) -> cv_return_value_double;
#[doc(hidden)] pub fn cv_core_cv_PCABackProject_InputArray_data_InputArray_mean_InputArray_eigenvectors_OutputArray_result(data: *mut c_void, mean: *mut c_void, eigenvectors: *mut c_void, result: *mut c_void) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_PCAProject_InputArray_data_InputArray_mean_InputArray_eigenvectors_OutputArray_result(data: *mut c_void, mean: *mut c_void, eigenvectors: *mut c_void, result: *mut c_void) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_SVBackSubst_InputArray_w_InputArray_u_InputArray_vt_InputArray_rhs_OutputArray_dst(w: *mut c_void, u: *mut c_void, vt: *mut c_void, rhs: *mut c_void, dst: *mut c_void) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_SVDecomp_InputArray_src_OutputArray_w_OutputArray_u_OutputArray_vt_int_flags(src: *mut c_void, w: *mut c_void, u: *mut c_void, vt: *mut c_void, flags: i32) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_absdiff_InputArray_src1_InputArray_src2_OutputArray_dst(src1: *mut c_void, src2: *mut c_void, dst: *mut c_void) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_addWeighted_InputArray_src1_double_alpha_InputArray_src2_double_beta_double_gamma_OutputArray_dst_int_dtype(src1: *mut c_void, alpha: f64, src2: *mut c_void, beta: f64, gamma: f64, dst: *mut c_void, dtype: i32) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_add_InputArray_src1_InputArray_src2_OutputArray_dst_InputArray_mask_int_dtype(src1: *mut c_void, src2: *mut c_void, dst: *mut c_void, mask: *mut c_void, dtype: i32) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_alignSize_size_t_sz_int_n(sz: size_t, n: i32) -> cv_return_value_std_size_t;
#[doc(hidden)] pub fn cv_core_cv_arrowedLine_Mat_img_Point_pt1_Point_pt2_Scalar_color_int_thickness_int_line_type_int_shift_double_tipLength(img: *mut c_void, pt1: ::core::Point, pt2: ::core::Point, color: ::core::Scalar, thickness: i32, line_type: i32, shift: i32, tipLength: f64) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_batchDistance_InputArray_src1_InputArray_src2_OutputArray_dist_int_dtype_OutputArray_nidx_int_normType_int_K_InputArray_mask_int_update_bool_crosscheck(src1: *mut c_void, src2: *mut c_void, dist: *mut c_void, dtype: i32, nidx: *mut c_void, normType: i32, K: i32, mask: *mut c_void, update: i32, crosscheck: bool) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_bitwise_and_InputArray_src1_InputArray_src2_OutputArray_dst_InputArray_mask(src1: *mut c_void, src2: *mut c_void, dst: *mut c_void, mask: *mut c_void) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_bitwise_not_InputArray_src_OutputArray_dst_InputArray_mask(src: *mut c_void, dst: *mut c_void, mask: *mut c_void) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_bitwise_or_InputArray_src1_InputArray_src2_OutputArray_dst_InputArray_mask(src1: *mut c_void, src2: *mut c_void, dst: *mut c_void, mask: *mut c_void) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_bitwise_xor_InputArray_src1_InputArray_src2_OutputArray_dst_InputArray_mask(src1: *mut c_void, src2: *mut c_void, dst: *mut c_void, mask: *mut c_void) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_calcCovarMatrix_Mat_samples_int_nsamples_Mat_covar_Mat_mean_int_flags_int_ctype(samples: *mut c_void, nsamples: i32, covar: *mut c_void, mean: *mut c_void, flags: i32, ctype: i32) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_cartToPolar_InputArray_x_InputArray_y_OutputArray_magnitude_OutputArray_angle_bool_angleInDegrees(x: *mut c_void, y: *mut c_void, magnitude: *mut c_void, angle: *mut c_void, angleInDegrees: bool) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_checkHardwareSupport_int_feature(feature: i32) -> cv_return_value_char;
#[doc(hidden)] pub fn cv_core_cv_circle_Mat_img_Point_center_int_radius_Scalar_color_int_thickness_int_lineType_int_shift(img: *mut c_void, center: ::core::Point, radius: i32, color: ::core::Scalar, thickness: i32, lineType: i32, shift: i32) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_clipLine_Rect_imgRect_Point_pt1_Point_pt2(imgRect: ::core::Rect, pt1: ::core::Point, pt2: ::core::Point) -> cv_return_value_char;
#[doc(hidden)] pub fn cv_core_cv_clipLine_Size_imgSize_Point_pt1_Point_pt2(imgSize: ::core::Size, pt1: ::core::Point, pt2: ::core::Point) -> cv_return_value_char;
#[doc(hidden)] pub fn cv_core_cv_compare_InputArray_src1_InputArray_src2_OutputArray_dst_int_cmpop(src1: *mut c_void, src2: *mut c_void, dst: *mut c_void, cmpop: i32) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_convertScaleAbs_InputArray_src_OutputArray_dst_double_alpha_double_beta(src: *mut c_void, dst: *mut c_void, alpha: f64, beta: f64) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_countNonZero_InputArray_src(src: *mut c_void) -> cv_return_value_int;
#[doc(hidden)] pub fn cv_core_cv_cubeRoot_float_val(val: f32) -> cv_return_value_float;
#[doc(hidden)] pub fn cv_core_cv_dct_InputArray_src_OutputArray_dst_int_flags(src: *mut c_void, dst: *mut c_void, flags: i32) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_determinant_InputArray_mtx(mtx: *mut c_void) -> cv_return_value_double;
#[doc(hidden)] pub fn cv_core_cv_dft_InputArray_src_OutputArray_dst_int_flags_int_nonzeroRows(src: *mut c_void, dst: *mut c_void, flags: i32, nonzeroRows: i32) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_divide_InputArray_src1_InputArray_src2_OutputArray_dst_double_scale_int_dtype(src1: *mut c_void, src2: *mut c_void, dst: *mut c_void, scale: f64, dtype: i32) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_divide_double_scale_InputArray_src2_OutputArray_dst_int_dtype(scale: f64, src2: *mut c_void, dst: *mut c_void, dtype: i32) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_drawMarker_Mat_img_Point_position_Scalar_color_int_markerType_int_markerSize_int_thickness_int_line_type(img: *mut c_void, position: ::core::Point, color: ::core::Scalar, markerType: i32, markerSize: i32, thickness: i32, line_type: i32) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_eigen_InputArray_src_OutputArray_eigenvalues_OutputArray_eigenvectors_int_lowindex_int_highindex(src: *mut c_void, eigenvalues: *mut c_void, eigenvectors: *mut c_void, lowindex: i32, highindex: i32) -> cv_return_value_char;
#[doc(hidden)] pub fn cv_core_cv_eigen_InputArray_src_OutputArray_eigenvalues_int_lowindex_int_highindex(src: *mut c_void, eigenvalues: *mut c_void, lowindex: i32, highindex: i32) -> cv_return_value_char;
#[doc(hidden)] pub fn cv_core_cv_eigen_InputArray_src_bool_computeEigenvectors_OutputArray_eigenvalues_OutputArray_eigenvectors(src: *mut c_void, computeEigenvectors: bool, eigenvalues: *mut c_void, eigenvectors: *mut c_void) -> cv_return_value_char;
#[doc(hidden)] pub fn cv_core_cv_ellipse2Poly_Point_center_Size_axes_int_angle_int_arcStart_int_arcEnd_int_delta_VectorOfPoint_pts(center: ::core::Point, axes: ::core::Size, angle: i32, arcStart: i32, arcEnd: i32, delta: i32, pts: *mut c_void) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_ellipse_Mat_img_Point_center_Size_axes_double_angle_double_startAngle_double_endAngle_Scalar_color_int_thickness_int_lineType_int_shift(img: *mut c_void, center: ::core::Point, axes: ::core::Size, angle: f64, startAngle: f64, endAngle: f64, color: ::core::Scalar, thickness: i32, lineType: i32, shift: i32) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_ellipse_Mat_img_RotatedRect_box_Scalar_color_int_thickness_int_lineType(img: *mut c_void, _box: *mut c_void, color: ::core::Scalar, thickness: i32, lineType: i32) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_exp_InputArray_src_OutputArray_dst(src: *mut c_void, dst: *mut c_void) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_extractChannel_InputArray_src_OutputArray_dst_int_coi(src: *mut c_void, dst: *mut c_void, coi: i32) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_fastAtan2_float_y_float_x(y: f32, x: f32) -> cv_return_value_float;
#[doc(hidden)] pub fn cv_core_cv_findNonZero_InputArray_src_OutputArray_idx(src: *mut c_void, idx: *mut c_void) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_flip_InputArray_src_OutputArray_dst_int_flipCode(src: *mut c_void, dst: *mut c_void, flipCode: i32) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_gemm_InputArray_src1_InputArray_src2_double_alpha_InputArray_src3_double_beta_OutputArray_dst_int_flags(src1: *mut c_void, src2: *mut c_void, alpha: f64, src3: *mut c_void, beta: f64, dst: *mut c_void, flags: i32) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_getBuildInformation() -> cv_return_value_char_X;
#[doc(hidden)] pub fn cv_core_cv_getCPUTickCount() -> cv_return_value_int64;
#[doc(hidden)] pub fn cv_core_cv_getElemSize_int_type(_type: i32) -> cv_return_value_std_size_t;
#[doc(hidden)] pub fn cv_core_cv_getNumThreads() -> cv_return_value_int;
#[doc(hidden)] pub fn cv_core_cv_getNumberOfCPUs() -> cv_return_value_int;
#[doc(hidden)] pub fn cv_core_cv_getOptimalDFTSize_int_vecsize(vecsize: i32) -> cv_return_value_int;
#[doc(hidden)] pub fn cv_core_cv_getThreadNum() -> cv_return_value_int;
#[doc(hidden)] pub fn cv_core_cv_getTickCount() -> cv_return_value_int64;
#[doc(hidden)] pub fn cv_core_cv_getTickFrequency() -> cv_return_value_double;
#[doc(hidden)] pub fn cv_core_cv_hconcat_InputArray_src1_InputArray_src2_OutputArray_dst(src1: *mut c_void, src2: *mut c_void, dst: *mut c_void) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_idct_InputArray_src_OutputArray_dst_int_flags(src: *mut c_void, dst: *mut c_void, flags: i32) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_idft_InputArray_src_OutputArray_dst_int_flags_int_nonzeroRows(src: *mut c_void, dst: *mut c_void, flags: i32, nonzeroRows: i32) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_inRange_InputArray_src_InputArray_lowerb_InputArray_upperb_OutputArray_dst(src: *mut c_void, lowerb: *mut c_void, upperb: *mut c_void, dst: *mut c_void) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_invert_InputArray_src_OutputArray_dst_int_flags(src: *mut c_void, dst: *mut c_void, flags: i32) -> cv_return_value_double;
#[doc(hidden)] pub fn cv_core_cv_line_Mat_img_Point_pt1_Point_pt2_Scalar_color_int_thickness_int_lineType_int_shift(img: *mut c_void, pt1: ::core::Point, pt2: ::core::Point, color: ::core::Scalar, thickness: i32, lineType: i32, shift: i32) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_log_InputArray_src_OutputArray_dst(src: *mut c_void, dst: *mut c_void) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_magnitude_InputArray_x_InputArray_y_OutputArray_magnitude(x: *mut c_void, y: *mut c_void, magnitude: *mut c_void) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_max_InputArray_src1_InputArray_src2_OutputArray_dst(src1: *mut c_void, src2: *mut c_void, dst: *mut c_void) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_max_Mat_src1_Mat_src2_Mat_dst(src1: *mut c_void, src2: *mut c_void, dst: *mut c_void) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_max_Mat_src1_double_src2_Mat_dst(src1: *mut c_void, src2: f64, dst: *mut c_void) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_meanStdDev_InputArray_src_OutputArray_mean_OutputArray_stddev_InputArray_mask(src: *mut c_void, mean: *mut c_void, stddev: *mut c_void, mask: *mut c_void) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_mean_InputArray_src_InputArray_mask(src: *mut c_void, mask: *mut c_void) -> cv_return_value_c_Scalar;
#[doc(hidden)] pub fn cv_core_cv_merge_VectorOfMat_mv_OutputArray_dst(mv: *mut c_void, dst: *mut c_void) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_min_InputArray_src1_InputArray_src2_OutputArray_dst(src1: *mut c_void, src2: *mut c_void, dst: *mut c_void) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_min_Mat_src1_Mat_src2_Mat_dst(src1: *mut c_void, src2: *mut c_void, dst: *mut c_void) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_min_Mat_src1_double_src2_Mat_dst(src1: *mut c_void, src2: f64, dst: *mut c_void) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_mulSpectrums_InputArray_a_InputArray_b_OutputArray_c_int_flags_bool_conjB(a: *mut c_void, b: *mut c_void, c: *mut c_void, flags: i32, conjB: bool) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_mulTransposed_InputArray_src_OutputArray_dst_bool_aTa_InputArray_delta_double_scale_int_dtype(src: *mut c_void, dst: *mut c_void, aTa: bool, delta: *mut c_void, scale: f64, dtype: i32) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_multiply_InputArray_src1_InputArray_src2_OutputArray_dst_double_scale_int_dtype(src1: *mut c_void, src2: *mut c_void, dst: *mut c_void, scale: f64, dtype: i32) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_norm_InputArray_src1_InputArray_src2_int_normType_InputArray_mask(src1: *mut c_void, src2: *mut c_void, normType: i32, mask: *mut c_void) -> cv_return_value_double;
#[doc(hidden)] pub fn cv_core_cv_norm_InputArray_src1_int_normType_InputArray_mask(src1: *mut c_void, normType: i32, mask: *mut c_void) -> cv_return_value_double;
#[doc(hidden)] pub fn cv_core_cv_normalize_InputArray_src_OutputArray_dst_double_alpha_double_beta_int_norm_type_int_dtype_InputArray_mask(src: *mut c_void, dst: *mut c_void, alpha: f64, beta: f64, norm_type: i32, dtype: i32, mask: *mut c_void) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_parallel_for__Range_range_ParallelLoopBody_body_double_nstripes(range: *mut c_void, body: *mut c_void, nstripes: f64) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_perspectiveTransform_InputArray_src_OutputArray_dst_InputArray_m(src: *mut c_void, dst: *mut c_void, m: *mut c_void) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_phase_InputArray_x_InputArray_y_OutputArray_angle_bool_angleInDegrees(x: *mut c_void, y: *mut c_void, angle: *mut c_void, angleInDegrees: bool) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_polarToCart_InputArray_magnitude_InputArray_angle_OutputArray_x_OutputArray_y_bool_angleInDegrees(magnitude: *mut c_void, angle: *mut c_void, x: *mut c_void, y: *mut c_void, angleInDegrees: bool) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_pow_InputArray_src_double_power_OutputArray_dst(src: *mut c_void, power: f64, dst: *mut c_void) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_putText_Mat_img_String_text_Point_org_int_fontFace_double_fontScale_Scalar_color_int_thickness_int_lineType_bool_bottomLeftOrigin(img: *mut c_void, text: *const c_char, org: ::core::Point, fontFace: i32, fontScale: f64, color: ::core::Scalar, thickness: i32, lineType: i32, bottomLeftOrigin: bool) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_rectangle_Mat_img_Point_pt1_Point_pt2_Scalar_color_int_thickness_int_lineType_int_shift(img: *mut c_void, pt1: ::core::Point, pt2: ::core::Point, color: ::core::Scalar, thickness: i32, lineType: i32, shift: i32) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_rectangle_Mat_img_Rect_rec_Scalar_color_int_thickness_int_lineType_int_shift(img: *mut c_void, rec: ::core::Rect, color: ::core::Scalar, thickness: i32, lineType: i32, shift: i32) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_reduce_InputArray_src_OutputArray_dst_int_dim_int_rtype_int_dtype(src: *mut c_void, dst: *mut c_void, dim: i32, rtype: i32, dtype: i32) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_repeat_InputArray_src_int_ny_int_nx_OutputArray_dst(src: *mut c_void, ny: i32, nx: i32, dst: *mut c_void) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_repeat_Mat_src_int_ny_int_nx(src: *mut c_void, ny: i32, nx: i32) -> cv_return_value_void_X;
#[doc(hidden)] pub fn cv_core_cv_scaleAdd_InputArray_src1_double_alpha_InputArray_src2_OutputArray_dst(src1: *mut c_void, alpha: f64, src2: *mut c_void, dst: *mut c_void) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_setBreakOnError_bool_flag(flag: bool) -> cv_return_value_char;
#[doc(hidden)] pub fn cv_core_cv_setNumThreads_int_nthreads(nthreads: i32) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_setRNGSeed_int_seed(seed: i32) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_setUseOptimized_bool_onoff(onoff: bool) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_solveCubic_InputArray_coeffs_OutputArray_roots(coeffs: *mut c_void, roots: *mut c_void) -> cv_return_value_int;
#[doc(hidden)] pub fn cv_core_cv_solvePoly_InputArray_coeffs_OutputArray_roots_int_maxIters(coeffs: *mut c_void, roots: *mut c_void, maxIters: i32) -> cv_return_value_double;
#[doc(hidden)] pub fn cv_core_cv_solve_InputArray_src1_InputArray_src2_OutputArray_dst_int_flags(src1: *mut c_void, src2: *mut c_void, dst: *mut c_void, flags: i32) -> cv_return_value_char;
#[doc(hidden)] pub fn cv_core_cv_sortIdx_InputArray_src_OutputArray_dst_int_flags(src: *mut c_void, dst: *mut c_void, flags: i32) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_sort_InputArray_src_OutputArray_dst_int_flags(src: *mut c_void, dst: *mut c_void, flags: i32) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_split_Mat_m_VectorOfMat_mv(m: *mut c_void, mv: *mut c_void) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_split_Mat_src_Mat_mvbegin(src: *mut c_void, mvbegin: *mut c_void) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_sqrt_InputArray_src_OutputArray_dst(src: *mut c_void, dst: *mut c_void) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_subtract_InputArray_src1_InputArray_src2_OutputArray_dst_InputArray_mask_int_dtype(src1: *mut c_void, src2: *mut c_void, dst: *mut c_void, mask: *mut c_void, dtype: i32) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_sum_InputArray_src(src: *mut c_void) -> cv_return_value_c_Scalar;
#[doc(hidden)] pub fn cv_core_cv_swap_Mat_a_Mat_b(a: *mut c_void, b: *mut c_void) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_trace_InputArray_mtx(mtx: *mut c_void) -> cv_return_value_c_Scalar;
#[doc(hidden)] pub fn cv_core_cv_transform_InputArray_src_OutputArray_dst_InputArray_m(src: *mut c_void, dst: *mut c_void, m: *mut c_void) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_transpose_InputArray_src_OutputArray_dst(src: *mut c_void, dst: *mut c_void) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_useOptimized() -> cv_return_value_char;
#[doc(hidden)] pub fn cv_core_cv_vconcat_InputArray_src1_InputArray_src2_OutputArray_dst(src1: *mut c_void, src2: *mut c_void, dst: *mut c_void) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_Algorithm_name(instance: *const c_void) -> cv_return_value_char_X;
#[doc(hidden)] pub fn cv_core_cv_Algorithm_getInt_String_name(instance: *const c_void, name: *const c_char) -> cv_return_value_int;
#[doc(hidden)] pub fn cv_core_cv_Algorithm_getDouble_String_name(instance: *const c_void, name: *const c_char) -> cv_return_value_double;
#[doc(hidden)] pub fn cv_core_cv_Algorithm_getBool_String_name(instance: *const c_void, name: *const c_char) -> cv_return_value_char;
#[doc(hidden)] pub fn cv_core_cv_Algorithm_getString_String_name(instance: *const c_void, name: *const c_char) -> cv_return_value_char_X;
#[doc(hidden)] pub fn cv_core_cv_Algorithm_getMat_String_name(instance: *const c_void, name: *const c_char) -> cv_return_value_void_X;
#[doc(hidden)] pub fn cv_core_cv_Algorithm_getMatVector_String_name(instance: *const c_void, name: *const c_char) -> cv_return_value_void_X;
#[doc(hidden)] pub fn cv_core_cv_Algorithm_set_String_name_int_value(instance: *mut c_void, name: *const c_char, value: i32) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_Algorithm_set_String_name_double_value(instance: *mut c_void, name: *const c_char, value: f64) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_Algorithm_set_String_name_bool_value(instance: *mut c_void, name: *const c_char, value: bool) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_Algorithm_set_String_name_String_value(instance: *mut c_void, name: *const c_char, value: *const c_char) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_Algorithm_set_String_name_Mat_value(instance: *mut c_void, name: *const c_char, value: *mut c_void) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_Algorithm_set_String_name_VectorOfMat_value(instance: *mut c_void, name: *const c_char, value: *mut c_void) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_Algorithm_paramHelp_String_name(instance: *const c_void, name: *const c_char) -> cv_return_value_char_X;
#[doc(hidden)] pub fn cv_core_cv_Algorithm_paramType_String_name(instance: *const c_void, name: *const c_char) -> cv_return_value_int;
#[doc(hidden)] pub fn cv_core_cv_Algorithm_getParams_VectorOfString_names(instance: *const c_void, names: *mut c_void) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_Algorithm_getList_VectorOfString_algorithms(instance: *mut c_void, algorithms: *mut c_void) -> cv_return_value_void;
pub fn cv_delete_AutoLock(ptr : *mut c_void);
pub fn cv_delete_LineIterator(ptr : *mut c_void);
#[doc(hidden)] pub fn cv_core_cv_LineIterator_LineIterator_Mat_img_Point_pt1_Point_pt2_int_connectivity_bool_leftToRight(img: *mut c_void, pt1: ::core::Point, pt2: ::core::Point, connectivity: i32, leftToRight: bool) -> cv_return_value_void_X;
#[doc(hidden)] pub fn cv_core_cv_LineIterator_pos(instance: *const c_void) -> cv_return_value_c_Point;
pub fn cv_delete_Mat(ptr : *mut c_void);
#[doc(hidden)] pub fn cv_core_cv_Mat_Mat() -> cv_return_value_void_X;
#[doc(hidden)] pub fn cv_core_cv_Mat_Mat_int_rows_int_cols_int_type(rows: i32, cols: i32, _type: i32) -> cv_return_value_void_X;
#[doc(hidden)] pub fn cv_core_cv_Mat_Mat_Size_size_int_type(size: ::core::Size, _type: i32) -> cv_return_value_void_X;
#[doc(hidden)] pub fn cv_core_cv_Mat_Mat_int_rows_int_cols_int_type_Scalar_s(rows: i32, cols: i32, _type: i32, s: ::core::Scalar) -> cv_return_value_void_X;
#[doc(hidden)] pub fn cv_core_cv_Mat_Mat_Size_size_int_type_Scalar_s(size: ::core::Size, _type: i32, s: ::core::Scalar) -> cv_return_value_void_X;
#[doc(hidden)] pub fn cv_core_cv_Mat_Mat_Mat_m(m: *mut c_void) -> cv_return_value_void_X;
#[doc(hidden)] pub fn cv_core_cv_Mat_Mat_Mat_m_Range_rowRange_Range_colRange(m: *mut c_void, rowRange: *mut c_void, colRange: *mut c_void) -> cv_return_value_void_X;
#[doc(hidden)] pub fn cv_core_cv_Mat_Mat_Mat_m_Rect_roi(m: *mut c_void, roi: ::core::Rect) -> cv_return_value_void_X;
#[doc(hidden)] pub fn cv_core_cv_Mat_Mat_Mat_m_Range_ranges(m: *mut c_void, ranges: *mut c_void) -> cv_return_value_void_X;
#[doc(hidden)] pub fn cv_core_cv_Mat_row_int_y(instance: *const c_void, y: i32) -> cv_return_value_void_X;
#[doc(hidden)] pub fn cv_core_cv_Mat_col_int_x(instance: *const c_void, x: i32) -> cv_return_value_void_X;
#[doc(hidden)] pub fn cv_core_cv_Mat_rowRange_int_startrow_int_endrow(instance: *const c_void, startrow: i32, endrow: i32) -> cv_return_value_void_X;
#[doc(hidden)] pub fn cv_core_cv_Mat_rowRange_Range_r(instance: *const c_void, r: *mut c_void) -> cv_return_value_void_X;
#[doc(hidden)] pub fn cv_core_cv_Mat_colRange_int_startcol_int_endcol(instance: *const c_void, startcol: i32, endcol: i32) -> cv_return_value_void_X;
#[doc(hidden)] pub fn cv_core_cv_Mat_colRange_Range_r(instance: *const c_void, r: *mut c_void) -> cv_return_value_void_X;
#[doc(hidden)] pub fn cv_core_cv_Mat_diag_int_d(instance: *const c_void, d: i32) -> cv_return_value_void_X;
#[doc(hidden)] pub fn cv_core_cv_Mat_diag_Mat_d(instance: *mut c_void, d: *mut c_void) -> cv_return_value_void_X;
#[doc(hidden)] pub fn cv_core_cv_Mat_clone(instance: *const c_void) -> cv_return_value_void_X;
#[doc(hidden)] pub fn cv_core_cv_Mat_copyTo_OutputArray_m(instance: *const c_void, m: *mut c_void) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_Mat_copyTo_OutputArray_m_InputArray_mask(instance: *const c_void, m: *mut c_void, mask: *mut c_void) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_Mat_convertTo_OutputArray_m_int_rtype_double_alpha_double_beta(instance: *const c_void, m: *mut c_void, rtype: i32, alpha: f64, beta: f64) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_Mat_assignTo_Mat_m_int_type(instance: *const c_void, m: *mut c_void, _type: i32) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_Mat_setTo_InputArray_value_InputArray_mask(instance: *mut c_void, value: *mut c_void, mask: *mut c_void) -> cv_return_value_void_X;
#[doc(hidden)] pub fn cv_core_cv_Mat_reshape_int_cn_int_rows(instance: *const c_void, cn: i32, rows: i32) -> cv_return_value_void_X;
#[doc(hidden)] pub fn cv_core_cv_Mat_cross_InputArray_m(instance: *const c_void, m: *mut c_void) -> cv_return_value_void_X;
#[doc(hidden)] pub fn cv_core_cv_Mat_dot_InputArray_m(instance: *const c_void, m: *mut c_void) -> cv_return_value_double;
#[doc(hidden)] pub fn cv_core_cv_Mat_addref(instance: *mut c_void) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_Mat_release(instance: *mut c_void) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_Mat_deallocate(instance: *mut c_void) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_Mat_copySize_Mat_m(instance: *mut c_void, m: *mut c_void) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_Mat_reserve_size_t_sz(instance: *mut c_void, sz: size_t) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_Mat_resize_size_t_sz(instance: *mut c_void, sz: size_t) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_Mat_resize_size_t_sz_Scalar_s(instance: *mut c_void, sz: size_t, s: ::core::Scalar) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_Mat_push_back_Mat_m(instance: *mut c_void, m: *mut c_void) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_Mat_pop_back_size_t_nelems(instance: *mut c_void, nelems: size_t) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_Mat_locateROI_Size_wholeSize_Point_ofs(instance: *const c_void, wholeSize: ::core::Size, ofs: ::core::Point) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_Mat_adjustROI_int_dtop_int_dbottom_int_dleft_int_dright(instance: *mut c_void, dtop: i32, dbottom: i32, dleft: i32, dright: i32) -> cv_return_value_void_X;
#[doc(hidden)] pub fn cv_core_cv_Mat_isContinuous(instance: *const c_void) -> cv_return_value_char;
#[doc(hidden)] pub fn cv_core_cv_Mat_isSubmatrix(instance: *const c_void) -> cv_return_value_char;
#[doc(hidden)] pub fn cv_core_cv_Mat_elemSize(instance: *const c_void) -> cv_return_value_std_size_t;
#[doc(hidden)] pub fn cv_core_cv_Mat_elemSize1(instance: *const c_void) -> cv_return_value_std_size_t;
#[doc(hidden)] pub fn cv_core_cv_Mat_type(instance: *const c_void) -> cv_return_value_int;
#[doc(hidden)] pub fn cv_core_cv_Mat_depth(instance: *const c_void) -> cv_return_value_int;
#[doc(hidden)] pub fn cv_core_cv_Mat_channels(instance: *const c_void) -> cv_return_value_int;
#[doc(hidden)] pub fn cv_core_cv_Mat_step1_int_i(instance: *const c_void, i: i32) -> cv_return_value_std_size_t;
#[doc(hidden)] pub fn cv_core_cv_Mat_empty(instance: *const c_void) -> cv_return_value_char;
#[doc(hidden)] pub fn cv_core_cv_Mat_total(instance: *const c_void) -> cv_return_value_std_size_t;
#[doc(hidden)] pub fn cv_core_cv_Mat_checkVector_int_elemChannels_int_depth_bool_requireContinuous(instance: *const c_void, elemChannels: i32, depth: i32, requireContinuous: bool) -> cv_return_value_int;
#[doc(hidden)] pub fn cv_core_cv_Mat_ptr_int_i0(instance: *mut c_void, i0: i32) -> cv_return_value_unsigned_charX;
#[doc(hidden)] pub fn cv_core_cv_Mat_ptr_int_i0_int_i1(instance: *mut c_void, i0: i32, i1: i32) -> cv_return_value_unsigned_charX;
#[doc(hidden)] pub fn cv_core_cv_Mat_ptr_int_i0_int_i1_int_i2(instance: *mut c_void, i0: i32, i1: i32, i2: i32) -> cv_return_value_unsigned_charX;
#[doc(hidden)] pub fn cv_core_cv_Mat_size(instance: *const c_void) -> cv_return_value_c_Size;
pub fn cv_delete_Matx_AddOp(ptr : *mut c_void);
pub fn cv_delete_Matx_MatMulOp(ptr : *mut c_void);
pub fn cv_delete_Matx_MulOp(ptr : *mut c_void);
pub fn cv_delete_Matx_ScaleOp(ptr : *mut c_void);
pub fn cv_delete_Matx_SubOp(ptr : *mut c_void);
pub fn cv_delete_Matx_TOp(ptr : *mut c_void);
pub fn cv_delete_NAryMatIterator(ptr : *mut c_void);
#[doc(hidden)] pub fn cv_core_cv_NAryMatIterator_NAryMatIterator() -> cv_return_value_void_X;
pub fn cv_delete_PCA(ptr : *mut c_void);
#[doc(hidden)] pub fn cv_core_cv_PCA_PCA() -> cv_return_value_void_X;
#[doc(hidden)] pub fn cv_core_cv_PCA_PCA_InputArray_data_InputArray_mean_int_flags_int_maxComponents(data: *mut c_void, mean: *mut c_void, flags: i32, maxComponents: i32) -> cv_return_value_void_X;
#[doc(hidden)] pub fn cv_core_cv_PCA_PCA_InputArray_data_InputArray_mean_int_flags_double_retainedVariance(data: *mut c_void, mean: *mut c_void, flags: i32, retainedVariance: f64) -> cv_return_value_void_X;
#[doc(hidden)] pub fn cv_core_cv_PCA_computeVar_InputArray_data_InputArray_mean_int_flags_double_retainedVariance(instance: *mut c_void, data: *mut c_void, mean: *mut c_void, flags: i32, retainedVariance: f64) -> cv_return_value_void_X;
#[doc(hidden)] pub fn cv_core_cv_PCA_project_InputArray_vec(instance: *const c_void, vec: *mut c_void) -> cv_return_value_void_X;
#[doc(hidden)] pub fn cv_core_cv_PCA_project_InputArray_vec_OutputArray_result(instance: *const c_void, vec: *mut c_void, result: *mut c_void) -> cv_return_value_void;
#[doc(hidden)] pub fn cv_core_cv_PCA_backProject_InputArray_vec(instance: *const c_void, vec: *mut c_void) -> cv_return_value_void_X;
#[doc(hidden)] pub fn cv_core_cv_PCA_backProject_InputArray_vec_OutputArray_result(instance: *const c_void, vec: *mut c_void, result: *mut c_void) -> cv_return_value_void;
pub fn cv_delete_Range(ptr : *mut c_void);
#[doc(hidden)] pub fn cv_core_cv_Range_Range() -> cv_return_value_void_X;
#[doc(hidden)] pub fn cv_core_cv_Range_Range_int__start_int__end(_start: i32, _end: i32) -> cv_return_value_void_X;
#[doc(hidden)] pub fn cv_core_cv_Range_size(instance: *const c_void) -> cv_return_value_int;
#[doc(hidden)] pub fn cv_core_cv_Range_empty(instance: *const c_void) -> cv_return_value_char;
#[doc(hidden)] pub fn cv_core_cv_Range_all(instance: *mut c_void) -> cv_return_value_void_X;
pub fn cv_delete_RotatedRect(ptr : *mut c_void);
#[doc(hidden)] pub fn cv_core_cv_RotatedRect_RotatedRect() -> cv_return_value_void_X;
#[doc(hidden)] pub fn cv_core_cv_RotatedRect_RotatedRect_Point2f_center_Size2f_size_float_angle(center: ::core::Point2f, size: ::core::Size2f, angle: f32) -> cv_return_value_void_X;
#[doc(hidden)] pub fn cv_core_cv_RotatedRect_boundingRect(instance: *const c_void) -> cv_return_value_c_Rect;
pub fn cv_delete_TermCriteria(ptr : *mut c_void);
#[doc(hidden)] pub fn cv_core_cv_TermCriteria_TermCriteria() -> cv_return_value_void_X;
#[doc(hidden)] pub fn cv_core_cv_TermCriteria_TermCriteria_int_type_int_maxCount_double_epsilon(_type: i32, maxCount: i32, epsilon: f64) -> cv_return_value_void_X;
}
